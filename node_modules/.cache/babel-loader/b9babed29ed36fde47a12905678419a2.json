{"ast":null,"code":"import { Web3Provider } from '@ethersproject/providers';\nimport { ChainId, parseNetwork } from '@ubeswap/sdk';\nimport { InjectedConnector } from '@ubeswap/injected-connector';\nimport { LedgerConnector } from './ledger/LedgerConnector';\nimport { NetworkConnector } from './NetworkConnector';\nimport { ValoraConnector } from './valora/ValoraConnector';\nconst networkChainIDFromHostname = window.location.hostname.includes('alfajores') ? ChainId.ALFAJORES : window.location.hostname.includes('baklava') ? ChainId.BAKLAVA : ChainId.MAINNET;\nexport const NETWORK_CHAIN_ID = process.env.REACT_APP_CHAIN_ID ? parseNetwork(parseInt(process.env.REACT_APP_CHAIN_ID)) : networkChainIDFromHostname;\nconsole.log('Loading Ubeswap interface at', window.location.hostname, networkChainIDFromHostname, NETWORK_CHAIN_ID);\nexport const network = new NetworkConnector({\n  defaultChainId: NETWORK_CHAIN_ID\n});\nlet networkLibrary;\nexport function getNetworkLibrary() {\n  var _networkLibrary;\n\n  return networkLibrary = (_networkLibrary = networkLibrary) !== null && _networkLibrary !== void 0 ? _networkLibrary : new Web3Provider(network.provider);\n}\nexport const injected = new InjectedConnector({\n  supportedChainIds: [ChainId.ALFAJORES, ChainId.BAKLAVA, ChainId.MAINNET]\n});\nexport const ledger = new LedgerConnector();\nexport const valora = new ValoraConnector({\n  defaultChainId: NETWORK_CHAIN_ID\n});","map":{"version":3,"sources":["/Users/khoiplus/Desktop/celopad/cpadswaptest/src/connectors/index.ts"],"names":["Web3Provider","ChainId","parseNetwork","InjectedConnector","LedgerConnector","NetworkConnector","ValoraConnector","networkChainIDFromHostname","window","location","hostname","includes","ALFAJORES","BAKLAVA","MAINNET","NETWORK_CHAIN_ID","process","env","REACT_APP_CHAIN_ID","parseInt","console","log","network","defaultChainId","networkLibrary","getNetworkLibrary","provider","injected","supportedChainIds","ledger","valora"],"mappings":"AAAA,SAASA,YAAT,QAA6B,0BAA7B;AACA,SAASC,OAAT,EAAkBC,YAAlB,QAAsC,cAAtC;AACA,SAASC,iBAAT,QAAkC,6BAAlC;AACA,SAASC,eAAT,QAAgC,0BAAhC;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,eAAT,QAAgC,0BAAhC;AAEA,MAAMC,0BAAmC,GAAGC,MAAM,CAACC,QAAP,CAAgBC,QAAhB,CAAyBC,QAAzB,CAAkC,WAAlC,IACxCV,OAAO,CAACW,SADgC,GAExCJ,MAAM,CAACC,QAAP,CAAgBC,QAAhB,CAAyBC,QAAzB,CAAkC,SAAlC,IACAV,OAAO,CAACY,OADR,GAEAZ,OAAO,CAACa,OAJZ;AAMA,OAAO,MAAMC,gBAAyB,GAAGC,OAAO,CAACC,GAAR,CAAYC,kBAAZ,GACrChB,YAAY,CAACiB,QAAQ,CAACH,OAAO,CAACC,GAAR,CAAYC,kBAAb,CAAT,CADyB,GAErCX,0BAFG;AAIPa,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4Cb,MAAM,CAACC,QAAP,CAAgBC,QAA5D,EAAsEH,0BAAtE,EAAkGQ,gBAAlG;AAEA,OAAO,MAAMO,OAAO,GAAG,IAAIjB,gBAAJ,CAAqB;AAC1CkB,EAAAA,cAAc,EAAER;AAD0B,CAArB,CAAhB;AAIP,IAAIS,cAAJ;AACA,OAAO,SAASC,iBAAT,GAA2C;AAAA;;AAChD,SAAQD,cAAc,sBAAGA,cAAH,6DAAqB,IAAIxB,YAAJ,CAAiBsB,OAAO,CAACI,QAAzB,CAA3C;AACD;AAED,OAAO,MAAMC,QAAQ,GAAG,IAAIxB,iBAAJ,CAAsB;AAC5CyB,EAAAA,iBAAiB,EAAE,CAAC3B,OAAO,CAACW,SAAT,EAAoBX,OAAO,CAACY,OAA5B,EAAqCZ,OAAO,CAACa,OAA7C;AADyB,CAAtB,CAAjB;AAIP,OAAO,MAAMe,MAAM,GAAG,IAAIzB,eAAJ,EAAf;AAEP,OAAO,MAAM0B,MAAM,GAAG,IAAIxB,eAAJ,CAAoB;AACxCiB,EAAAA,cAAc,EAAER;AADwB,CAApB,CAAf","sourcesContent":["import { Web3Provider } from '@ethersproject/providers'\nimport { ChainId, parseNetwork } from '@ubeswap/sdk'\nimport { InjectedConnector } from '@ubeswap/injected-connector'\nimport { LedgerConnector } from './ledger/LedgerConnector'\nimport { NetworkConnector } from './NetworkConnector'\nimport { ValoraConnector } from './valora/ValoraConnector'\n\nconst networkChainIDFromHostname: ChainId = window.location.hostname.includes('alfajores')\n  ? ChainId.ALFAJORES\n  : window.location.hostname.includes('baklava')\n  ? ChainId.BAKLAVA\n  : ChainId.MAINNET\n\nexport const NETWORK_CHAIN_ID: ChainId = process.env.REACT_APP_CHAIN_ID\n  ? parseNetwork(parseInt(process.env.REACT_APP_CHAIN_ID))\n  : networkChainIDFromHostname\n\nconsole.log('Loading Ubeswap interface at', window.location.hostname, networkChainIDFromHostname, NETWORK_CHAIN_ID)\n\nexport const network = new NetworkConnector({\n  defaultChainId: NETWORK_CHAIN_ID\n})\n\nlet networkLibrary: Web3Provider | undefined\nexport function getNetworkLibrary(): Web3Provider {\n  return (networkLibrary = networkLibrary ?? new Web3Provider(network.provider as any))\n}\n\nexport const injected = new InjectedConnector({\n  supportedChainIds: [ChainId.ALFAJORES, ChainId.BAKLAVA, ChainId.MAINNET]\n})\n\nexport const ledger = new LedgerConnector()\n\nexport const valora = new ValoraConnector({\n  defaultChainId: NETWORK_CHAIN_ID\n})\n"]},"metadata":{},"sourceType":"module"}