{"ast":null,"code":"import { JSBI, Percent, TokenAmount } from '@ubeswap/sdk';\nimport { ALLOWED_PRICE_IMPACT_HIGH, ALLOWED_PRICE_IMPACT_LOW, ALLOWED_PRICE_IMPACT_MEDIUM, BLOCKED_PRICE_IMPACT_NON_EXPERT } from '../constants';\nimport { Field } from '../state/swap/actions';\nimport { basisPointsToPercent } from './index';\nconst BASE_FEE = new Percent(JSBI.BigInt(30), JSBI.BigInt(10000));\nconst ONE_HUNDRED_PERCENT = new Percent(JSBI.BigInt(10000), JSBI.BigInt(10000));\nconst INPUT_FRACTION_AFTER_FEE = ONE_HUNDRED_PERCENT.subtract(BASE_FEE); // computes price breakdown for the trade\n\nexport function computeTradePriceBreakdown(trade) {\n  // for each hop in our trade, take away the x*y=k price impact from 0.3% fees\n  // e.g. for 3 tokens/2 hops: 1 - ((1 - .03) * (1-.03))\n  const realizedLPFee = !trade ? undefined : ONE_HUNDRED_PERCENT.subtract(trade.route.pairs.reduce(currentFee => currentFee.multiply(INPUT_FRACTION_AFTER_FEE), ONE_HUNDRED_PERCENT)); // remove lp fees from price impact\n\n  const priceImpactWithoutFeeFraction = trade && realizedLPFee ? trade.priceImpact.subtract(realizedLPFee) : undefined; // the x*y=k impact\n\n  const priceImpactWithoutFeePercent = priceImpactWithoutFeeFraction ? new Percent(priceImpactWithoutFeeFraction === null || priceImpactWithoutFeeFraction === void 0 ? void 0 : priceImpactWithoutFeeFraction.numerator, priceImpactWithoutFeeFraction === null || priceImpactWithoutFeeFraction === void 0 ? void 0 : priceImpactWithoutFeeFraction.denominator) : undefined; // the amount of the input that accrues to LPs\n\n  const realizedLPFeeAmount = realizedLPFee && trade && new TokenAmount(trade.inputAmount.token, realizedLPFee.multiply(trade.inputAmount.raw).quotient);\n  return {\n    priceImpactWithoutFee: priceImpactWithoutFeePercent,\n    realizedLPFee: realizedLPFeeAmount\n  };\n} // computes the minimum amount out and maximum amount in for a trade given a user specified allowed slippage in bips\n\nexport function computeSlippageAdjustedAmounts(trade, allowedSlippage) {\n  const pct = basisPointsToPercent(allowedSlippage);\n  return {\n    [Field.INPUT]: trade === null || trade === void 0 ? void 0 : trade.maximumAmountIn(pct),\n    [Field.OUTPUT]: trade === null || trade === void 0 ? void 0 : trade.minimumAmountOut(pct)\n  };\n}\nexport function warningSeverity(priceImpact) {\n  if (!(priceImpact === null || priceImpact === void 0 ? void 0 : priceImpact.lessThan(BLOCKED_PRICE_IMPACT_NON_EXPERT))) return 4;\n  if (!(priceImpact === null || priceImpact === void 0 ? void 0 : priceImpact.lessThan(ALLOWED_PRICE_IMPACT_HIGH))) return 3;\n  if (!(priceImpact === null || priceImpact === void 0 ? void 0 : priceImpact.lessThan(ALLOWED_PRICE_IMPACT_MEDIUM))) return 2;\n  if (!(priceImpact === null || priceImpact === void 0 ? void 0 : priceImpact.lessThan(ALLOWED_PRICE_IMPACT_LOW))) return 1;\n  return 0;\n}\nexport function formatExecutionPrice(trade, inverted) {\n  if (!trade) {\n    return '';\n  }\n\n  return inverted ? `${trade.executionPrice.invert().toSignificant(6)} ${trade.inputAmount.currency.symbol} / ${trade.outputAmount.currency.symbol}` : `${trade.executionPrice.toSignificant(6)} ${trade.outputAmount.currency.symbol} / ${trade.inputAmount.currency.symbol}`;\n}","map":{"version":3,"sources":["/Users/khoiplus/Desktop/celopad/cpadswaptest/src/utils/prices.ts"],"names":["JSBI","Percent","TokenAmount","ALLOWED_PRICE_IMPACT_HIGH","ALLOWED_PRICE_IMPACT_LOW","ALLOWED_PRICE_IMPACT_MEDIUM","BLOCKED_PRICE_IMPACT_NON_EXPERT","Field","basisPointsToPercent","BASE_FEE","BigInt","ONE_HUNDRED_PERCENT","INPUT_FRACTION_AFTER_FEE","subtract","computeTradePriceBreakdown","trade","realizedLPFee","undefined","route","pairs","reduce","currentFee","multiply","priceImpactWithoutFeeFraction","priceImpact","priceImpactWithoutFeePercent","numerator","denominator","realizedLPFeeAmount","inputAmount","token","raw","quotient","priceImpactWithoutFee","computeSlippageAdjustedAmounts","allowedSlippage","pct","INPUT","maximumAmountIn","OUTPUT","minimumAmountOut","warningSeverity","lessThan","formatExecutionPrice","inverted","executionPrice","invert","toSignificant","currency","symbol","outputAmount"],"mappings":"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","sourcesContent":["import { Fraction, JSBI, Percent, TokenAmount, Trade } from '@ubeswap/sdk'\nimport {\n  ALLOWED_PRICE_IMPACT_HIGH,\n  ALLOWED_PRICE_IMPACT_LOW,\n  ALLOWED_PRICE_IMPACT_MEDIUM,\n  BLOCKED_PRICE_IMPACT_NON_EXPERT\n} from '../constants'\nimport { Field } from '../state/swap/actions'\nimport { basisPointsToPercent } from './index'\n\nconst BASE_FEE = new Percent(JSBI.BigInt(30), JSBI.BigInt(10000))\nconst ONE_HUNDRED_PERCENT = new Percent(JSBI.BigInt(10000), JSBI.BigInt(10000))\nconst INPUT_FRACTION_AFTER_FEE = ONE_HUNDRED_PERCENT.subtract(BASE_FEE)\n\n// computes price breakdown for the trade\nexport function computeTradePriceBreakdown(\n  trade?: Trade | null\n): { priceImpactWithoutFee: Percent | undefined; realizedLPFee: TokenAmount | undefined | null } {\n  // for each hop in our trade, take away the x*y=k price impact from 0.3% fees\n  // e.g. for 3 tokens/2 hops: 1 - ((1 - .03) * (1-.03))\n  const realizedLPFee = !trade\n    ? undefined\n    : ONE_HUNDRED_PERCENT.subtract(\n        trade.route.pairs.reduce<Fraction>(\n          (currentFee: Fraction): Fraction => currentFee.multiply(INPUT_FRACTION_AFTER_FEE),\n          ONE_HUNDRED_PERCENT\n        )\n      )\n\n  // remove lp fees from price impact\n  const priceImpactWithoutFeeFraction = trade && realizedLPFee ? trade.priceImpact.subtract(realizedLPFee) : undefined\n\n  // the x*y=k impact\n  const priceImpactWithoutFeePercent = priceImpactWithoutFeeFraction\n    ? new Percent(priceImpactWithoutFeeFraction?.numerator, priceImpactWithoutFeeFraction?.denominator)\n    : undefined\n\n  // the amount of the input that accrues to LPs\n  const realizedLPFeeAmount =\n    realizedLPFee &&\n    trade &&\n    new TokenAmount(trade.inputAmount.token, realizedLPFee.multiply(trade.inputAmount.raw).quotient)\n\n  return { priceImpactWithoutFee: priceImpactWithoutFeePercent, realizedLPFee: realizedLPFeeAmount }\n}\n\n// computes the minimum amount out and maximum amount in for a trade given a user specified allowed slippage in bips\nexport function computeSlippageAdjustedAmounts(\n  trade: Trade | undefined,\n  allowedSlippage: number\n): { [field in Field]?: TokenAmount } {\n  const pct = basisPointsToPercent(allowedSlippage)\n  return {\n    [Field.INPUT]: trade?.maximumAmountIn(pct),\n    [Field.OUTPUT]: trade?.minimumAmountOut(pct)\n  }\n}\n\nexport function warningSeverity(priceImpact: Percent | undefined): 0 | 1 | 2 | 3 | 4 {\n  if (!priceImpact?.lessThan(BLOCKED_PRICE_IMPACT_NON_EXPERT)) return 4\n  if (!priceImpact?.lessThan(ALLOWED_PRICE_IMPACT_HIGH)) return 3\n  if (!priceImpact?.lessThan(ALLOWED_PRICE_IMPACT_MEDIUM)) return 2\n  if (!priceImpact?.lessThan(ALLOWED_PRICE_IMPACT_LOW)) return 1\n  return 0\n}\n\nexport function formatExecutionPrice(trade?: Trade, inverted?: boolean): string {\n  if (!trade) {\n    return ''\n  }\n  return inverted\n    ? `${trade.executionPrice.invert().toSignificant(6)} ${trade.inputAmount.currency.symbol} / ${\n        trade.outputAmount.currency.symbol\n      }`\n    : `${trade.executionPrice.toSignificant(6)} ${trade.outputAmount.currency.symbol} / ${\n        trade.inputAmount.currency.symbol\n      }`\n}\n"]},"metadata":{},"sourceType":"module"}