{"ast":null,"code":"import { parseUnits } from '@ethersproject/units';\nimport { cUSD, JSBI, Token, TokenAmount } from '@ubeswap/sdk';\nimport { useTradeExactIn, useTradeExactOut } from 'hooks/Trades';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ROUTER_ADDRESS } from '../../constants';\nimport { useActiveWeb3React } from '../../hooks';\nimport { useCurrency } from '../../hooks/Tokens';\nimport useENS from '../../hooks/useENS';\nimport useParsedQueryString from '../../hooks/useParsedQueryString';\nimport { isAddress } from '../../utils';\nimport { computeSlippageAdjustedAmounts } from '../../utils/prices';\nimport { useUserSlippageTolerance } from '../user/hooks';\nimport { useCurrencyBalances } from '../wallet/hooks';\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions';\nexport function useSwapState() {\n  return useSelector(state => state.swap);\n}\nexport function useSwapActionHandlers() {\n  const dispatch = useDispatch();\n  const onCurrencySelection = useCallback((field, currency) => {\n    dispatch(selectCurrency({\n      field,\n      currencyId: currency instanceof Token ? currency.address : ''\n    }));\n  }, [dispatch]);\n  const onSwitchTokens = useCallback(() => {\n    dispatch(switchCurrencies());\n  }, [dispatch]);\n  const onUserInput = useCallback((field, typedValue) => {\n    dispatch(typeInput({\n      field,\n      typedValue\n    }));\n  }, [dispatch]);\n  const onChangeRecipient = useCallback(recipient => {\n    dispatch(setRecipient({\n      recipient\n    }));\n  }, [dispatch]);\n  return {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient\n  };\n} // try to parse a user entered amount for a given token\n\nexport function tryParseAmount(value, currency) {\n  if (!value || !currency) {\n    return undefined;\n  }\n\n  try {\n    const typedValueParsed = parseUnits(value, currency.decimals).toString();\n\n    if (typedValueParsed !== '0') {\n      return new TokenAmount(currency, JSBI.BigInt(typedValueParsed));\n    }\n  } catch (error) {\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\n    console.debug(`Failed to parse input amount: \"${value}\"`, error);\n  } // necessary for all paths to return a value\n\n\n  return undefined;\n}\nconst BAD_RECIPIENT_ADDRESSES = ['0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f', // v2 factory\n'0xf164fC0Ec4E93095b804a4795bBe1e041497b92a', // v2 router 01\n'0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D', // v2 router 02\nROUTER_ADDRESS];\n/**\n * Returns true if any of the pairs or tokens in a trade have the given checksummed address\n * @param trade to check for the given address\n * @param checksummedAddress address to check in the pairs and tokens\n */\n\nfunction involvesAddress(trade, checksummedAddress) {\n  return trade.route.path.some(token => token.address === checksummedAddress) || trade.route.pairs.some(pair => pair.liquidityToken.address === checksummedAddress);\n} // from the current swap inputs, compute the best trade and return it.\n\n\nexport function useDerivedSwapInfo() {\n  var _ref, _ref2;\n\n  const {\n    account\n  } = useActiveWeb3React();\n  const {\n    independentField,\n    typedValue,\n    [Field.INPUT]: {\n      currencyId: inputCurrencyId\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrencyId\n    },\n    recipient\n  } = useSwapState();\n  const inputCurrency = useCurrency(inputCurrencyId);\n  const outputCurrency = useCurrency(outputCurrencyId);\n  const recipientLookup = useENS(recipient !== null && recipient !== void 0 ? recipient : undefined);\n  const to = (_ref = recipient === null ? account : recipientLookup.address) !== null && _ref !== void 0 ? _ref : null;\n  const relevantTokenBalances = useCurrencyBalances(account !== null && account !== void 0 ? account : undefined, [inputCurrency !== null && inputCurrency !== void 0 ? inputCurrency : undefined, outputCurrency !== null && outputCurrency !== void 0 ? outputCurrency : undefined]);\n  const isExactIn = independentField === Field.INPUT;\n  const parsedAmount = tryParseAmount(typedValue, (_ref2 = isExactIn ? inputCurrency : outputCurrency) !== null && _ref2 !== void 0 ? _ref2 : undefined);\n  const bestTradeExactIn = useTradeExactIn(isExactIn ? parsedAmount : undefined, outputCurrency !== null && outputCurrency !== void 0 ? outputCurrency : undefined);\n  const bestTradeExactOut = useTradeExactOut(inputCurrency !== null && inputCurrency !== void 0 ? inputCurrency : undefined, !isExactIn ? parsedAmount : undefined);\n  const v2Trade = isExactIn ? bestTradeExactIn : bestTradeExactOut;\n  const currencyBalances = {\n    [Field.INPUT]: relevantTokenBalances[0],\n    [Field.OUTPUT]: relevantTokenBalances[1]\n  };\n  const currencies = {\n    [Field.INPUT]: inputCurrency !== null && inputCurrency !== void 0 ? inputCurrency : undefined,\n    [Field.OUTPUT]: outputCurrency !== null && outputCurrency !== void 0 ? outputCurrency : undefined\n  };\n  let inputError;\n\n  if (!account) {\n    inputError = 'Connect Wallet';\n  }\n\n  if (!parsedAmount) {\n    var _inputError;\n\n    inputError = (_inputError = inputError) !== null && _inputError !== void 0 ? _inputError : 'Enter an amount';\n  }\n\n  if (!currencies[Field.INPUT] || !currencies[Field.OUTPUT]) {\n    var _inputError2;\n\n    inputError = (_inputError2 = inputError) !== null && _inputError2 !== void 0 ? _inputError2 : 'Select a token';\n  }\n\n  const formattedTo = isAddress(to);\n\n  if (!to || !formattedTo) {\n    var _inputError3;\n\n    inputError = (_inputError3 = inputError) !== null && _inputError3 !== void 0 ? _inputError3 : 'Enter a recipient';\n  } else {\n    if (BAD_RECIPIENT_ADDRESSES.indexOf(formattedTo) !== -1 || bestTradeExactIn && involvesAddress(bestTradeExactIn, formattedTo) || bestTradeExactOut && involvesAddress(bestTradeExactOut, formattedTo)) {\n      var _inputError4;\n\n      inputError = (_inputError4 = inputError) !== null && _inputError4 !== void 0 ? _inputError4 : 'Invalid recipient';\n    }\n  }\n\n  const [allowedSlippage] = useUserSlippageTolerance();\n  const slippageAdjustedAmounts = v2Trade && allowedSlippage && computeSlippageAdjustedAmounts(v2Trade, allowedSlippage); // compare input balance to max input based on version\n\n  const [balanceIn, amountIn] = [currencyBalances[Field.INPUT], slippageAdjustedAmounts ? slippageAdjustedAmounts[Field.INPUT] : null];\n\n  if (balanceIn && amountIn && balanceIn.lessThan(amountIn)) {\n    inputError = 'Insufficient ' + amountIn.currency.symbol + ' balance';\n  }\n\n  return {\n    currencies,\n    currencyBalances,\n    parsedAmount,\n    v2Trade: v2Trade !== null && v2Trade !== void 0 ? v2Trade : undefined,\n    inputError\n  };\n}\n\nfunction parseCurrencyFromURLParameter(urlParam, chainId) {\n  var _cUSD$chainId$address;\n\n  if (typeof urlParam === 'string') {\n    const valid = isAddress(urlParam);\n    if (valid) return valid;\n    if (urlParam.toUpperCase() === 'CUSD') return cUSD[chainId].address;\n    if (valid === false) return cUSD[chainId].address;\n  }\n\n  return (_cUSD$chainId$address = cUSD[chainId].address) !== null && _cUSD$chainId$address !== void 0 ? _cUSD$chainId$address : '';\n}\n\nfunction parseTokenAmountURLParameter(urlParam) {\n  return typeof urlParam === 'string' && !isNaN(parseFloat(urlParam)) ? urlParam : '';\n}\n\nfunction parseIndependentFieldURLParameter(urlParam) {\n  return typeof urlParam === 'string' && urlParam.toLowerCase() === 'output' ? Field.OUTPUT : Field.INPUT;\n}\n\nconst ENS_NAME_REGEX = /^[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)?$/;\nconst ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/;\n\nfunction validatedRecipient(recipient) {\n  if (typeof recipient !== 'string') return null;\n  const address = isAddress(recipient);\n  if (address) return address;\n  if (ENS_NAME_REGEX.test(recipient)) return recipient;\n  if (ADDRESS_REGEX.test(recipient)) return recipient;\n  return null;\n}\n\nexport function queryParametersToSwapState(parsedQs, chainId) {\n  let inputCurrency = parseCurrencyFromURLParameter(parsedQs.inputCurrency, chainId);\n  let outputCurrency = parseCurrencyFromURLParameter(parsedQs.outputCurrency, chainId);\n\n  if (inputCurrency === outputCurrency) {\n    if (typeof parsedQs.outputCurrency === 'string') {\n      inputCurrency = '';\n    } else {\n      outputCurrency = '';\n    }\n  }\n\n  const recipient = validatedRecipient(parsedQs.recipient);\n  return {\n    [Field.INPUT]: {\n      currencyId: inputCurrency\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrency\n    },\n    typedValue: parseTokenAmountURLParameter(parsedQs.exactAmount),\n    independentField: parseIndependentFieldURLParameter(parsedQs.exactField),\n    recipient\n  };\n} // updates the swap state to use the defaults for a given network\n\nexport function useDefaultsFromURLSearch() {\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const dispatch = useDispatch();\n  const parsedQs = useParsedQueryString();\n  const [result, setResult] = useState();\n  useEffect(() => {\n    if (!chainId) return;\n    const parsed = queryParametersToSwapState(parsedQs, chainId);\n    dispatch(replaceSwapState({\n      typedValue: parsed.typedValue,\n      field: parsed.independentField,\n      inputCurrencyId: parsed[Field.INPUT].currencyId,\n      outputCurrencyId: parsed[Field.OUTPUT].currencyId,\n      recipient: parsed.recipient\n    }));\n    setResult({\n      inputCurrencyId: parsed[Field.INPUT].currencyId,\n      outputCurrencyId: parsed[Field.OUTPUT].currencyId\n    }); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, chainId]);\n  return result;\n}","map":{"version":3,"sources":["/Users/khoiplus/Desktop/celopad/cpadswaptest/src/state/swap/hooks.ts"],"names":["parseUnits","cUSD","JSBI","Token","TokenAmount","useTradeExactIn","useTradeExactOut","useCallback","useEffect","useState","useDispatch","useSelector","ROUTER_ADDRESS","useActiveWeb3React","useCurrency","useENS","useParsedQueryString","isAddress","computeSlippageAdjustedAmounts","useUserSlippageTolerance","useCurrencyBalances","Field","replaceSwapState","selectCurrency","setRecipient","switchCurrencies","typeInput","useSwapState","state","swap","useSwapActionHandlers","dispatch","onCurrencySelection","field","currency","currencyId","address","onSwitchTokens","onUserInput","typedValue","onChangeRecipient","recipient","tryParseAmount","value","undefined","typedValueParsed","decimals","toString","BigInt","error","console","debug","BAD_RECIPIENT_ADDRESSES","involvesAddress","trade","checksummedAddress","route","path","some","token","pairs","pair","liquidityToken","useDerivedSwapInfo","account","independentField","INPUT","inputCurrencyId","OUTPUT","outputCurrencyId","inputCurrency","outputCurrency","recipientLookup","to","relevantTokenBalances","isExactIn","parsedAmount","bestTradeExactIn","bestTradeExactOut","v2Trade","currencyBalances","currencies","inputError","formattedTo","indexOf","allowedSlippage","slippageAdjustedAmounts","balanceIn","amountIn","lessThan","symbol","parseCurrencyFromURLParameter","urlParam","chainId","valid","toUpperCase","parseTokenAmountURLParameter","isNaN","parseFloat","parseIndependentFieldURLParameter","toLowerCase","ENS_NAME_REGEX","ADDRESS_REGEX","validatedRecipient","test","queryParametersToSwapState","parsedQs","exactAmount","exactField","useDefaultsFromURLSearch","result","setResult","parsed"],"mappings":"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","sourcesContent":["import { parseUnits } from '@ethersproject/units'\nimport { ChainId, cUSD, JSBI, Token, TokenAmount, Trade } from '@ubeswap/sdk'\nimport { useTradeExactIn, useTradeExactOut } from 'hooks/Trades'\nimport { ParsedQs } from 'qs'\nimport { useCallback, useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { ROUTER_ADDRESS } from '../../constants'\nimport { useActiveWeb3React } from '../../hooks'\nimport { useCurrency } from '../../hooks/Tokens'\nimport useENS from '../../hooks/useENS'\nimport useParsedQueryString from '../../hooks/useParsedQueryString'\nimport { isAddress } from '../../utils'\nimport { computeSlippageAdjustedAmounts } from '../../utils/prices'\nimport { AppDispatch, AppState } from '../index'\nimport { useUserSlippageTolerance } from '../user/hooks'\nimport { useCurrencyBalances } from '../wallet/hooks'\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions'\nimport { SwapState } from './reducer'\n\nexport function useSwapState(): AppState['swap'] {\n  return useSelector<AppState, AppState['swap']>(state => state.swap)\n}\n\nexport function useSwapActionHandlers(): {\n  onCurrencySelection: (field: Field, currency: Token) => void\n  onSwitchTokens: () => void\n  onUserInput: (field: Field, typedValue: string) => void\n  onChangeRecipient: (recipient: string | null) => void\n} {\n  const dispatch = useDispatch<AppDispatch>()\n  const onCurrencySelection = useCallback(\n    (field: Field, currency: Token) => {\n      dispatch(\n        selectCurrency({\n          field,\n          currencyId: currency instanceof Token ? currency.address : ''\n        })\n      )\n    },\n    [dispatch]\n  )\n\n  const onSwitchTokens = useCallback(() => {\n    dispatch(switchCurrencies())\n  }, [dispatch])\n\n  const onUserInput = useCallback(\n    (field: Field, typedValue: string) => {\n      dispatch(typeInput({ field, typedValue }))\n    },\n    [dispatch]\n  )\n\n  const onChangeRecipient = useCallback(\n    (recipient: string | null) => {\n      dispatch(setRecipient({ recipient }))\n    },\n    [dispatch]\n  )\n\n  return {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient\n  }\n}\n\n// try to parse a user entered amount for a given token\nexport function tryParseAmount(value?: string, currency?: Token): TokenAmount | undefined {\n  if (!value || !currency) {\n    return undefined\n  }\n  try {\n    const typedValueParsed = parseUnits(value, currency.decimals).toString()\n    if (typedValueParsed !== '0') {\n      return new TokenAmount(currency as Token, JSBI.BigInt(typedValueParsed))\n    }\n  } catch (error) {\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\n    console.debug(`Failed to parse input amount: \"${value}\"`, error)\n  }\n  // necessary for all paths to return a value\n  return undefined\n}\n\nconst BAD_RECIPIENT_ADDRESSES: string[] = [\n  '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f', // v2 factory\n  '0xf164fC0Ec4E93095b804a4795bBe1e041497b92a', // v2 router 01\n  '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D', // v2 router 02\n  ROUTER_ADDRESS\n]\n\n/**\n * Returns true if any of the pairs or tokens in a trade have the given checksummed address\n * @param trade to check for the given address\n * @param checksummedAddress address to check in the pairs and tokens\n */\nfunction involvesAddress(trade: Trade, checksummedAddress: string): boolean {\n  return (\n    trade.route.path.some(token => token.address === checksummedAddress) ||\n    trade.route.pairs.some(pair => pair.liquidityToken.address === checksummedAddress)\n  )\n}\n\n// from the current swap inputs, compute the best trade and return it.\nexport function useDerivedSwapInfo(): {\n  currencies: { [field in Field]?: Token }\n  currencyBalances: { [field in Field]?: TokenAmount }\n  parsedAmount: TokenAmount | undefined\n  v2Trade: Trade | undefined\n  inputError?: string\n} {\n  const { account } = useActiveWeb3React()\n\n  const {\n    independentField,\n    typedValue,\n    [Field.INPUT]: { currencyId: inputCurrencyId },\n    [Field.OUTPUT]: { currencyId: outputCurrencyId },\n    recipient\n  } = useSwapState()\n\n  const inputCurrency = useCurrency(inputCurrencyId)\n  const outputCurrency = useCurrency(outputCurrencyId)\n  const recipientLookup = useENS(recipient ?? undefined)\n  const to: string | null = (recipient === null ? account : recipientLookup.address) ?? null\n\n  const relevantTokenBalances = useCurrencyBalances(account ?? undefined, [\n    inputCurrency ?? undefined,\n    outputCurrency ?? undefined\n  ])\n\n  const isExactIn: boolean = independentField === Field.INPUT\n  const parsedAmount = tryParseAmount(typedValue, (isExactIn ? inputCurrency : outputCurrency) ?? undefined)\n\n  const bestTradeExactIn = useTradeExactIn(isExactIn ? parsedAmount : undefined, outputCurrency ?? undefined)\n  const bestTradeExactOut = useTradeExactOut(inputCurrency ?? undefined, !isExactIn ? parsedAmount : undefined)\n\n  const v2Trade = isExactIn ? bestTradeExactIn : bestTradeExactOut\n\n  const currencyBalances = {\n    [Field.INPUT]: relevantTokenBalances[0],\n    [Field.OUTPUT]: relevantTokenBalances[1]\n  }\n\n  const currencies: { [field in Field]?: Token } = {\n    [Field.INPUT]: inputCurrency ?? undefined,\n    [Field.OUTPUT]: outputCurrency ?? undefined\n  }\n\n  let inputError: string | undefined\n  if (!account) {\n    inputError = 'Connect Wallet'\n  }\n\n  if (!parsedAmount) {\n    inputError = inputError ?? 'Enter an amount'\n  }\n\n  if (!currencies[Field.INPUT] || !currencies[Field.OUTPUT]) {\n    inputError = inputError ?? 'Select a token'\n  }\n\n  const formattedTo = isAddress(to)\n  if (!to || !formattedTo) {\n    inputError = inputError ?? 'Enter a recipient'\n  } else {\n    if (\n      BAD_RECIPIENT_ADDRESSES.indexOf(formattedTo) !== -1 ||\n      (bestTradeExactIn && involvesAddress(bestTradeExactIn, formattedTo)) ||\n      (bestTradeExactOut && involvesAddress(bestTradeExactOut, formattedTo))\n    ) {\n      inputError = inputError ?? 'Invalid recipient'\n    }\n  }\n\n  const [allowedSlippage] = useUserSlippageTolerance()\n\n  const slippageAdjustedAmounts = v2Trade && allowedSlippage && computeSlippageAdjustedAmounts(v2Trade, allowedSlippage)\n\n  // compare input balance to max input based on version\n  const [balanceIn, amountIn] = [\n    currencyBalances[Field.INPUT],\n    slippageAdjustedAmounts ? slippageAdjustedAmounts[Field.INPUT] : null\n  ]\n\n  if (balanceIn && amountIn && balanceIn.lessThan(amountIn)) {\n    inputError = 'Insufficient ' + amountIn.currency.symbol + ' balance'\n  }\n\n  return {\n    currencies,\n    currencyBalances,\n    parsedAmount,\n    v2Trade: v2Trade ?? undefined,\n    inputError\n  }\n}\n\nfunction parseCurrencyFromURLParameter(urlParam: any, chainId: ChainId): string {\n  if (typeof urlParam === 'string') {\n    const valid = isAddress(urlParam)\n    if (valid) return valid\n    if (urlParam.toUpperCase() === 'CUSD') return cUSD[chainId].address\n    if (valid === false) return cUSD[chainId].address\n  }\n  return cUSD[chainId].address ?? ''\n}\n\nfunction parseTokenAmountURLParameter(urlParam: any): string {\n  return typeof urlParam === 'string' && !isNaN(parseFloat(urlParam)) ? urlParam : ''\n}\n\nfunction parseIndependentFieldURLParameter(urlParam: any): Field {\n  return typeof urlParam === 'string' && urlParam.toLowerCase() === 'output' ? Field.OUTPUT : Field.INPUT\n}\n\nconst ENS_NAME_REGEX = /^[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)?$/\nconst ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/\nfunction validatedRecipient(recipient: any): string | null {\n  if (typeof recipient !== 'string') return null\n  const address = isAddress(recipient)\n  if (address) return address\n  if (ENS_NAME_REGEX.test(recipient)) return recipient\n  if (ADDRESS_REGEX.test(recipient)) return recipient\n  return null\n}\n\nexport function queryParametersToSwapState(parsedQs: ParsedQs, chainId: ChainId): SwapState {\n  let inputCurrency = parseCurrencyFromURLParameter(parsedQs.inputCurrency, chainId)\n  let outputCurrency = parseCurrencyFromURLParameter(parsedQs.outputCurrency, chainId)\n  if (inputCurrency === outputCurrency) {\n    if (typeof parsedQs.outputCurrency === 'string') {\n      inputCurrency = ''\n    } else {\n      outputCurrency = ''\n    }\n  }\n\n  const recipient = validatedRecipient(parsedQs.recipient)\n\n  return {\n    [Field.INPUT]: {\n      currencyId: inputCurrency\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrency\n    },\n    typedValue: parseTokenAmountURLParameter(parsedQs.exactAmount),\n    independentField: parseIndependentFieldURLParameter(parsedQs.exactField),\n    recipient\n  }\n}\n\n// updates the swap state to use the defaults for a given network\nexport function useDefaultsFromURLSearch():\n  | { inputCurrencyId: string | undefined; outputCurrencyId: string | undefined }\n  | undefined {\n  const { chainId } = useActiveWeb3React()\n  const dispatch = useDispatch<AppDispatch>()\n  const parsedQs = useParsedQueryString()\n  const [result, setResult] = useState<\n    { inputCurrencyId: string | undefined; outputCurrencyId: string | undefined } | undefined\n  >()\n\n  useEffect(() => {\n    if (!chainId) return\n    const parsed = queryParametersToSwapState(parsedQs, chainId)\n\n    dispatch(\n      replaceSwapState({\n        typedValue: parsed.typedValue,\n        field: parsed.independentField,\n        inputCurrencyId: parsed[Field.INPUT].currencyId,\n        outputCurrencyId: parsed[Field.OUTPUT].currencyId,\n        recipient: parsed.recipient\n      })\n    )\n\n    setResult({ inputCurrencyId: parsed[Field.INPUT].currencyId, outputCurrencyId: parsed[Field.OUTPUT].currencyId })\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, chainId])\n\n  return result\n}\n"]},"metadata":{},"sourceType":"module"}