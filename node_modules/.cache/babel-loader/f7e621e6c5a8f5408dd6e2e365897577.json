{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar bignumber_js_1 = require(\"bignumber.js\");\n\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nvar web3_eth_abi_1 = __importDefault(require(\"web3-eth-abi\"));\n/**\n * Generates the EIP712 Typed Data hash for signing\n * @param   typedData An object that conforms to the EIP712TypedData interface\n * @return  A Buffer containing the hash of the typed data.\n */\n\n\nfunction generateTypedDataHash(typedData) {\n  return ethereumjs_util_1.sha3(Buffer.concat([Buffer.from('1901', 'hex'), structHash('EIP712Domain', typedData.domain, typedData.types), structHash(typedData.primaryType, typedData.message, typedData.types)]));\n}\n\nexports.generateTypedDataHash = generateTypedDataHash;\n\nfunction findDependencies(primaryType, types, found) {\n  if (found === void 0) {\n    found = [];\n  }\n\n  if (found.includes(primaryType) || types[primaryType] === undefined) {\n    return found;\n  }\n\n  found.push(primaryType);\n\n  for (var _i = 0, _a = types[primaryType]; _i < _a.length; _i++) {\n    var field = _a[_i];\n\n    for (var _b = 0, _c = findDependencies(field.type, types, found); _b < _c.length; _b++) {\n      var dep = _c[_b];\n\n      if (!found.includes(dep)) {\n        found.push(dep);\n      }\n    }\n  }\n\n  return found;\n}\n\nfunction encodeType(primaryType, types) {\n  var deps = findDependencies(primaryType, types);\n  deps = deps.filter(function (d) {\n    return d !== primaryType;\n  });\n  deps = [primaryType].concat(deps.sort());\n  var result = '';\n\n  for (var _i = 0, deps_1 = deps; _i < deps_1.length; _i++) {\n    var dep = deps_1[_i];\n    result += dep + \"(\" + types[dep].map(function (_a) {\n      var name = _a.name,\n          type = _a.type;\n      return type + \" \" + name;\n    }).join(',') + \")\";\n  }\n\n  return result;\n}\n\nfunction encodeData(primaryType, data, types) {\n  var encodedTypes = ['bytes32'];\n  var encodedValues = [typeHash(primaryType, types)];\n\n  for (var _i = 0, _a = types[primaryType]; _i < _a.length; _i++) {\n    var field = _a[_i];\n    var value = data[field.name];\n\n    if (field.type === 'string' || field.type === 'bytes') {\n      var hashValue = ethereumjs_util_1.sha3(value);\n      encodedTypes.push('bytes32');\n      encodedValues.push(hashValue);\n    } else if (types[field.type] !== undefined) {\n      encodedTypes.push('bytes32');\n      var hashValue = ethereumjs_util_1.sha3( // tslint:disable-next-line:no-unnecessary-type-assertion\n      encodeData(field.type, value, types));\n      encodedValues.push(hashValue);\n    } else if (field.type.lastIndexOf(']') === field.type.length - 1) {\n      throw new Error('Arrays currently unimplemented in encodeData');\n    } else {\n      encodedTypes.push(field.type);\n      var normalizedValue = normalizeValue(field.type, value);\n      encodedValues.push(normalizedValue);\n    }\n  } // @ts-ignore\n\n\n  return web3_eth_abi_1.default.encodeParameters(encodedTypes, encodedValues);\n}\n\nfunction normalizeValue(type, value) {\n  var normalizedValue = type === 'uint256' && bignumber_js_1.BigNumber.isBigNumber(value) ? value.toString() : value;\n  return normalizedValue;\n}\n\nfunction typeHash(primaryType, types) {\n  return ethereumjs_util_1.sha3(encodeType(primaryType, types));\n}\n\nfunction structHash(primaryType, data, types) {\n  return ethereumjs_util_1.sha3(encodeData(primaryType, data, types));\n}\n\nexports.structHash = structHash;","map":{"version":3,"sources":["../src/sign-typed-data-utils.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,IAAA,cAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AACA,IAAA,iBAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,IAAA,cAAA,GAAA,eAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA;AAwBA;;;;;;;AAKA,SAAgB,qBAAhB,CAAsC,SAAtC,EAAgE;AAC9D,SAAO,iBAAA,CAAA,IAAA,CACL,MAAM,CAAC,MAAP,CAAc,CACZ,MAAM,CAAC,IAAP,CAAY,MAAZ,EAAoB,KAApB,CADY,EAEZ,UAAU,CAAC,cAAD,EAAiB,SAAS,CAAC,MAA3B,EAAmC,SAAS,CAAC,KAA7C,CAFE,EAGZ,UAAU,CAAC,SAAS,CAAC,WAAX,EAAwB,SAAS,CAAC,OAAlC,EAA2C,SAAS,CAAC,KAArD,CAHE,CAAd,CADK,CAAP;AAOD;;AARD,OAAA,CAAA,qBAAA,GAAA,qBAAA;;AAUA,SAAS,gBAAT,CAA0B,WAA1B,EAA+C,KAA/C,EAAmE,KAAnE,EAAuF;AAApB,MAAA,KAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,KAAA,GAAA,EAAA;AAAoB;;AACrF,MAAI,KAAK,CAAC,QAAN,CAAe,WAAf,KAA+B,KAAK,CAAC,WAAD,CAAL,KAAuB,SAA1D,EAAqE;AACnE,WAAO,KAAP;AACD;;AACD,EAAA,KAAK,CAAC,IAAN,CAAW,WAAX;;AACA,OAAoB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,KAAK,CAAC,WAAD,CAAzB,EAAoB,EAAA,GAAA,EAAA,CAAA,MAApB,EAAoB,EAAA,EAApB,EAAwC;AAAnC,QAAM,KAAK,GAAA,EAAA,CAAA,EAAA,CAAX;;AACH,SAAkB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,gBAAgB,CAAC,KAAK,CAAC,IAAP,EAAa,KAAb,EAAoB,KAApB,CAAlC,EAAkB,EAAA,GAAA,EAAA,CAAA,MAAlB,EAAkB,EAAA,EAAlB,EAA8D;AAAzD,UAAM,GAAG,GAAA,EAAA,CAAA,EAAA,CAAT;;AACH,UAAI,CAAC,KAAK,CAAC,QAAN,CAAe,GAAf,CAAL,EAA0B;AACxB,QAAA,KAAK,CAAC,IAAN,CAAW,GAAX;AACD;AACF;AACF;;AACD,SAAO,KAAP;AACD;;AAED,SAAS,UAAT,CAAoB,WAApB,EAAyC,KAAzC,EAA2D;AACzD,MAAI,IAAI,GAAG,gBAAgB,CAAC,WAAD,EAAc,KAAd,CAA3B;AACA,EAAA,IAAI,GAAG,IAAI,CAAC,MAAL,CAAY,UAAC,CAAD,EAAE;AAAK,WAAA,CAAC,KAAD,WAAA;AAAiB,GAApC,CAAP;AACA,EAAA,IAAI,GAAG,CAAC,WAAD,EAAc,MAAd,CAAqB,IAAI,CAAC,IAAL,EAArB,CAAP;AACA,MAAI,MAAM,GAAG,EAAb;;AACA,OAAkB,IAAA,EAAA,GAAA,CAAA,EAAA,MAAA,GAAA,IAAlB,EAAkB,EAAA,GAAA,MAAA,CAAA,MAAlB,EAAkB,EAAA,EAAlB,EAAwB;AAAnB,QAAM,GAAG,GAAA,MAAA,CAAA,EAAA,CAAT;AACH,IAAA,MAAM,IAAO,GAAG,GAAA,GAAH,GAAO,KAAK,CAAC,GAAD,CAAL,CAAW,GAAX,CAAe,UAAC,EAAD,EAAe;UAAZ,IAAA,GAAA,EAAA,CAAA,I;UAAM,IAAA,GAAA,EAAA,CAAA,I;AAAW,aAAG,IAAI,GAAA,GAAJ,GAAQ,IAAX;AAAiB,KAApD,EAAsD,IAAtD,CAA2D,GAA3D,CAAP,GAAsE,GAAnF;AACD;;AACD,SAAO,MAAP;AACD;;AAED,SAAS,UAAT,CAAoB,WAApB,EAAyC,IAAzC,EAA6D,KAA7D,EAA+E;AAC7E,MAAM,YAAY,GAAG,CAAC,SAAD,CAArB;AACA,MAAM,aAAa,GAAsC,CAAC,QAAQ,CAAC,WAAD,EAAc,KAAd,CAAT,CAAzD;;AACA,OAAoB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,KAAK,CAAC,WAAD,CAAzB,EAAoB,EAAA,GAAA,EAAA,CAAA,MAApB,EAAoB,EAAA,EAApB,EAAwC;AAAnC,QAAM,KAAK,GAAA,EAAA,CAAA,EAAA,CAAX;AACH,QAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAP,CAAlB;;AACA,QAAI,KAAK,CAAC,IAAN,KAAe,QAAf,IAA2B,KAAK,CAAC,IAAN,KAAe,OAA9C,EAAuD;AACrD,UAAM,SAAS,GAAG,iBAAA,CAAA,IAAA,CAAK,KAAL,CAAlB;AACA,MAAA,YAAY,CAAC,IAAb,CAAkB,SAAlB;AACA,MAAA,aAAa,CAAC,IAAd,CAAmB,SAAnB;AACD,KAJD,MAIO,IAAI,KAAK,CAAC,KAAK,CAAC,IAAP,CAAL,KAAsB,SAA1B,EAAqC;AAC1C,MAAA,YAAY,CAAC,IAAb,CAAkB,SAAlB;AACA,UAAM,SAAS,GAAG,iBAAA,CAAA,IAAA,EAChB;AACA,MAAA,UAAU,CAAC,KAAK,CAAC,IAAP,EAAa,KAAb,EAAoC,KAApC,CAFM,CAAlB;AAIA,MAAA,aAAa,CAAC,IAAd,CAAmB,SAAnB;AACD,KAPM,MAOA,IAAI,KAAK,CAAC,IAAN,CAAW,WAAX,CAAuB,GAAvB,MAAgC,KAAK,CAAC,IAAN,CAAW,MAAX,GAAoB,CAAxD,EAA2D;AAChE,YAAM,IAAI,KAAJ,CAAU,8CAAV,CAAN;AACD,KAFM,MAEA;AACL,MAAA,YAAY,CAAC,IAAb,CAAkB,KAAK,CAAC,IAAxB;AACA,UAAM,eAAe,GAAG,cAAc,CAAC,KAAK,CAAC,IAAP,EAAa,KAAb,CAAtC;AACA,MAAA,aAAa,CAAC,IAAd,CAAmB,eAAnB;AACD;AACF,GAvB4E,CAyB7E;;;AACA,SAAO,cAAA,CAAA,OAAA,CAAM,gBAAN,CAAuB,YAAvB,EAAqC,aAArC,CAAP;AACD;;AAED,SAAS,cAAT,CAAwB,IAAxB,EAAsC,KAAtC,EAAgD;AAC9C,MAAM,eAAe,GACnB,IAAI,KAAK,SAAT,IAAsB,cAAA,CAAA,SAAA,CAAU,WAAV,CAAsB,KAAtB,CAAtB,GAAqD,KAAK,CAAC,QAAN,EAArD,GAAwE,KAD1E;AAEA,SAAO,eAAP;AACD;;AAED,SAAS,QAAT,CAAkB,WAAlB,EAAuC,KAAvC,EAAyD;AACvD,SAAO,iBAAA,CAAA,IAAA,CAAK,UAAU,CAAC,WAAD,EAAc,KAAd,CAAf,CAAP;AACD;;AAED,SAAgB,UAAhB,CAA2B,WAA3B,EAAgD,IAAhD,EAAoE,KAApE,EAAsF;AACpF,SAAO,iBAAA,CAAA,IAAA,CAAK,UAAU,CAAC,WAAD,EAAc,IAAd,EAAoB,KAApB,CAAf,CAAP;AACD;;AAFD,OAAA,CAAA,UAAA,GAAA,UAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bignumber_js_1 = require(\"bignumber.js\");\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar web3_eth_abi_1 = __importDefault(require(\"web3-eth-abi\"));\n/**\n * Generates the EIP712 Typed Data hash for signing\n * @param   typedData An object that conforms to the EIP712TypedData interface\n * @return  A Buffer containing the hash of the typed data.\n */\nfunction generateTypedDataHash(typedData) {\n    return ethereumjs_util_1.sha3(Buffer.concat([\n        Buffer.from('1901', 'hex'),\n        structHash('EIP712Domain', typedData.domain, typedData.types),\n        structHash(typedData.primaryType, typedData.message, typedData.types),\n    ]));\n}\nexports.generateTypedDataHash = generateTypedDataHash;\nfunction findDependencies(primaryType, types, found) {\n    if (found === void 0) { found = []; }\n    if (found.includes(primaryType) || types[primaryType] === undefined) {\n        return found;\n    }\n    found.push(primaryType);\n    for (var _i = 0, _a = types[primaryType]; _i < _a.length; _i++) {\n        var field = _a[_i];\n        for (var _b = 0, _c = findDependencies(field.type, types, found); _b < _c.length; _b++) {\n            var dep = _c[_b];\n            if (!found.includes(dep)) {\n                found.push(dep);\n            }\n        }\n    }\n    return found;\n}\nfunction encodeType(primaryType, types) {\n    var deps = findDependencies(primaryType, types);\n    deps = deps.filter(function (d) { return d !== primaryType; });\n    deps = [primaryType].concat(deps.sort());\n    var result = '';\n    for (var _i = 0, deps_1 = deps; _i < deps_1.length; _i++) {\n        var dep = deps_1[_i];\n        result += dep + \"(\" + types[dep].map(function (_a) {\n            var name = _a.name, type = _a.type;\n            return type + \" \" + name;\n        }).join(',') + \")\";\n    }\n    return result;\n}\nfunction encodeData(primaryType, data, types) {\n    var encodedTypes = ['bytes32'];\n    var encodedValues = [typeHash(primaryType, types)];\n    for (var _i = 0, _a = types[primaryType]; _i < _a.length; _i++) {\n        var field = _a[_i];\n        var value = data[field.name];\n        if (field.type === 'string' || field.type === 'bytes') {\n            var hashValue = ethereumjs_util_1.sha3(value);\n            encodedTypes.push('bytes32');\n            encodedValues.push(hashValue);\n        }\n        else if (types[field.type] !== undefined) {\n            encodedTypes.push('bytes32');\n            var hashValue = ethereumjs_util_1.sha3(\n            // tslint:disable-next-line:no-unnecessary-type-assertion\n            encodeData(field.type, value, types));\n            encodedValues.push(hashValue);\n        }\n        else if (field.type.lastIndexOf(']') === field.type.length - 1) {\n            throw new Error('Arrays currently unimplemented in encodeData');\n        }\n        else {\n            encodedTypes.push(field.type);\n            var normalizedValue = normalizeValue(field.type, value);\n            encodedValues.push(normalizedValue);\n        }\n    }\n    // @ts-ignore\n    return web3_eth_abi_1.default.encodeParameters(encodedTypes, encodedValues);\n}\nfunction normalizeValue(type, value) {\n    var normalizedValue = type === 'uint256' && bignumber_js_1.BigNumber.isBigNumber(value) ? value.toString() : value;\n    return normalizedValue;\n}\nfunction typeHash(primaryType, types) {\n    return ethereumjs_util_1.sha3(encodeType(primaryType, types));\n}\nfunction structHash(primaryType, data, types) {\n    return ethereumjs_util_1.sha3(encodeData(primaryType, data, types));\n}\nexports.structHash = structHash;\n//# sourceMappingURL=sign-typed-data-utils.js.map"]},"metadata":{},"sourceType":"script"}