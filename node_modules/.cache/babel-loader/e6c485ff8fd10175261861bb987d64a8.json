{"ast":null,"code":"import { useWeb3React as useWeb3ReactCore } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { isMobile } from 'react-device-detect';\nimport { injected, NETWORK_CHAIN_ID } from '../connectors';\nimport { NetworkContextName } from '../constants';\nexport function useActiveWeb3React() {\n  const context = useWeb3ReactCore();\n  const contextNetwork = useWeb3ReactCore(NetworkContextName);\n  return { ...(context.active ? context : contextNetwork),\n    chainId: NETWORK_CHAIN_ID\n  };\n}\nexport function useEagerConnect() {\n  const {\n    activate,\n    active\n  } = useWeb3ReactCore(); // specifically using useWeb3ReactCore because of what this hook does\n\n  const [tried, setTried] = useState(false);\n  useEffect(() => {\n    injected.isAuthorized().then(isAuthorized => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true);\n        });\n      } else {\n        if (isMobile && window.celo) {\n          activate(injected, undefined, true).catch(() => {\n            setTried(true);\n          });\n        } else {\n          setTried(true);\n        }\n      }\n    });\n  }, [activate]); // intentionally only running on mount (make sure it's only mounted once :))\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n\n  useEffect(() => {\n    if (active) {\n      setTried(true);\n    }\n  }, [active]);\n  return tried;\n}\n/**\n * Use for network and injected - logs user in\n * and out after checking what network theyre on\n */\n\nexport function useInactiveListener(suppress = false) {\n  const {\n    active,\n    error,\n    activate\n  } = useWeb3ReactCore(); // specifically using useWeb3React because of what this hook does\n\n  useEffect(() => {\n    const {\n      celo\n    } = window;\n\n    if (celo && celo.on && !active && !error && !suppress) {\n      const handleChainChanged = () => {\n        // eat errors\n        activate(injected, undefined, true).catch(error => {\n          console.error('Failed to activate after chain changed', error);\n        });\n      };\n\n      const handleAccountsChanged = accounts => {\n        if (accounts.length > 0) {\n          // eat errors\n          activate(injected, undefined, true).catch(error => {\n            console.error('Failed to activate after accounts changed', error);\n          });\n        }\n      };\n\n      celo.on('chainChanged', handleChainChanged);\n      celo.on('accountsChanged', handleAccountsChanged);\n      return () => {\n        if (celo.removeListener) {\n          celo.removeListener('chainChanged', handleChainChanged);\n          celo.removeListener('accountsChanged', handleAccountsChanged);\n        }\n      };\n    }\n\n    return undefined;\n  }, [active, error, suppress, activate]);\n}","map":{"version":3,"sources":["/Users/khoiplus/Desktop/celopad/cpadswaptest/src/hooks/index.ts"],"names":["useWeb3React","useWeb3ReactCore","useEffect","useState","isMobile","injected","NETWORK_CHAIN_ID","NetworkContextName","useActiveWeb3React","context","contextNetwork","active","chainId","useEagerConnect","activate","tried","setTried","isAuthorized","then","undefined","catch","window","celo","useInactiveListener","suppress","error","on","handleChainChanged","console","handleAccountsChanged","accounts","length","removeListener"],"mappings":"AAEA,SAASA,YAAY,IAAIC,gBAAzB,QAAiD,kBAAjD;AAEA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,QAAT,EAAmBC,gBAAnB,QAA2C,eAA3C;AACA,SAASC,kBAAT,QAAmC,cAAnC;AAEA,OAAO,SAASC,kBAAT,GAA8F;AACnG,QAAMC,OAAO,GAAGR,gBAAgB,EAAhC;AACA,QAAMS,cAAc,GAAGT,gBAAgB,CAAeM,kBAAf,CAAvC;AACA,SAAO,EAAE,IAAIE,OAAO,CAACE,MAAR,GAAiBF,OAAjB,GAA2BC,cAA/B,CAAF;AAAkDE,IAAAA,OAAO,EAAEN;AAA3D,GAAP;AACD;AAED,OAAO,SAASO,eAAT,GAA2B;AAChC,QAAM;AAAEC,IAAAA,QAAF;AAAYH,IAAAA;AAAZ,MAAuBV,gBAAgB,EAA7C,CADgC,CACgB;;AAChD,QAAM,CAACc,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,KAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,QAAQ,CAACY,YAAT,GAAwBC,IAAxB,CAA6BD,YAAY,IAAI;AAC3C,UAAIA,YAAJ,EAAkB;AAChBH,QAAAA,QAAQ,CAACT,QAAD,EAAWc,SAAX,EAAsB,IAAtB,CAAR,CAAoCC,KAApC,CAA0C,MAAM;AAC9CJ,UAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,SAFD;AAGD,OAJD,MAIO;AACL,YAAIZ,QAAQ,IAAIiB,MAAM,CAACC,IAAvB,EAA6B;AAC3BR,UAAAA,QAAQ,CAACT,QAAD,EAAWc,SAAX,EAAsB,IAAtB,CAAR,CAAoCC,KAApC,CAA0C,MAAM;AAC9CJ,YAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,WAFD;AAGD,SAJD,MAIO;AACLA,UAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;AACF;AACF,KAdD;AAeD,GAhBQ,EAgBN,CAACF,QAAD,CAhBM,CAAT,CAJgC,CAoBjB;AAEf;;AACAZ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,MAAJ,EAAY;AACVK,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;AACF,GAJQ,EAIN,CAACL,MAAD,CAJM,CAAT;AAMA,SAAOI,KAAP;AACD;AAED;;;;;AAIA,OAAO,SAASQ,mBAAT,CAA6BC,QAAQ,GAAG,KAAxC,EAA+C;AACpD,QAAM;AAAEb,IAAAA,MAAF;AAAUc,IAAAA,KAAV;AAAiBX,IAAAA;AAAjB,MAA8Bb,gBAAgB,EAApD,CADoD,CACG;;AAEvDC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM;AAAEoB,MAAAA;AAAF,QAAWD,MAAjB;;AAEA,QAAIC,IAAI,IAAIA,IAAI,CAACI,EAAb,IAAmB,CAACf,MAApB,IAA8B,CAACc,KAA/B,IAAwC,CAACD,QAA7C,EAAuD;AACrD,YAAMG,kBAAkB,GAAG,MAAM;AAC/B;AACAb,QAAAA,QAAQ,CAACT,QAAD,EAAWc,SAAX,EAAsB,IAAtB,CAAR,CAAoCC,KAApC,CAA0CK,KAAK,IAAI;AACjDG,UAAAA,OAAO,CAACH,KAAR,CAAc,wCAAd,EAAwDA,KAAxD;AACD,SAFD;AAGD,OALD;;AAOA,YAAMI,qBAAqB,GAAIC,QAAD,IAAwB;AACpD,YAAIA,QAAQ,CAACC,MAAT,GAAkB,CAAtB,EAAyB;AACvB;AACAjB,UAAAA,QAAQ,CAACT,QAAD,EAAWc,SAAX,EAAsB,IAAtB,CAAR,CAAoCC,KAApC,CAA0CK,KAAK,IAAI;AACjDG,YAAAA,OAAO,CAACH,KAAR,CAAc,2CAAd,EAA2DA,KAA3D;AACD,WAFD;AAGD;AACF,OAPD;;AASAH,MAAAA,IAAI,CAACI,EAAL,CAAQ,cAAR,EAAwBC,kBAAxB;AACAL,MAAAA,IAAI,CAACI,EAAL,CAAQ,iBAAR,EAA2BG,qBAA3B;AAEA,aAAO,MAAM;AACX,YAAIP,IAAI,CAACU,cAAT,EAAyB;AACvBV,UAAAA,IAAI,CAACU,cAAL,CAAoB,cAApB,EAAoCL,kBAApC;AACAL,UAAAA,IAAI,CAACU,cAAL,CAAoB,iBAApB,EAAuCH,qBAAvC;AACD;AACF,OALD;AAMD;;AACD,WAAOV,SAAP;AACD,GA/BQ,EA+BN,CAACR,MAAD,EAASc,KAAT,EAAgBD,QAAhB,EAA0BV,QAA1B,CA/BM,CAAT;AAgCD","sourcesContent":["import { Web3Provider } from '@ethersproject/providers'\nimport { ChainId } from '@ubeswap/sdk'\nimport { useWeb3React as useWeb3ReactCore } from '@web3-react/core'\nimport { Web3ReactContextInterface } from '@web3-react/core/dist/types'\nimport { useEffect, useState } from 'react'\nimport { isMobile } from 'react-device-detect'\nimport { injected, NETWORK_CHAIN_ID } from '../connectors'\nimport { NetworkContextName } from '../constants'\n\nexport function useActiveWeb3React(): Web3ReactContextInterface<Web3Provider> & { chainId: ChainId } {\n  const context = useWeb3ReactCore<Web3Provider>()\n  const contextNetwork = useWeb3ReactCore<Web3Provider>(NetworkContextName)\n  return { ...(context.active ? context : contextNetwork), chainId: NETWORK_CHAIN_ID }\n}\n\nexport function useEagerConnect() {\n  const { activate, active } = useWeb3ReactCore() // specifically using useWeb3ReactCore because of what this hook does\n  const [tried, setTried] = useState(false)\n\n  useEffect(() => {\n    injected.isAuthorized().then(isAuthorized => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true)\n        })\n      } else {\n        if (isMobile && window.celo) {\n          activate(injected, undefined, true).catch(() => {\n            setTried(true)\n          })\n        } else {\n          setTried(true)\n        }\n      }\n    })\n  }, [activate]) // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (active) {\n      setTried(true)\n    }\n  }, [active])\n\n  return tried\n}\n\n/**\n * Use for network and injected - logs user in\n * and out after checking what network theyre on\n */\nexport function useInactiveListener(suppress = false) {\n  const { active, error, activate } = useWeb3ReactCore() // specifically using useWeb3React because of what this hook does\n\n  useEffect(() => {\n    const { celo } = window\n\n    if (celo && celo.on && !active && !error && !suppress) {\n      const handleChainChanged = () => {\n        // eat errors\n        activate(injected, undefined, true).catch(error => {\n          console.error('Failed to activate after chain changed', error)\n        })\n      }\n\n      const handleAccountsChanged = (accounts: string[]) => {\n        if (accounts.length > 0) {\n          // eat errors\n          activate(injected, undefined, true).catch(error => {\n            console.error('Failed to activate after accounts changed', error)\n          })\n        }\n      }\n\n      celo.on('chainChanged', handleChainChanged)\n      celo.on('accountsChanged', handleAccountsChanged)\n\n      return () => {\n        if (celo.removeListener) {\n          celo.removeListener('chainChanged', handleChainChanged)\n          celo.removeListener('accountsChanged', handleAccountsChanged)\n        }\n      }\n    }\n    return undefined\n  }, [active, error, suppress, activate])\n}\n"]},"metadata":{},"sourceType":"module"}