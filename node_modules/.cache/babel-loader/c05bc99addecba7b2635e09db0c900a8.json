{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar address_1 = require(\"@celo/base/lib/address\");\n\nexports.getAbiTypes = function (abi, methodName) {\n  return abi.find(function (entry) {\n    return entry.name === methodName;\n  }).inputs.map(function (input) {\n    return input.type;\n  });\n};\n\nexports.parseDecodedParams = function (params) {\n  var args = new Array(params.__length__);\n  delete params.__length__;\n  Object.keys(params).forEach(function (key) {\n    var argIndex = parseInt(key, 10);\n\n    if (argIndex >= 0) {\n      args[argIndex] = params[key];\n      delete params[key];\n    }\n  });\n  return {\n    args: args,\n    params: params\n  };\n};\n\nexports.decodeStringParameter = function (ethAbi, str) {\n  return ethAbi.decodeParameter('string', address_1.ensureLeading0x(str));\n};","map":{"version":3,"sources":["../../src/utils/abi-utils.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,SAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AAGa,OAAA,CAAA,WAAA,GAAc,UAAC,GAAD,EAAiB,UAAjB,EAAmC;AAC5D,SAAA,GAAG,CAAC,IAAJ,CAAS,UAAC,KAAD,EAAM;AAAK,WAAA,KAAK,CAAC,IAAN,KAAA,UAAA;AAA0B,GAA9C,EAAiD,MAAjD,CAAyD,GAAzD,CAA6D,UAAC,KAAD,EAAM;AAAK,WAAA,KAAK,CAAL,IAAA;AAAU,GAAlF,CAAA;AAAmF,CADxE;;AAGA,OAAA,CAAA,kBAAA,GAAqB,UAAC,MAAD,EAA4B;AAC5D,MAAM,IAAI,GAAG,IAAI,KAAJ,CAAU,MAAM,CAAC,UAAjB,CAAb;AACA,SAAO,MAAM,CAAC,UAAd;AACA,EAAA,MAAM,CAAC,IAAP,CAAY,MAAZ,EAAoB,OAApB,CAA4B,UAAC,GAAD,EAAI;AAC9B,QAAM,QAAQ,GAAG,QAAQ,CAAC,GAAD,EAAM,EAAN,CAAzB;;AACA,QAAI,QAAQ,IAAI,CAAhB,EAAmB;AACjB,MAAA,IAAI,CAAC,QAAD,CAAJ,GAAiB,MAAM,CAAC,GAAD,CAAvB;AACA,aAAO,MAAM,CAAC,GAAD,CAAb;AACD;AACF,GAND;AAOA,SAAO;AAAE,IAAA,IAAI,EAAA,IAAN;AAAQ,IAAA,MAAM,EAAA;AAAd,GAAP;AACD,CAXY;;AAaA,OAAA,CAAA,qBAAA,GAAwB,UAAC,MAAD,EAAmB,GAAnB,EAA8B;AACjE,SAAA,MAAM,CAAC,eAAP,CAAuB,QAAvB,EAAiC,SAAA,CAAA,eAAA,CAAgB,GAAhB,CAAjC,CAAA;AAAsD,CAD3C","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar address_1 = require(\"@celo/base/lib/address\");\nexports.getAbiTypes = function (abi, methodName) {\n    return abi.find(function (entry) { return entry.name === methodName; }).inputs.map(function (input) { return input.type; });\n};\nexports.parseDecodedParams = function (params) {\n    var args = new Array(params.__length__);\n    delete params.__length__;\n    Object.keys(params).forEach(function (key) {\n        var argIndex = parseInt(key, 10);\n        if (argIndex >= 0) {\n            args[argIndex] = params[key];\n            delete params[key];\n        }\n    });\n    return { args: args, params: params };\n};\nexports.decodeStringParameter = function (ethAbi, str) {\n    return ethAbi.decodeParameter('string', address_1.ensureLeading0x(str));\n};\n//# sourceMappingURL=abi-utils.js.map"]},"metadata":{},"sourceType":"script"}