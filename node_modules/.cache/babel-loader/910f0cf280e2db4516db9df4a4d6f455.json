{"ast":null,"code":"import { Interface } from '@ethersproject/abi';\nimport { Pair, TokenAmount } from '@ubeswap/sdk';\nimport { abi as IUniswapV2PairABI } from '@uniswap/v2-core/build/IUniswapV2Pair.json';\nimport { useMemo } from 'react';\nimport { useMultipleContractSingleData } from '../state/multicall/hooks';\nconst PAIR_INTERFACE = new Interface(IUniswapV2PairABI);\nexport let PairState;\n\n(function (PairState) {\n  PairState[PairState[\"LOADING\"] = 0] = \"LOADING\";\n  PairState[PairState[\"NOT_EXISTS\"] = 1] = \"NOT_EXISTS\";\n  PairState[PairState[\"EXISTS\"] = 2] = \"EXISTS\";\n  PairState[PairState[\"INVALID\"] = 3] = \"INVALID\";\n})(PairState || (PairState = {}));\n\nexport function usePairs(currencies) {\n  const tokens = currencies;\n  const pairAddresses = useMemo(() => tokens.map(([tokenA, tokenB]) => {\n    return tokenA && tokenB && !tokenA.equals(tokenB) ? Pair.getAddress(tokenA, tokenB) : undefined;\n  }), [tokens]);\n  const results = useMultipleContractSingleData(pairAddresses, PAIR_INTERFACE, 'getReserves');\n  return useMemo(() => {\n    return results.map((result, i) => {\n      const {\n        result: reserves,\n        loading\n      } = result;\n      const tokenA = tokens[i][0];\n      const tokenB = tokens[i][1];\n      if (loading) return [PairState.LOADING, null];\n      if (!tokenA || !tokenB || tokenA.equals(tokenB)) return [PairState.INVALID, null];\n      if (!reserves) return [PairState.NOT_EXISTS, null];\n      const {\n        reserve0,\n        reserve1\n      } = reserves;\n      const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA];\n      return [PairState.EXISTS, new Pair(new TokenAmount(token0, reserve0.toString()), new TokenAmount(token1, reserve1.toString()))];\n    });\n  }, [results, tokens]);\n}\nexport function usePair(tokenA, tokenB) {\n  return usePairs([[tokenA, tokenB]])[0];\n}","map":{"version":3,"sources":["/Users/khoiplus/Desktop/celopad/cpadswaptest/src/data/Reserves.ts"],"names":["Interface","Pair","TokenAmount","abi","IUniswapV2PairABI","useMemo","useMultipleContractSingleData","PAIR_INTERFACE","PairState","usePairs","currencies","tokens","pairAddresses","map","tokenA","tokenB","equals","getAddress","undefined","results","result","i","reserves","loading","LOADING","INVALID","NOT_EXISTS","reserve0","reserve1","token0","token1","sortsBefore","EXISTS","toString","usePair"],"mappings":"AAAA,SAASA,SAAT,QAA0B,oBAA1B;AACA,SAASC,IAAT,EAAsBC,WAAtB,QAAyC,cAAzC;AACA,SAASC,GAAG,IAAIC,iBAAhB,QAAyC,4CAAzC;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,6BAAT,QAA8C,0BAA9C;AAEA,MAAMC,cAAc,GAAG,IAAIP,SAAJ,CAAcI,iBAAd,CAAvB;AAEA,WAAYI,SAAZ;;WAAYA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;GAAAA,S,KAAAA,S;;AAOZ,OAAO,SAASC,QAAT,CAAkBC,UAAlB,EAAoG;AACzG,QAAMC,MAAM,GAAGD,UAAf;AAEA,QAAME,aAAa,GAAGP,OAAO,CAC3B,MACEM,MAAM,CAACE,GAAP,CAAW,CAAC,CAACC,MAAD,EAASC,MAAT,CAAD,KAAsB;AAC/B,WAAOD,MAAM,IAAIC,MAAV,IAAoB,CAACD,MAAM,CAACE,MAAP,CAAcD,MAAd,CAArB,GAA6Cd,IAAI,CAACgB,UAAL,CAAgBH,MAAhB,EAAwBC,MAAxB,CAA7C,GAA+EG,SAAtF;AACD,GAFD,CAFyB,EAK3B,CAACP,MAAD,CAL2B,CAA7B;AAQA,QAAMQ,OAAO,GAAGb,6BAA6B,CAACM,aAAD,EAAgBL,cAAhB,EAAgC,aAAhC,CAA7C;AAEA,SAAOF,OAAO,CAAC,MAAM;AACnB,WAAOc,OAAO,CAACN,GAAR,CAAY,CAACO,MAAD,EAASC,CAAT,KAAe;AAChC,YAAM;AAAED,QAAAA,MAAM,EAAEE,QAAV;AAAoBC,QAAAA;AAApB,UAAgCH,MAAtC;AACA,YAAMN,MAAM,GAAGH,MAAM,CAACU,CAAD,CAAN,CAAU,CAAV,CAAf;AACA,YAAMN,MAAM,GAAGJ,MAAM,CAACU,CAAD,CAAN,CAAU,CAAV,CAAf;AAEA,UAAIE,OAAJ,EAAa,OAAO,CAACf,SAAS,CAACgB,OAAX,EAAoB,IAApB,CAAP;AACb,UAAI,CAACV,MAAD,IAAW,CAACC,MAAZ,IAAsBD,MAAM,CAACE,MAAP,CAAcD,MAAd,CAA1B,EAAiD,OAAO,CAACP,SAAS,CAACiB,OAAX,EAAoB,IAApB,CAAP;AACjD,UAAI,CAACH,QAAL,EAAe,OAAO,CAACd,SAAS,CAACkB,UAAX,EAAuB,IAAvB,CAAP;AACf,YAAM;AAAEC,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,UAAyBN,QAA/B;AACA,YAAM,CAACO,MAAD,EAASC,MAAT,IAAmBhB,MAAM,CAACiB,WAAP,CAAmBhB,MAAnB,IAA6B,CAACD,MAAD,EAASC,MAAT,CAA7B,GAAgD,CAACA,MAAD,EAASD,MAAT,CAAzE;AACA,aAAO,CACLN,SAAS,CAACwB,MADL,EAEL,IAAI/B,IAAJ,CAAS,IAAIC,WAAJ,CAAgB2B,MAAhB,EAAwBF,QAAQ,CAACM,QAAT,EAAxB,CAAT,EAAuD,IAAI/B,WAAJ,CAAgB4B,MAAhB,EAAwBF,QAAQ,CAACK,QAAT,EAAxB,CAAvD,CAFK,CAAP;AAID,KAdM,CAAP;AAeD,GAhBa,EAgBX,CAACd,OAAD,EAAUR,MAAV,CAhBW,CAAd;AAiBD;AAED,OAAO,SAASuB,OAAT,CAAiBpB,MAAjB,EAAiCC,MAAjC,EAA2E;AAChF,SAAON,QAAQ,CAAC,CAAC,CAACK,MAAD,EAASC,MAAT,CAAD,CAAD,CAAR,CAA6B,CAA7B,CAAP;AACD","sourcesContent":["import { Interface } from '@ethersproject/abi'\nimport { Pair, Token, TokenAmount } from '@ubeswap/sdk'\nimport { abi as IUniswapV2PairABI } from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport { useMemo } from 'react'\nimport { useMultipleContractSingleData } from '../state/multicall/hooks'\n\nconst PAIR_INTERFACE = new Interface(IUniswapV2PairABI)\n\nexport enum PairState {\n  LOADING,\n  NOT_EXISTS,\n  EXISTS,\n  INVALID\n}\n\nexport function usePairs(currencies: [Token | undefined, Token | undefined][]): [PairState, Pair | null][] {\n  const tokens = currencies\n\n  const pairAddresses = useMemo(\n    () =>\n      tokens.map(([tokenA, tokenB]) => {\n        return tokenA && tokenB && !tokenA.equals(tokenB) ? Pair.getAddress(tokenA, tokenB) : undefined\n      }),\n    [tokens]\n  )\n\n  const results = useMultipleContractSingleData(pairAddresses, PAIR_INTERFACE, 'getReserves')\n\n  return useMemo(() => {\n    return results.map((result, i) => {\n      const { result: reserves, loading } = result\n      const tokenA = tokens[i][0]\n      const tokenB = tokens[i][1]\n\n      if (loading) return [PairState.LOADING, null]\n      if (!tokenA || !tokenB || tokenA.equals(tokenB)) return [PairState.INVALID, null]\n      if (!reserves) return [PairState.NOT_EXISTS, null]\n      const { reserve0, reserve1 } = reserves\n      const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA]\n      return [\n        PairState.EXISTS,\n        new Pair(new TokenAmount(token0, reserve0.toString()), new TokenAmount(token1, reserve1.toString()))\n      ]\n    })\n  }, [results, tokens])\n}\n\nexport function usePair(tokenA?: Token, tokenB?: Token): [PairState, Pair | null] {\n  return usePairs([[tokenA, tokenB]])[0]\n}\n"]},"metadata":{},"sourceType":"module"}