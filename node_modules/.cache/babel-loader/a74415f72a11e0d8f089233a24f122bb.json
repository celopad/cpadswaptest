{"ast":null,"code":"import { DappKitRequestTypes, DappKitResponseStatus } from '@celo/utils';\nimport { NetworkConnector } from 'connectors/NetworkConnector';\nimport { ValoraProvider } from './ValoraProvider';\nimport { parseDappkitResponse } from './valoraUtils';\nexport class ValoraConnector extends NetworkConnector {\n  constructor(...args) {\n    super(...args);\n    this.account = null;\n    this.valoraAccount = null;\n    this.mainProvider = null;\n  }\n\n  setSavedValoraAccount(acc) {\n    this.valoraAccount = acc;\n  }\n\n  async activate() {\n    if (this.valoraAccount) {\n      this.account = this.valoraAccount.address;\n      this.mainProvider = new ValoraProvider(this.currentChainId);\n      return {\n        provider: this.mainProvider,\n        chainId: this.currentChainId,\n        account: this.valoraAccount.address\n      };\n    }\n\n    const data = parseDappkitResponse(window.location.href);\n\n    if (!data) {\n      throw new Error('Dappkit response not found');\n    }\n\n    if (data.type === DappKitRequestTypes.ACCOUNT_ADDRESS) {\n      if (data.status === DappKitResponseStatus.SUCCESS) {\n        this.account = data.address;\n        this.mainProvider = new ValoraProvider(this.currentChainId);\n        return {\n          provider: this.mainProvider,\n          chainId: this.currentChainId,\n          account: this.account\n        };\n      }\n    }\n\n    throw new Error('Could not activate');\n  }\n\n  get provider() {\n    return this.mainProvider;\n  }\n\n  async getAccount() {\n    return this.account;\n  }\n\n  async getProvider() {\n    return this.mainProvider;\n  }\n\n  async close() {\n    this.valoraAccount = null;\n    this.emitDeactivate();\n  }\n\n}","map":{"version":3,"sources":["/Users/khoiplus/Desktop/celopad/cpadswaptest/src/connectors/valora/ValoraConnector.ts"],"names":["DappKitRequestTypes","DappKitResponseStatus","NetworkConnector","ValoraProvider","parseDappkitResponse","ValoraConnector","account","valoraAccount","mainProvider","setSavedValoraAccount","acc","activate","address","currentChainId","provider","chainId","data","window","location","href","Error","type","ACCOUNT_ADDRESS","status","SUCCESS","getAccount","getProvider","close","emitDeactivate"],"mappings":"AAAA,SAASA,mBAAT,EAA8BC,qBAA9B,QAA2D,aAA3D;AAEA,SAA0BC,gBAA1B,QAAkD,6BAAlD;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAAyBC,oBAAzB,QAAqD,eAArD;AAEA,OAAO,MAAMC,eAAN,SAA8BH,gBAA9B,CAA+C;AAAA;AAAA;AAAA,SAC5CI,OAD4C,GACnB,IADmB;AAAA,SAE7CC,aAF6C,GAEN,IAFM;AAAA,SAI5CC,YAJ4C,GAIL,IAJK;AAAA;;AAMpDC,EAAAA,qBAAqB,CAACC,GAAD,EAA6B;AAChD,SAAKH,aAAL,GAAqBG,GAArB;AACD;;AAED,QAAaC,QAAb,GAAkD;AAChD,QAAI,KAAKJ,aAAT,EAAwB;AACtB,WAAKD,OAAL,GAAe,KAAKC,aAAL,CAAmBK,OAAlC;AACA,WAAKJ,YAAL,GAAoB,IAAIL,cAAJ,CAAmB,KAAKU,cAAxB,CAApB;AACA,aAAO;AACLC,QAAAA,QAAQ,EAAE,KAAKN,YADV;AAELO,QAAAA,OAAO,EAAE,KAAKF,cAFT;AAGLP,QAAAA,OAAO,EAAE,KAAKC,aAAL,CAAmBK;AAHvB,OAAP;AAKD;;AAED,UAAMI,IAAI,GAAGZ,oBAAoB,CAACa,MAAM,CAACC,QAAP,CAAgBC,IAAjB,CAAjC;;AACA,QAAI,CAACH,IAAL,EAAW;AACT,YAAM,IAAII,KAAJ,CAAU,4BAAV,CAAN;AACD;;AACD,QAAIJ,IAAI,CAACK,IAAL,KAAcrB,mBAAmB,CAACsB,eAAtC,EAAuD;AACrD,UAAIN,IAAI,CAACO,MAAL,KAAgBtB,qBAAqB,CAACuB,OAA1C,EAAmD;AACjD,aAAKlB,OAAL,GAAeU,IAAI,CAACJ,OAApB;AACA,aAAKJ,YAAL,GAAoB,IAAIL,cAAJ,CAAmB,KAAKU,cAAxB,CAApB;AACA,eAAO;AACLC,UAAAA,QAAQ,EAAE,KAAKN,YADV;AAELO,UAAAA,OAAO,EAAE,KAAKF,cAFT;AAGLP,UAAAA,OAAO,EAAE,KAAKA;AAHT,SAAP;AAKD;AACF;;AACD,UAAM,IAAIc,KAAJ,CAAU,oBAAV,CAAN;AACD;;AAED,MAAWN,QAAX,GAA8C;AAC5C,WAAO,KAAKN,YAAZ;AACD;;AAED,QAAMiB,UAAN,GAA2C;AACzC,WAAO,KAAKnB,OAAZ;AACD;;AAED,QAAaoB,WAAb,GAA4D;AAC1D,WAAO,KAAKlB,YAAZ;AACD;;AAED,QAAMmB,KAAN,GAAc;AACZ,SAAKpB,aAAL,GAAqB,IAArB;AACA,SAAKqB,cAAL;AACD;;AAtDmD","sourcesContent":["import { DappKitRequestTypes, DappKitResponseStatus } from '@celo/utils'\nimport { ConnectorUpdate } from '@web3-react/types'\nimport { MiniRpcProvider, NetworkConnector } from 'connectors/NetworkConnector'\nimport { ValoraProvider } from './ValoraProvider'\nimport { IValoraAccount, parseDappkitResponse } from './valoraUtils'\n\nexport class ValoraConnector extends NetworkConnector {\n  private account: string | null = null\n  public valoraAccount: IValoraAccount | null = null\n\n  private mainProvider: MiniRpcProvider | null = null\n\n  setSavedValoraAccount(acc: IValoraAccount | null) {\n    this.valoraAccount = acc\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (this.valoraAccount) {\n      this.account = this.valoraAccount.address\n      this.mainProvider = new ValoraProvider(this.currentChainId)\n      return {\n        provider: this.mainProvider,\n        chainId: this.currentChainId,\n        account: this.valoraAccount.address\n      }\n    }\n\n    const data = parseDappkitResponse(window.location.href)\n    if (!data) {\n      throw new Error('Dappkit response not found')\n    }\n    if (data.type === DappKitRequestTypes.ACCOUNT_ADDRESS) {\n      if (data.status === DappKitResponseStatus.SUCCESS) {\n        this.account = data.address\n        this.mainProvider = new ValoraProvider(this.currentChainId)\n        return {\n          provider: this.mainProvider,\n          chainId: this.currentChainId,\n          account: this.account\n        }\n      }\n    }\n    throw new Error('Could not activate')\n  }\n\n  public get provider(): MiniRpcProvider | null {\n    return this.mainProvider\n  }\n\n  async getAccount(): Promise<string | null> {\n    return this.account\n  }\n\n  public async getProvider(): Promise<MiniRpcProvider | null> {\n    return this.mainProvider\n  }\n\n  async close() {\n    this.valoraAccount = null\n    this.emitDeactivate()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}