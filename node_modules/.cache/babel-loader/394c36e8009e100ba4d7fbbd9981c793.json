{"ast":null,"code":"import { AccountAuthRequest, DappKitResponseStatus, parseDappkitResponseDeeplink, serializeDappKitRequestDeeplink, SignTxRequest } from '@celo/utils';\nimport { identity, mapValues } from 'lodash';\nimport * as querystring from 'querystring';\nimport { parse } from 'url'; // Gets the url redirected from Valora that is used to update the page\n\nasync function waitForValoraResponse() {\n  const localStorageKey = 'valoraRedirect';\n\n  while (true) {\n    const value = localStorage.getItem(localStorageKey);\n\n    if (value) {\n      localStorage.removeItem(localStorageKey);\n      return value;\n    }\n\n    await new Promise(resolve => setTimeout(resolve, 100));\n  }\n}\n/**\n * Parses the response from Dappkit.\n * @param url\n */\n\n\nexport const parseDappkitResponse = url => {\n  const whereQuery = url.indexOf('?');\n\n  if (whereQuery === -1) {\n    return null;\n  }\n\n  const searchNonDeduped = url.slice(whereQuery + 1);\n  const allSearch = searchNonDeduped.split('?');\n  const newQs = allSearch.filter(identity).reduce((acc, qs) => ({ ...acc,\n    ...querystring.parse(qs)\n  }), {});\n  const realQs = querystring.stringify(newQs);\n  const {\n    protocol,\n    host\n  } = parse(url);\n  const result = parseDappkitResponseDeeplink(`${protocol}//${host}/?${realQs}`);\n\n  if (!result.requestId) {\n    return null;\n  }\n\n  return result;\n};\nexport const awaitDappkitResponse = async () => {\n  return await new Promise((resolve, reject) => {\n    const timer = setInterval(() => {\n      console.log('awaiting');\n      const url = window.location.href;\n\n      try {\n        const response = parseDappkitResponse(url);\n\n        if (!response) {\n          return;\n        }\n\n        if (response.status === DappKitResponseStatus.UNAUTHORIZED) {\n          reject(new Error('Unauthorized'));\n        } else {\n          resolve(response);\n        }\n\n        clearInterval(timer);\n      } catch (e) {}\n    }, 200);\n  });\n};\nexport const removeQueryParams = (url, keys) => {\n  const whereQuery = url.indexOf('?');\n\n  if (whereQuery === -1) {\n    return url;\n  }\n\n  const searchNonDeduped = url.slice(whereQuery + 1);\n  const allSearch = searchNonDeduped.split('?');\n  const newQs = allSearch.reduce((acc, qs) => ({ ...acc,\n    ...mapValues(querystring.parse(qs), v => {\n      var _v$toString;\n\n      return (_v$toString = v === null || v === void 0 ? void 0 : v.toString()) !== null && _v$toString !== void 0 ? _v$toString : null;\n    })\n  }), {});\n  keys.forEach(key => {\n    delete newQs[key];\n  });\n  const {\n    protocol,\n    host,\n    hash\n  } = parse(url);\n  const queryParams = `${querystring.stringify(newQs)}`;\n  const resultUrl = `${protocol}//${host}/${hash === null || hash === void 0 ? void 0 : hash.slice(0, hash.indexOf('?'))}`;\n\n  if (queryParams) {\n    return `${resultUrl}?${queryParams}`;\n  }\n\n  return resultUrl;\n};\n\nconst cleanCallbackUrl = url => {\n  return removeQueryParams(url, []);\n};\n/**\n * Requests auth from the Valora app.\n */\n\n\nexport const requestValoraAuth = async () => {\n  const requestId = 'login';\n  const dappName = 'Ubeswap';\n  const callback = cleanCallbackUrl(window.location.href);\n  window.location.href = serializeDappKitRequestDeeplink(AccountAuthRequest({\n    requestId,\n    dappName,\n    callback\n  }));\n  window.location.href = await waitForValoraResponse();\n  return await awaitDappkitResponse();\n};\n/**\n * Requests auth from the Valora app.\n */\n\nexport const requestValoraTransaction = async txs => {\n  const requestId = 'make-transaction';\n  const dappName = 'Ubeswap';\n  const callback = cleanCallbackUrl(window.location.href);\n  window.location.href = serializeDappKitRequestDeeplink(SignTxRequest(txs, {\n    requestId,\n    dappName,\n    callback\n  }));\n  window.location.href = await waitForValoraResponse();\n  return await awaitDappkitResponse();\n};","map":{"version":3,"sources":["/Users/khoiplus/Desktop/celopad/cpadswaptest/src/connectors/valora/valoraUtils.ts"],"names":["AccountAuthRequest","DappKitResponseStatus","parseDappkitResponseDeeplink","serializeDappKitRequestDeeplink","SignTxRequest","identity","mapValues","querystring","parse","waitForValoraResponse","localStorageKey","value","localStorage","getItem","removeItem","Promise","resolve","setTimeout","parseDappkitResponse","url","whereQuery","indexOf","searchNonDeduped","slice","allSearch","split","newQs","filter","reduce","acc","qs","realQs","stringify","protocol","host","result","requestId","awaitDappkitResponse","reject","timer","setInterval","console","log","window","location","href","response","status","UNAUTHORIZED","Error","clearInterval","e","removeQueryParams","keys","v","toString","forEach","key","hash","queryParams","resultUrl","cleanCallbackUrl","requestValoraAuth","dappName","callback","requestValoraTransaction","txs"],"mappings":"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","sourcesContent":["import {\n  AccountAuthRequest,\n  AccountAuthResponseSuccess,\n  DappKitResponse,\n  DappKitResponseStatus,\n  parseDappkitResponseDeeplink,\n  serializeDappKitRequestDeeplink,\n  SignTxRequest,\n  SignTxResponseSuccess,\n  TxToSignParam\n} from '@celo/utils'\nimport { identity, mapValues } from 'lodash'\nimport * as querystring from 'querystring'\nimport { parse } from 'url'\n\n// Gets the url redirected from Valora that is used to update the page\nasync function waitForValoraResponse() {\n  const localStorageKey = 'valoraRedirect'\n  while (true) {\n    const value = localStorage.getItem(localStorageKey)\n    if (value) {\n      localStorage.removeItem(localStorageKey)\n      return value\n    }\n    await new Promise(resolve => setTimeout(resolve, 100))\n  }\n}\n\n/**\n * Parses the response from Dappkit.\n * @param url\n */\nexport const parseDappkitResponse = (\n  url: string\n):\n  | (DappKitResponse & {\n      requestId: string\n    })\n  | null => {\n  const whereQuery = url.indexOf('?')\n  if (whereQuery === -1) {\n    return null\n  }\n  const searchNonDeduped = url.slice(whereQuery + 1)\n  const allSearch = searchNonDeduped.split('?')\n  const newQs = allSearch.filter(identity).reduce((acc, qs) => ({ ...acc, ...querystring.parse(qs) }), {})\n  const realQs = querystring.stringify(newQs)\n  const { protocol, host } = parse(url)\n  const result = parseDappkitResponseDeeplink(`${protocol}//${host}/?${realQs}`)\n  if (!result.requestId) {\n    return null\n  }\n  return result\n}\n\nexport const awaitDappkitResponse = async <T extends DappKitResponse>(): Promise<T> => {\n  return await new Promise((resolve, reject) => {\n    const timer = setInterval(() => {\n      console.log('awaiting')\n      const url = window.location.href\n      try {\n        const response = parseDappkitResponse(url)\n        if (!response) {\n          return\n        }\n        if (response.status === DappKitResponseStatus.UNAUTHORIZED) {\n          reject(new Error('Unauthorized'))\n        } else {\n          resolve((response as unknown) as T)\n        }\n        clearInterval(timer)\n      } catch (e) {}\n    }, 200)\n  })\n}\n\nexport const removeQueryParams = (url: string, keys: string[]): string => {\n  const whereQuery = url.indexOf('?')\n  if (whereQuery === -1) {\n    return url\n  }\n  const searchNonDeduped = url.slice(whereQuery + 1)\n  const allSearch = searchNonDeduped.split('?')\n  const newQs: Record<string, string> = allSearch.reduce(\n    (acc, qs) => ({ ...acc, ...mapValues(querystring.parse(qs), v => v?.toString() ?? null) }),\n    {}\n  )\n  keys.forEach(key => {\n    delete newQs[key]\n  })\n  const { protocol, host, hash } = parse(url)\n  const queryParams = `${querystring.stringify(newQs)}`\n  const resultUrl = `${protocol}//${host}/${hash?.slice(0, hash.indexOf('?'))}`\n  if (queryParams) {\n    return `${resultUrl}?${queryParams}`\n  }\n  return resultUrl\n}\n\nconst cleanCallbackUrl = (url: string): string => {\n  return removeQueryParams(url, [])\n}\n\n/**\n * Requests auth from the Valora app.\n */\nexport const requestValoraAuth = async (): Promise<AccountAuthResponseSuccess> => {\n  const requestId = 'login'\n  const dappName = 'Ubeswap'\n  const callback = cleanCallbackUrl(window.location.href)\n  window.location.href = serializeDappKitRequestDeeplink(\n    AccountAuthRequest({\n      requestId,\n      dappName,\n      callback\n    })\n  )\n  window.location.href = await waitForValoraResponse()\n  return await awaitDappkitResponse<AccountAuthResponseSuccess>()\n}\n\n/**\n * Requests auth from the Valora app.\n */\nexport const requestValoraTransaction = async (txs: TxToSignParam[]): Promise<SignTxResponseSuccess> => {\n  const requestId = 'make-transaction'\n  const dappName = 'Ubeswap'\n  const callback = cleanCallbackUrl(window.location.href)\n  window.location.href = serializeDappKitRequestDeeplink(\n    SignTxRequest(txs, {\n      requestId,\n      dappName,\n      callback\n    })\n  )\n  window.location.href = await waitForValoraResponse()\n  return await awaitDappkitResponse<SignTxResponseSuccess>()\n}\n\nexport type IValoraAccount = Pick<AccountAuthResponseSuccess, 'address' | 'phoneNumber'>\n"]},"metadata":{},"sourceType":"module"}