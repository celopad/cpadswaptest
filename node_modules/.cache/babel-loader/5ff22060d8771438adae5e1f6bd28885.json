{"ast":null,"code":"import { createReducer } from '@reduxjs/toolkit';\nimport { DEFAULT_DEADLINE_FROM_NOW, INITIAL_ALLOWED_SLIPPAGE } from '../../constants';\nimport { updateVersion } from '../global/actions';\nimport { addSerializedPair, addSerializedToken, clearValoraAccount, removeSerializedPair, removeSerializedToken, setValoraAccount, toggleURLWarning, updateMatchesDarkMode, updateUserDarkMode, updateUserDeadline, updateUserExpertMode, updateUserSingleHopOnly, updateUserSlippageTolerance } from './actions';\n\nconst currentTimestamp = () => new Date().getTime();\n\nfunction pairKey(token0Address, token1Address) {\n  return `${token0Address};${token1Address}`;\n}\n\nexport const initialState = {\n  userDarkMode: null,\n  matchesDarkMode: false,\n  userExpertMode: false,\n  userSingleHopOnly: false,\n  userSlippageTolerance: INITIAL_ALLOWED_SLIPPAGE,\n  userDeadline: DEFAULT_DEADLINE_FROM_NOW,\n  tokens: {},\n  pairs: {},\n  timestamp: currentTimestamp(),\n  URLWarningVisible: true,\n  valoraAccount: null\n};\nexport default createReducer(initialState, builder => builder.addCase(updateVersion, state => {\n  // slippage isnt being tracked in local storage, reset to default\n  // noinspection SuspiciousTypeOfGuard\n  if (typeof state.userSlippageTolerance !== 'number') {\n    state.userSlippageTolerance = INITIAL_ALLOWED_SLIPPAGE;\n  } // deadline isnt being tracked in local storage, reset to default\n  // noinspection SuspiciousTypeOfGuard\n\n\n  if (typeof state.userDeadline !== 'number') {\n    state.userDeadline = DEFAULT_DEADLINE_FROM_NOW;\n  }\n\n  state.lastUpdateVersionTimestamp = currentTimestamp();\n}).addCase(updateUserDarkMode, (state, action) => {\n  state.userDarkMode = action.payload.userDarkMode;\n  state.timestamp = currentTimestamp();\n}).addCase(updateMatchesDarkMode, (state, action) => {\n  state.matchesDarkMode = action.payload.matchesDarkMode;\n  state.timestamp = currentTimestamp();\n}).addCase(updateUserExpertMode, (state, action) => {\n  state.userExpertMode = action.payload.userExpertMode;\n  state.timestamp = currentTimestamp();\n}).addCase(updateUserSlippageTolerance, (state, action) => {\n  state.userSlippageTolerance = action.payload.userSlippageTolerance;\n  state.timestamp = currentTimestamp();\n}).addCase(updateUserDeadline, (state, action) => {\n  state.userDeadline = action.payload.userDeadline;\n  state.timestamp = currentTimestamp();\n}).addCase(updateUserSingleHopOnly, (state, action) => {\n  state.userSingleHopOnly = action.payload.userSingleHopOnly;\n}).addCase(addSerializedToken, (state, {\n  payload: {\n    serializedToken\n  }\n}) => {\n  state.tokens[serializedToken.chainId] = state.tokens[serializedToken.chainId] || {};\n  state.tokens[serializedToken.chainId][serializedToken.address] = serializedToken;\n  state.timestamp = currentTimestamp();\n}).addCase(removeSerializedToken, (state, {\n  payload: {\n    address,\n    chainId\n  }\n}) => {\n  state.tokens[chainId] = state.tokens[chainId] || {};\n  delete state.tokens[chainId][address];\n  state.timestamp = currentTimestamp();\n}).addCase(addSerializedPair, (state, {\n  payload: {\n    serializedPair\n  }\n}) => {\n  if (serializedPair.token0.chainId === serializedPair.token1.chainId && serializedPair.token0.address !== serializedPair.token1.address) {\n    const chainId = serializedPair.token0.chainId;\n    state.pairs[chainId] = state.pairs[chainId] || {};\n    state.pairs[chainId][pairKey(serializedPair.token0.address, serializedPair.token1.address)] = serializedPair;\n  }\n\n  state.timestamp = currentTimestamp();\n}).addCase(removeSerializedPair, (state, {\n  payload: {\n    chainId,\n    tokenAAddress,\n    tokenBAddress\n  }\n}) => {\n  if (state.pairs[chainId]) {\n    // just delete both keys if either exists\n    delete state.pairs[chainId][pairKey(tokenAAddress, tokenBAddress)];\n    delete state.pairs[chainId][pairKey(tokenBAddress, tokenAAddress)];\n  }\n\n  state.timestamp = currentTimestamp();\n}).addCase(toggleURLWarning, state => {\n  state.URLWarningVisible = !state.URLWarningVisible;\n}).addCase(setValoraAccount, (state, {\n  payload\n}) => {\n  state.valoraAccount = payload;\n}).addCase(clearValoraAccount, state => {\n  state.valoraAccount = null;\n}));","map":{"version":3,"sources":["/Users/khoiplus/Desktop/celopad/cpadswaptest/src/state/user/reducer.ts"],"names":["createReducer","DEFAULT_DEADLINE_FROM_NOW","INITIAL_ALLOWED_SLIPPAGE","updateVersion","addSerializedPair","addSerializedToken","clearValoraAccount","removeSerializedPair","removeSerializedToken","setValoraAccount","toggleURLWarning","updateMatchesDarkMode","updateUserDarkMode","updateUserDeadline","updateUserExpertMode","updateUserSingleHopOnly","updateUserSlippageTolerance","currentTimestamp","Date","getTime","pairKey","token0Address","token1Address","initialState","userDarkMode","matchesDarkMode","userExpertMode","userSingleHopOnly","userSlippageTolerance","userDeadline","tokens","pairs","timestamp","URLWarningVisible","valoraAccount","builder","addCase","state","lastUpdateVersionTimestamp","action","payload","serializedToken","chainId","address","serializedPair","token0","token1","tokenAAddress","tokenBAddress"],"mappings":"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","sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\nimport { DEFAULT_DEADLINE_FROM_NOW, INITIAL_ALLOWED_SLIPPAGE } from '../../constants'\nimport { updateVersion } from '../global/actions'\nimport {\n  addSerializedPair,\n  addSerializedToken,\n  clearValoraAccount,\n  removeSerializedPair,\n  removeSerializedToken,\n  SerializedPair,\n  SerializedToken,\n  setValoraAccount,\n  toggleURLWarning,\n  updateMatchesDarkMode,\n  updateUserDarkMode,\n  updateUserDeadline,\n  updateUserExpertMode,\n  updateUserSingleHopOnly,\n  updateUserSlippageTolerance\n} from './actions'\n\nconst currentTimestamp = () => new Date().getTime()\n\nexport interface UserState {\n  // the timestamp of the last updateVersion action\n  lastUpdateVersionTimestamp?: number\n\n  userDarkMode: boolean | null // the user's choice for dark mode or light mode\n  matchesDarkMode: boolean // whether the dark mode media query matches\n\n  userExpertMode: boolean\n\n  userSingleHopOnly: boolean // only allow swaps on direct pairs\n\n  // user defined slippage tolerance in bips, used in all txns\n  userSlippageTolerance: number\n\n  // deadline set by user in minutes, used in all txns\n  userDeadline: number\n\n  tokens: {\n    [chainId: number]: {\n      [address: string]: SerializedToken\n    }\n  }\n\n  pairs: {\n    [chainId: number]: {\n      // keyed by token0Address:token1Address\n      [key: string]: SerializedPair\n    }\n  }\n\n  timestamp: number\n  URLWarningVisible: boolean\n\n  // persist valora connection\n  valoraAccount: {\n    address: string\n    phoneNumber: string\n  } | null\n}\n\nfunction pairKey(token0Address: string, token1Address: string) {\n  return `${token0Address};${token1Address}`\n}\n\nexport const initialState: UserState = {\n  userDarkMode: null,\n  matchesDarkMode: false,\n  userExpertMode: false,\n  userSingleHopOnly: false,\n  userSlippageTolerance: INITIAL_ALLOWED_SLIPPAGE,\n  userDeadline: DEFAULT_DEADLINE_FROM_NOW,\n  tokens: {},\n  pairs: {},\n  timestamp: currentTimestamp(),\n  URLWarningVisible: true,\n  valoraAccount: null\n}\n\nexport default createReducer(initialState, builder =>\n  builder\n    .addCase(updateVersion, state => {\n      // slippage isnt being tracked in local storage, reset to default\n      // noinspection SuspiciousTypeOfGuard\n      if (typeof state.userSlippageTolerance !== 'number') {\n        state.userSlippageTolerance = INITIAL_ALLOWED_SLIPPAGE\n      }\n\n      // deadline isnt being tracked in local storage, reset to default\n      // noinspection SuspiciousTypeOfGuard\n      if (typeof state.userDeadline !== 'number') {\n        state.userDeadline = DEFAULT_DEADLINE_FROM_NOW\n      }\n\n      state.lastUpdateVersionTimestamp = currentTimestamp()\n    })\n    .addCase(updateUserDarkMode, (state, action) => {\n      state.userDarkMode = action.payload.userDarkMode\n      state.timestamp = currentTimestamp()\n    })\n    .addCase(updateMatchesDarkMode, (state, action) => {\n      state.matchesDarkMode = action.payload.matchesDarkMode\n      state.timestamp = currentTimestamp()\n    })\n    .addCase(updateUserExpertMode, (state, action) => {\n      state.userExpertMode = action.payload.userExpertMode\n      state.timestamp = currentTimestamp()\n    })\n    .addCase(updateUserSlippageTolerance, (state, action) => {\n      state.userSlippageTolerance = action.payload.userSlippageTolerance\n      state.timestamp = currentTimestamp()\n    })\n    .addCase(updateUserDeadline, (state, action) => {\n      state.userDeadline = action.payload.userDeadline\n      state.timestamp = currentTimestamp()\n    })\n    .addCase(updateUserSingleHopOnly, (state, action) => {\n      state.userSingleHopOnly = action.payload.userSingleHopOnly\n    })\n    .addCase(addSerializedToken, (state, { payload: { serializedToken } }) => {\n      state.tokens[serializedToken.chainId] = state.tokens[serializedToken.chainId] || {}\n      state.tokens[serializedToken.chainId][serializedToken.address] = serializedToken\n      state.timestamp = currentTimestamp()\n    })\n    .addCase(removeSerializedToken, (state, { payload: { address, chainId } }) => {\n      state.tokens[chainId] = state.tokens[chainId] || {}\n      delete state.tokens[chainId][address]\n      state.timestamp = currentTimestamp()\n    })\n    .addCase(addSerializedPair, (state, { payload: { serializedPair } }) => {\n      if (\n        serializedPair.token0.chainId === serializedPair.token1.chainId &&\n        serializedPair.token0.address !== serializedPair.token1.address\n      ) {\n        const chainId = serializedPair.token0.chainId\n        state.pairs[chainId] = state.pairs[chainId] || {}\n        state.pairs[chainId][pairKey(serializedPair.token0.address, serializedPair.token1.address)] = serializedPair\n      }\n      state.timestamp = currentTimestamp()\n    })\n    .addCase(removeSerializedPair, (state, { payload: { chainId, tokenAAddress, tokenBAddress } }) => {\n      if (state.pairs[chainId]) {\n        // just delete both keys if either exists\n        delete state.pairs[chainId][pairKey(tokenAAddress, tokenBAddress)]\n        delete state.pairs[chainId][pairKey(tokenBAddress, tokenAAddress)]\n      }\n      state.timestamp = currentTimestamp()\n    })\n    .addCase(toggleURLWarning, state => {\n      state.URLWarningVisible = !state.URLWarningVisible\n    })\n    .addCase(setValoraAccount, (state, { payload }) => {\n      state.valoraAccount = payload\n    })\n    .addCase(clearValoraAccount, state => {\n      state.valoraAccount = null\n    })\n)\n"]},"metadata":{},"sourceType":"module"}