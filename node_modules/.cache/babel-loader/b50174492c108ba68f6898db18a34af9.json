{"ast":null,"code":"\"use strict\";\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nvar HEX_REGEX = /^0x[0-9A-F]*$/i;\n\nexports.eqAddress = function (a, b) {\n  return exports.normalizeAddress(a) === exports.normalizeAddress(b);\n};\n\nexports.normalizeAddress = function (a) {\n  return exports.trimLeading0x(a).toLowerCase();\n};\n\nexports.isNullAddress = function (a) {\n  return new bignumber_js_1.default(exports.normalizeAddress(a)).isZero();\n};\n\nexports.normalizeAddressWith0x = function (a) {\n  return exports.ensureLeading0x(a).toLowerCase();\n};\n\nexports.trimLeading0x = function (input) {\n  return input.startsWith('0x') ? input.slice(2) : input;\n};\n\nexports.ensureLeading0x = function (input) {\n  return input.startsWith('0x') ? input : \"0x\" + input;\n}; // Turns '0xce10ce10ce10ce10ce10ce10ce10ce10ce10ce10'\n// into ['ce10','ce10','ce10','ce10','ce10','ce10','ce10','ce10','ce10','ce10']\n\n\nexports.getAddressChunks = function (input) {\n  return exports.trimLeading0x(input).match(/.{1,4}/g) || [];\n};\n\nexports.isHexString = function (input) {\n  return HEX_REGEX.test(input);\n};\n\nexports.hexToBuffer = function (input) {\n  return Buffer.from(exports.trimLeading0x(input), 'hex');\n};\n\nexports.bufferToHex = function (buf) {\n  return exports.ensureLeading0x(buf.toString('hex'));\n};\n\nexports.NULL_ADDRESS = '0x0000000000000000000000000000000000000000';\n\nexports.findAddressIndex = function (address, addresses) {\n  return addresses.findIndex(function (x) {\n    return exports.eqAddress(x, address);\n  });\n}; // Returns an array of indices mapping the entries of oldAddress[] to newAddress[]\n\n\nexports.mapAddressListOnto = function (oldAddress, newAddress) {\n  var oldAddressIndex = oldAddress.map(function (x, index) {\n    return {\n      address: exports.normalizeAddress(x),\n      index: index\n    };\n  });\n  var newAddressIndex = newAddress.map(function (x, index) {\n    return {\n      address: exports.normalizeAddress(x),\n      index: index\n    };\n  });\n  oldAddressIndex.sort(function (a, b) {\n    return a.address.localeCompare(b.address);\n  });\n  newAddressIndex.sort(function (a, b) {\n    return a.address.localeCompare(b.address);\n  });\n\n  var res = __spreadArrays(Array(oldAddress.length).fill(-1));\n\n  for (var i = 0, j = 0; i < oldAddress.length && j < newAddress.length;) {\n    var cmp = oldAddressIndex[i].address.localeCompare(newAddressIndex[j].address);\n\n    if (cmp < 0) {\n      i++;\n    } else if (cmp > 0) {\n      j++;\n    } else {\n      // Address is present in both lists\n      res[oldAddressIndex[i].index] = newAddressIndex[j].index;\n      i++;\n      j++;\n    }\n  }\n\n  return res;\n}; // Returns data[] reordered by mapAddressListOnto(), and initiaValue for any entry of\n// oldAddress[] not present in newAddress[].\n\n\nfunction mapAddressListDataOnto(data, oldAddress, newAddress, initialValue) {\n  var res = __spreadArrays(Array(oldAddress.length).fill(initialValue));\n\n  if (data.length === 0) {\n    return res;\n  }\n\n  var addressIndexMap = exports.mapAddressListOnto(oldAddress, newAddress);\n\n  for (var i = 0; i < addressIndexMap.length; i++) {\n    if (addressIndexMap[i] >= 0) {\n      res[addressIndexMap[i]] = data[i];\n    }\n  }\n\n  return res;\n}\n\nexports.mapAddressListDataOnto = mapAddressListDataOnto;","map":{"version":3,"sources":["../src/address.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nvar HEX_REGEX = /^0x[0-9A-F]*$/i;\nexports.eqAddress = function (a, b) { return exports.normalizeAddress(a) === exports.normalizeAddress(b); };\nexports.normalizeAddress = function (a) { return exports.trimLeading0x(a).toLowerCase(); };\nexports.isNullAddress = function (a) { return new bignumber_js_1.default(exports.normalizeAddress(a)).isZero(); };\nexports.normalizeAddressWith0x = function (a) { return exports.ensureLeading0x(a).toLowerCase(); };\nexports.trimLeading0x = function (input) { return (input.startsWith('0x') ? input.slice(2) : input); };\nexports.ensureLeading0x = function (input) { return (input.startsWith('0x') ? input : \"0x\" + input); };\n// Turns '0xce10ce10ce10ce10ce10ce10ce10ce10ce10ce10'\n// into ['ce10','ce10','ce10','ce10','ce10','ce10','ce10','ce10','ce10','ce10']\nexports.getAddressChunks = function (input) {\n    return exports.trimLeading0x(input).match(/.{1,4}/g) || [];\n};\nexports.isHexString = function (input) { return HEX_REGEX.test(input); };\nexports.hexToBuffer = function (input) { return Buffer.from(exports.trimLeading0x(input), 'hex'); };\nexports.bufferToHex = function (buf) { return exports.ensureLeading0x(buf.toString('hex')); };\nexports.NULL_ADDRESS = '0x0000000000000000000000000000000000000000';\nexports.findAddressIndex = function (address, addresses) {\n    return addresses.findIndex(function (x) { return exports.eqAddress(x, address); });\n};\n// Returns an array of indices mapping the entries of oldAddress[] to newAddress[]\nexports.mapAddressListOnto = function (oldAddress, newAddress) {\n    var oldAddressIndex = oldAddress.map(function (x, index) { return ({ address: exports.normalizeAddress(x), index: index }); });\n    var newAddressIndex = newAddress.map(function (x, index) { return ({ address: exports.normalizeAddress(x), index: index }); });\n    oldAddressIndex.sort(function (a, b) { return a.address.localeCompare(b.address); });\n    newAddressIndex.sort(function (a, b) { return a.address.localeCompare(b.address); });\n    var res = __spreadArrays(Array(oldAddress.length).fill(-1));\n    for (var i = 0, j = 0; i < oldAddress.length && j < newAddress.length;) {\n        var cmp = oldAddressIndex[i].address.localeCompare(newAddressIndex[j].address);\n        if (cmp < 0) {\n            i++;\n        }\n        else if (cmp > 0) {\n            j++;\n        }\n        else {\n            // Address is present in both lists\n            res[oldAddressIndex[i].index] = newAddressIndex[j].index;\n            i++;\n            j++;\n        }\n    }\n    return res;\n};\n// Returns data[] reordered by mapAddressListOnto(), and initiaValue for any entry of\n// oldAddress[] not present in newAddress[].\nfunction mapAddressListDataOnto(data, oldAddress, newAddress, initialValue) {\n    var res = __spreadArrays(Array(oldAddress.length).fill(initialValue));\n    if (data.length === 0) {\n        return res;\n    }\n    var addressIndexMap = exports.mapAddressListOnto(oldAddress, newAddress);\n    for (var i = 0; i < addressIndexMap.length; i++) {\n        if (addressIndexMap[i] >= 0) {\n            res[addressIndexMap[i]] = data[i];\n        }\n    }\n    return res;\n}\nexports.mapAddressListDataOnto = mapAddressListDataOnto;\n//# sourceMappingURL=address.js.map"]},"metadata":{},"sourceType":"script"}