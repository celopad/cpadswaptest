{"ast":null,"code":"import { CeloContract } from '@celo/contractkit';\nimport { DappKitRequestTypes, DappKitResponseStatus } from '@celo/utils';\nimport { MiniRpcProvider } from 'connectors/NetworkConnector';\nimport { requestValoraTransaction } from './valoraUtils';\n/**\n * Subprovider for interfacing with a user's Valora wallet.\n */\n\nexport class ValoraProvider extends MiniRpcProvider {\n  constructor(...args) {\n    super(...args);\n    this._networkRequest = this.request;\n\n    this._request = async (method, params) => {\n      console.log('[Valora request]', {\n        method,\n        params\n      });\n\n      if (method === 'eth_estimateGas' && params) {\n        try {\n          const txData = params[0];\n          const baseNonce = await this.kit.connection.nonce(txData.from);\n          const stableAddress = await this.kit.registry.addressFor(CeloContract.StableToken); // estimate gas for the transaction\n\n          const gasEstimate = await this.kit.connection.estimateGas({\n            feeCurrency: stableAddress,\n            nonce: baseNonce,\n            ...txData\n          });\n          return '0x' + gasEstimate.toString(16);\n        } catch (e) {\n          console.error('Failed to estimate gas', {\n            method,\n            params\n          }, e);\n          throw e;\n        }\n      } else if (method === 'eth_sendTransaction' && params) {\n        const txParams = params;\n        const [firstTx] = txParams;\n\n        if (!firstTx) {\n          throw new Error('No tx found');\n        }\n\n        const stableAddress = await this.kit.registry.addressFor(CeloContract.StableToken); // const goldAddress = await this.kit.registry.addressFor(CeloContract.GoldToken)\n\n        const baseNonce = await this.kit.connection.nonce(firstTx.from);\n\n        try {\n          const txs = await Promise.all(txParams.map(async ({\n            from,\n            to,\n            data\n          }, i) => {\n            const gasEstimate = await this.kit.connection.estimateGas({\n              feeCurrency: stableAddress,\n              from,\n              to,\n              data\n            });\n            return {\n              txData: data,\n              estimatedGas: gasEstimate,\n              from,\n              to,\n              nonce: baseNonce + i,\n              feeCurrencyAddress: stableAddress,\n              value: '0'\n            };\n          }));\n          console.debug('Sending txs', txs);\n          const resp = await requestValoraTransaction(txs);\n\n          if (resp.type === DappKitRequestTypes.SIGN_TX && resp.status === DappKitResponseStatus.SUCCESS) {\n            const tx = await this.kit.web3.eth.sendSignedTransaction(resp.rawTxs[0]);\n            console.log('Valora TX sent', tx);\n            return tx.transactionHash; // const result = await Promise.all(\n            //   resp.rawTxs.map(async rawTx => {\n            //     return await toTxResult(this.kit.web3.eth.sendSignedTransaction(rawTx)).waitReceipt()\n            //   })\n            // )\n            // return result\n          }\n        } catch (e) {\n          console.error('[Valora] Failed to send transaction', {\n            method,\n            params\n          }, e);\n          throw e;\n        }\n      }\n\n      return await this._networkRequest.call(this, method, params);\n    };\n\n    this.request = async (method, params) => {\n      if (typeof method !== 'string') {\n        return this._request(method.method, method.params);\n      }\n\n      return this._request(method, params);\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/khoiplus/Desktop/celopad/cpadswaptest/src/connectors/valora/ValoraProvider.ts"],"names":["CeloContract","DappKitRequestTypes","DappKitResponseStatus","MiniRpcProvider","requestValoraTransaction","ValoraProvider","_networkRequest","request","_request","method","params","console","log","txData","baseNonce","kit","connection","nonce","from","stableAddress","registry","addressFor","StableToken","gasEstimate","estimateGas","feeCurrency","toString","e","error","txParams","firstTx","Error","txs","Promise","all","map","to","data","i","estimatedGas","feeCurrencyAddress","value","debug","resp","type","SIGN_TX","status","SUCCESS","tx","web3","eth","sendSignedTransaction","rawTxs","transactionHash","call"],"mappings":"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","sourcesContent":["import { CeloContract } from '@celo/contractkit'\nimport { DappKitRequestTypes, DappKitResponseStatus } from '@celo/utils'\nimport { MiniRpcProvider } from 'connectors/NetworkConnector'\nimport { requestValoraTransaction } from './valoraUtils'\n\n/**\n * Subprovider for interfacing with a user's Valora wallet.\n */\nexport class ValoraProvider extends MiniRpcProvider {\n  // constructor(chainId: number, url: string, batchWaitTimeMs?: number) {\n  //   super(chainId, url, batchWaitTimeMs)\n  // }\n\n  _networkRequest = this.request\n\n  _request = async (method: string, params?: unknown[] | object): Promise<unknown> => {\n    console.log('[Valora request]', { method, params })\n    if (method === 'eth_estimateGas' && params) {\n      try {\n        const txData = (params as unknown[])[0] as { from: string; to: string; data: string }\n        const baseNonce = await this.kit.connection.nonce(txData.from)\n        const stableAddress = await this.kit.registry.addressFor(CeloContract.StableToken)\n        // estimate gas for the transaction\n        const gasEstimate = await this.kit.connection.estimateGas({\n          feeCurrency: stableAddress,\n          nonce: baseNonce,\n          ...txData\n        })\n        return '0x' + gasEstimate.toString(16)\n      } catch (e) {\n        console.error('Failed to estimate gas', { method, params }, e)\n        throw e\n      }\n    } else if (method === 'eth_sendTransaction' && params) {\n      const txParams = params as readonly { gas: string; from: string; to: string; data: string }[]\n      const [firstTx] = txParams\n      if (!firstTx) {\n        throw new Error('No tx found')\n      }\n      const stableAddress = await this.kit.registry.addressFor(CeloContract.StableToken)\n      // const goldAddress = await this.kit.registry.addressFor(CeloContract.GoldToken)\n      const baseNonce = await this.kit.connection.nonce(firstTx.from)\n\n      try {\n        const txs = await Promise.all(\n          txParams.map(async ({ from, to, data }, i) => {\n            const gasEstimate = await this.kit.connection.estimateGas({\n              feeCurrency: stableAddress,\n              from,\n              to,\n              data\n            })\n            return {\n              txData: data,\n              estimatedGas: gasEstimate,\n              from,\n              to,\n              nonce: baseNonce + i,\n              feeCurrencyAddress: stableAddress,\n              value: '0'\n            }\n          })\n        )\n        console.debug('Sending txs', txs)\n        const resp = await requestValoraTransaction(txs)\n        if (resp.type === DappKitRequestTypes.SIGN_TX && resp.status === DappKitResponseStatus.SUCCESS) {\n          const tx = await this.kit.web3.eth.sendSignedTransaction(resp.rawTxs[0])\n          console.log('Valora TX sent', tx)\n          return tx.transactionHash\n          // const result = await Promise.all(\n          //   resp.rawTxs.map(async rawTx => {\n          //     return await toTxResult(this.kit.web3.eth.sendSignedTransaction(rawTx)).waitReceipt()\n          //   })\n          // )\n          // return result\n        }\n      } catch (e) {\n        console.error('[Valora] Failed to send transaction', { method, params }, e)\n        throw e\n      }\n    }\n    return await this._networkRequest.call(this, method, params)\n  }\n\n  request = async (\n    method: string | { method: string; params: unknown[] },\n    params?: unknown[] | object\n  ): Promise<unknown> => {\n    if (typeof method !== 'string') {\n      return this._request(method.method, method.params)\n    }\n    return this._request(method, params)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}