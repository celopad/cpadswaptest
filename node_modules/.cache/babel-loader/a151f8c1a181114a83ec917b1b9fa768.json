{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar address_1 = require(\"@celo/base/lib/address\");\n\nvar async_1 = require(\"@celo/base/lib/async\");\n\nvar collections_1 = require(\"@celo/base/lib/collections\");\n\nvar connect_1 = require(\"@celo/connect\");\n\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nvar BaseWrapper_1 = require(\"./BaseWrapper\");\n/**\n * Contract for voting for validators and managing validator groups.\n */\n\n\nvar ElectionWrapper =\n/** @class */\nfunction (_super) {\n  __extends(ElectionWrapper, _super);\n\n  function ElectionWrapper() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * Returns the current election threshold.\n     * @returns Election threshold.\n     */\n\n\n    _this.electabilityThreshold = BaseWrapper_1.proxyCall(_this.contract.methods.getElectabilityThreshold, undefined, BaseWrapper_1.fixidityValueToBigNumber);\n    /**\n     * Gets a validator address from the validator set at the given block number.\n     * @param index Index of requested validator in the validator set.\n     * @param blockNumber Block number to retrieve the validator set from.\n     * @return Address of validator at the requested index.\n     */\n\n    _this.validatorSignerAddressFromSet = BaseWrapper_1.proxyCall(_this.contract.methods.validatorSignerAddressFromSet);\n    /**\n     * Gets a validator address from the current validator set.\n     * @param index Index of requested validator in the validator set.\n     * @return Address of validator at the requested index.\n     */\n\n    _this.validatorSignerAddressFromCurrentSet = BaseWrapper_1.proxyCall(_this.contract.methods.validatorSignerAddressFromCurrentSet, BaseWrapper_1.tupleParser(BaseWrapper_1.identity));\n    /**\n     * Gets the size of the validator set that must sign the given block number.\n     * @param blockNumber Block number to retrieve the validator set from.\n     * @return Size of the validator set.\n     */\n\n    _this.numberValidatorsInSet = BaseWrapper_1.proxyCall(_this.contract.methods.numberValidatorsInSet, undefined, BaseWrapper_1.valueToInt);\n    /**\n     * Gets the size of the current elected validator set.\n     * @return Size of the current elected validator set.\n     */\n\n    _this.numberValidatorsInCurrentSet = BaseWrapper_1.proxyCall(_this.contract.methods.numberValidatorsInCurrentSet, undefined, BaseWrapper_1.valueToInt);\n    /**\n     * Returns the total votes received across all groups.\n     * @return The total votes received across all groups.\n     */\n\n    _this.getTotalVotes = BaseWrapper_1.proxyCall(_this.contract.methods.getTotalVotes, undefined, BaseWrapper_1.valueToBigNumber);\n    /**\n     * Returns the current validator signers using the precompiles.\n     * @return List of current validator signers.\n     */\n\n    _this.getCurrentValidatorSigners = BaseWrapper_1.proxyCall(_this.contract.methods.getCurrentValidatorSigners);\n    /**\n     * Returns the total votes for `group` made by `account`.\n     * @param group The address of the validator group.\n     * @param account The address of the voting account.\n     * @return The total votes for `group` made by `account`.\n     */\n\n    _this.getTotalVotesForGroupByAccount = BaseWrapper_1.proxyCall(_this.contract.methods.getTotalVotesForGroupByAccount, undefined, BaseWrapper_1.valueToBigNumber);\n    /**\n     * Returns the groups that `account` has voted for.\n     * @param account The address of the account casting votes.\n     * @return The groups that `account` has voted for.\n     */\n\n    _this.getGroupsVotedForByAccount = BaseWrapper_1.proxyCall(_this.contract.methods.getGroupsVotedForByAccount);\n    _this._activate = BaseWrapper_1.proxySend(_this.kit, _this.contract.methods.activate);\n    return _this;\n  }\n  /**\n   * Returns the minimum and maximum number of validators that can be elected.\n   * @returns The minimum and maximum number of validators that can be elected.\n   */\n\n\n  ElectionWrapper.prototype.electableValidators = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, min, max;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.contract.methods.electableValidators().call()];\n\n          case 1:\n            _a = _b.sent(), min = _a.min, max = _a.max;\n            return [2\n            /*return*/\n            , {\n              min: BaseWrapper_1.valueToBigNumber(min),\n              max: BaseWrapper_1.valueToBigNumber(max)\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the validator signers for block `blockNumber`.\n   * @param blockNumber Block number to retrieve signers for.\n   * @return Address of each signer in the validator set.\n   */\n\n\n  ElectionWrapper.prototype.getValidatorSigners = function (blockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var numValidators;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.numberValidatorsInSet(blockNumber)];\n\n          case 1:\n            numValidators = _a.sent();\n            return [2\n            /*return*/\n            , async_1.concurrentMap(10, collections_1.zeroRange(numValidators), function (i) {\n              return _this.validatorSignerAddressFromSet(i, blockNumber);\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Returns a list of elected validators with seats allocated to groups via the D'Hondt method.\n   * @return The list of elected validators.\n   * @dev See https://en.wikipedia.org/wiki/D%27Hondt_method#Allocation for more information.\n   */\n\n\n  ElectionWrapper.prototype.electValidatorSigners = function (min, max) {\n    return __awaiter(this, void 0, void 0, function () {\n      var config, minArg, maxArg;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(min !== undefined || max !== undefined)) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.getConfig()];\n\n          case 1:\n            config = _a.sent();\n            minArg = min === undefined ? config.electableValidators.min : min;\n            maxArg = max === undefined ? config.electableValidators.max : max;\n            return [2\n            /*return*/\n            , this.contract.methods.electNValidatorSigners(minArg.toString(10), maxArg.toString(10)).call()];\n\n          case 2:\n            return [2\n            /*return*/\n            , this.contract.methods.electValidatorSigners().call()];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the total votes for `group`.\n   * @param group The address of the validator group.\n   * @return The total votes for `group`.\n   */\n\n\n  ElectionWrapper.prototype.getTotalVotesForGroup = function (group, blockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var votes;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.contract.methods.getTotalVotesForGroup(group).call({}, blockNumber)];\n\n          case 1:\n            votes = _a.sent();\n            return [2\n            /*return*/\n            , BaseWrapper_1.valueToBigNumber(votes)];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the active votes for `group`.\n   * @param group The address of the validator group.\n   * @return The active votes for `group`.\n   */\n\n\n  ElectionWrapper.prototype.getActiveVotesForGroup = function (group, blockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var votes;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.contract.methods.getActiveVotesForGroup(group).call({}, blockNumber)];\n\n          case 1:\n            votes = _a.sent();\n            return [2\n            /*return*/\n            , BaseWrapper_1.valueToBigNumber(votes)];\n        }\n      });\n    });\n  };\n\n  ElectionWrapper.prototype.getVotesForGroupByAccount = function (account, group, blockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var pending, active;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.contract.methods.getPendingVotesForGroupByAccount(group, account) // @ts-ignore: Expected 0-1 arguments, but got 2\n            .call({}, blockNumber)];\n\n          case 1:\n            pending = _a.sent();\n            return [4\n            /*yield*/\n            , this.contract.methods.getActiveVotesForGroupByAccount(group, account) // @ts-ignore: Expected 0-1 arguments, but got 2\n            .call({}, blockNumber)];\n\n          case 2:\n            active = _a.sent();\n            return [2\n            /*return*/\n            , {\n              group: group,\n              pending: BaseWrapper_1.valueToBigNumber(pending),\n              active: BaseWrapper_1.valueToBigNumber(active)\n            }];\n        }\n      });\n    });\n  };\n\n  ElectionWrapper.prototype.getVoter = function (account, blockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var groups, votes;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.contract.methods.getGroupsVotedForByAccount(account) // @ts-ignore: Expected 0-1 arguments, but got 2\n            .call({}, blockNumber)];\n\n          case 1:\n            groups = _a.sent();\n            return [4\n            /*yield*/\n            , async_1.concurrentMap(10, groups, function (g) {\n              return _this.getVotesForGroupByAccount(account, g, blockNumber);\n            })];\n\n          case 2:\n            votes = _a.sent();\n            return [2\n            /*return*/\n            , {\n              address: account,\n              votes: votes\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Returns whether or not the account has any pending votes.\n   * @param account The address of the account casting votes.\n   * @return The groups that `account` has voted for.\n   */\n\n\n  ElectionWrapper.prototype.hasPendingVotes = function (account) {\n    return __awaiter(this, void 0, void 0, function () {\n      var groups, isPending;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.contract.methods.getGroupsVotedForByAccount(account).call()];\n\n          case 1:\n            groups = _a.sent();\n            return [4\n            /*yield*/\n            , Promise.all(groups.map(function (g) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var _a;\n\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      _a = BaseWrapper_1.valueToBigNumber;\n                      return [4\n                      /*yield*/\n                      , this.contract.methods.getPendingVotesForGroupByAccount(g, account).call()];\n\n                    case 1:\n                      return [2\n                      /*return*/\n                      , _a.apply(void 0, [_b.sent()]).isGreaterThan(0)];\n                  }\n                });\n              });\n            }))];\n\n          case 2:\n            isPending = _a.sent();\n            return [2\n            /*return*/\n            , isPending.some(function (a) {\n              return a;\n            })];\n        }\n      });\n    });\n  };\n\n  ElectionWrapper.prototype.hasActivatablePendingVotes = function (account) {\n    return __awaiter(this, void 0, void 0, function () {\n      var groups, isActivatable;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.contract.methods.getGroupsVotedForByAccount(account).call()];\n\n          case 1:\n            groups = _a.sent();\n            return [4\n            /*yield*/\n            , Promise.all(groups.map(function (g) {\n              return _this.contract.methods.hasActivatablePendingVotes(account, g).call();\n            }))];\n\n          case 2:\n            isActivatable = _a.sent();\n            return [2\n            /*return*/\n            , isActivatable.some(function (a) {\n              return a;\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Returns current configuration parameters.\n   */\n\n\n  ElectionWrapper.prototype.getConfig = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Promise.all([this.electableValidators(), this.electabilityThreshold(), this.contract.methods.maxNumGroupsVotedFor().call(), this.getTotalVotes()])];\n\n          case 1:\n            res = _a.sent();\n            return [2\n            /*return*/\n            , {\n              electableValidators: res[0],\n              electabilityThreshold: res[1],\n              maxNumGroupsVotedFor: BaseWrapper_1.valueToBigNumber(res[2]),\n              totalVotes: res[3],\n              currentThreshold: res[3].multipliedBy(res[1])\n            }];\n        }\n      });\n    });\n  };\n\n  ElectionWrapper.prototype.getValidatorGroupVotes = function (address) {\n    return __awaiter(this, void 0, void 0, function () {\n      var votes, eligible, numVotesReceivable, accounts, name;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.contract.methods.getTotalVotesForGroup(address).call()];\n\n          case 1:\n            votes = _a.sent();\n            return [4\n            /*yield*/\n            , this.contract.methods.getGroupEligibility(address).call()];\n\n          case 2:\n            eligible = _a.sent();\n            return [4\n            /*yield*/\n            , this.contract.methods.getNumVotesReceivable(address).call()];\n\n          case 3:\n            numVotesReceivable = _a.sent();\n            return [4\n            /*yield*/\n            , this.kit.contracts.getAccounts()];\n\n          case 4:\n            accounts = _a.sent();\n            return [4\n            /*yield*/\n            , accounts.getName(address)];\n\n          case 5:\n            name = _a.sent() || '';\n            return [2\n            /*return*/\n            , {\n              address: address,\n              name: name,\n              votes: BaseWrapper_1.valueToBigNumber(votes),\n              capacity: BaseWrapper_1.valueToBigNumber(numVotesReceivable).minus(votes),\n              eligible: eligible\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the current registered validator groups and their total votes and eligibility.\n   */\n\n\n  ElectionWrapper.prototype.getValidatorGroupsVotes = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var validators, groups;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.kit.contracts.getValidators()];\n\n          case 1:\n            validators = _a.sent();\n            return [4\n            /*yield*/\n            , validators.getRegisteredValidatorGroupsAddresses()];\n\n          case 2:\n            groups = _a.sent();\n            return [2\n            /*return*/\n            , async_1.concurrentMap(5, groups, function (g) {\n              return _this.getValidatorGroupVotes(g);\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Activates any activatable pending votes.\n   * @param account The account with pending votes to activate.\n   */\n\n\n  ElectionWrapper.prototype.activate = function (account) {\n    return __awaiter(this, void 0, void 0, function () {\n      var groups, isActivatable, groupsActivatable;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.contract.methods.getGroupsVotedForByAccount(account).call()];\n\n          case 1:\n            groups = _a.sent();\n            return [4\n            /*yield*/\n            , Promise.all(groups.map(function (g) {\n              return _this.contract.methods.hasActivatablePendingVotes(account, g).call();\n            }))];\n\n          case 2:\n            isActivatable = _a.sent();\n            groupsActivatable = groups.filter(function (_, i) {\n              return isActivatable[i];\n            });\n            return [2\n            /*return*/\n            , groupsActivatable.map(function (g) {\n              return _this._activate(g);\n            })];\n        }\n      });\n    });\n  };\n\n  ElectionWrapper.prototype.revokePending = function (account, group, value) {\n    return __awaiter(this, void 0, void 0, function () {\n      var groups, index, _a, lesser, greater;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.contract.methods.getGroupsVotedForByAccount(account).call()];\n\n          case 1:\n            groups = _b.sent();\n            index = address_1.findAddressIndex(group, groups);\n            return [4\n            /*yield*/\n            , this.findLesserAndGreaterAfterVote(group, value.times(-1))];\n\n          case 2:\n            _a = _b.sent(), lesser = _a.lesser, greater = _a.greater;\n            return [2\n            /*return*/\n            , connect_1.toTransactionObject(this.kit.connection, this.contract.methods.revokePending(group, value.toFixed(), lesser, greater, index))];\n        }\n      });\n    });\n  };\n\n  ElectionWrapper.prototype.revokeActive = function (account, group, value) {\n    return __awaiter(this, void 0, void 0, function () {\n      var groups, index, _a, lesser, greater;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.contract.methods.getGroupsVotedForByAccount(account).call()];\n\n          case 1:\n            groups = _b.sent();\n            index = address_1.findAddressIndex(group, groups);\n            return [4\n            /*yield*/\n            , this.findLesserAndGreaterAfterVote(group, value.times(-1))];\n\n          case 2:\n            _a = _b.sent(), lesser = _a.lesser, greater = _a.greater;\n            return [2\n            /*return*/\n            , connect_1.toTransactionObject(this.kit.connection, this.contract.methods.revokeActive(group, value.toFixed(), lesser, greater, index))];\n        }\n      });\n    });\n  };\n\n  ElectionWrapper.prototype.revoke = function (account, group, value) {\n    return __awaiter(this, void 0, void 0, function () {\n      var vote, txos, pendingValue, _a, _b, activeValue, _c, _d;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getVotesForGroupByAccount(account, group)];\n\n          case 1:\n            vote = _e.sent();\n\n            if (value.gt(vote.pending.plus(vote.active))) {\n              throw new Error(\"can't revoke more votes for \" + group + \" than have been made by \" + account);\n            }\n\n            txos = [];\n            pendingValue = bignumber_js_1.default.minimum(vote.pending, value);\n            if (!!pendingValue.isZero()) return [3\n            /*break*/\n            , 3];\n            _b = (_a = txos).push;\n            return [4\n            /*yield*/\n            , this.revokePending(account, group, pendingValue)];\n\n          case 2:\n            _b.apply(_a, [_e.sent()]);\n\n            _e.label = 3;\n\n          case 3:\n            if (!pendingValue.lt(value)) return [3\n            /*break*/\n            , 5];\n            activeValue = value.minus(pendingValue);\n            _d = (_c = txos).push;\n            return [4\n            /*yield*/\n            , this.revokeActive(account, group, activeValue)];\n\n          case 4:\n            _d.apply(_c, [_e.sent()]);\n\n            _e.label = 5;\n\n          case 5:\n            return [2\n            /*return*/\n            , txos];\n        }\n      });\n    });\n  };\n  /**\n   * Increments the number of total and pending votes for `group`.\n   * @param validatorGroup The validator group to vote for.\n   * @param value The amount of gold to use to vote.\n   */\n\n\n  ElectionWrapper.prototype.vote = function (validatorGroup, value) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, lesser, greater;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.findLesserAndGreaterAfterVote(validatorGroup, value)];\n\n          case 1:\n            _a = _b.sent(), lesser = _a.lesser, greater = _a.greater;\n            return [2\n            /*return*/\n            , connect_1.toTransactionObject(this.kit.connection, this.contract.methods.vote(validatorGroup, value.toFixed(), lesser, greater))];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the current eligible validator groups and their total votes.\n   */\n\n\n  ElectionWrapper.prototype.getEligibleValidatorGroupsVotes = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.contract.methods.getTotalVotesForEligibleValidatorGroups().call()];\n\n          case 1:\n            res = _a.sent();\n            return [2\n            /*return*/\n            , collections_1.zip(function (a, b) {\n              return {\n                address: a,\n                name: '',\n                votes: new bignumber_js_1.default(b),\n                capacity: new bignumber_js_1.default(0),\n                eligible: true\n              };\n            }, res[0], res[1])];\n        }\n      });\n    });\n  };\n\n  ElectionWrapper.prototype.findLesserAndGreaterAfterVote = function (votedGroup, voteWeight) {\n    return __awaiter(this, void 0, void 0, function () {\n      var currentVotes, selectedGroup, voteTotal, greaterKey, lesserKey, _i, currentVotes_1, vote;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getEligibleValidatorGroupsVotes()];\n\n          case 1:\n            currentVotes = _a.sent();\n            selectedGroup = currentVotes.find(function (votes) {\n              return address_1.eqAddress(votes.address, votedGroup);\n            });\n            voteTotal = selectedGroup ? selectedGroup.votes.plus(voteWeight) : voteWeight;\n            greaterKey = address_1.NULL_ADDRESS;\n            lesserKey = address_1.NULL_ADDRESS; // This leverages the fact that the currentVotes are already sorted from\n            // greatest to lowest value\n\n            for (_i = 0, currentVotes_1 = currentVotes; _i < currentVotes_1.length; _i++) {\n              vote = currentVotes_1[_i];\n\n              if (!address_1.eqAddress(vote.address, votedGroup)) {\n                if (vote.votes.isLessThanOrEqualTo(voteTotal)) {\n                  lesserKey = vote.address;\n                  break;\n                }\n\n                greaterKey = vote.address;\n              }\n            }\n\n            return [2\n            /*return*/\n            , {\n              lesser: lesserKey,\n              greater: greaterKey\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Retrieves the set of validatorsparticipating in BFT at epochNumber.\n   * @param epochNumber The epoch to retrieve the elected validator set at.\n   */\n\n\n  ElectionWrapper.prototype.getElectedValidators = function (epochNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var blockNumber, signers, validators;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.kit.getFirstBlockNumberForEpoch(epochNumber)];\n\n          case 1:\n            blockNumber = _a.sent();\n            return [4\n            /*yield*/\n            , this.getValidatorSigners(blockNumber)];\n\n          case 2:\n            signers = _a.sent();\n            return [4\n            /*yield*/\n            , this.kit.contracts.getValidators()];\n\n          case 3:\n            validators = _a.sent();\n            return [2\n            /*return*/\n            , async_1.concurrentMap(10, signers, function (addr) {\n              return validators.getValidatorFromSigner(addr);\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Retrieves GroupVoterRewards at epochNumber.\n   * @param epochNumber The epoch to retrieve GroupVoterRewards at.\n   */\n\n\n  ElectionWrapper.prototype.getGroupVoterRewards = function (epochNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var blockNumber, events, validators, validatorGroup;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.kit.getLastBlockNumberForEpoch(epochNumber)];\n\n          case 1:\n            blockNumber = _a.sent();\n            return [4\n            /*yield*/\n            , this.getPastEvents('EpochRewardsDistributedToVoters', {\n              fromBlock: blockNumber,\n              toBlock: blockNumber\n            })];\n\n          case 2:\n            events = _a.sent();\n            return [4\n            /*yield*/\n            , this.kit.contracts.getValidators()];\n\n          case 3:\n            validators = _a.sent();\n            return [4\n            /*yield*/\n            , async_1.concurrentMap(10, events, function (e) {\n              return validators.getValidatorGroup(e.returnValues.group, false);\n            })];\n\n          case 4:\n            validatorGroup = _a.sent();\n            return [2\n            /*return*/\n            , events.map(function (e, index) {\n              return {\n                epochNumber: epochNumber,\n                group: validatorGroup[index],\n                groupVoterPayment: BaseWrapper_1.valueToBigNumber(e.returnValues.value)\n              };\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Retrieves VoterRewards for address at epochNumber.\n   * @param address The address to retrieve VoterRewards for.\n   * @param epochNumber The epoch to retrieve VoterRewards at.\n   * @param voterShare Optionally address' share of group rewards.\n   */\n\n\n  ElectionWrapper.prototype.getVoterRewards = function (address, epochNumber, voterShare) {\n    return __awaiter(this, void 0, void 0, function () {\n      var activeVoteShare, _a, _b, _c, groupVoterRewards, voterRewards;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _a = voterShare;\n            if (_a) return [3\n            /*break*/\n            , 3];\n            _b = this.getVoterShare;\n            _c = [address];\n            return [4\n            /*yield*/\n            , this.kit.getLastBlockNumberForEpoch(epochNumber)];\n\n          case 1:\n            return [4\n            /*yield*/\n            , _b.apply(this, _c.concat([_d.sent()]))];\n\n          case 2:\n            _a = _d.sent();\n            _d.label = 3;\n\n          case 3:\n            activeVoteShare = _a;\n            return [4\n            /*yield*/\n            , this.getGroupVoterRewards(epochNumber)];\n\n          case 4:\n            groupVoterRewards = _d.sent();\n            voterRewards = groupVoterRewards.filter(function (e) {\n              return address_1.normalizeAddress(e.group.address) in activeVoteShare;\n            });\n            return [2\n            /*return*/\n            , voterRewards.map(function (e) {\n              var group = address_1.normalizeAddress(e.group.address);\n              return {\n                address: address,\n                addressPayment: e.groupVoterPayment.times(activeVoteShare[group]),\n                group: e.group,\n                epochNumber: e.epochNumber\n              };\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Retrieves a voter's share of active votes.\n   * @param address The voter to retrieve share for.\n   * @param blockNumber The block to retrieve the voter's share at.\n   */\n\n\n  ElectionWrapper.prototype.getVoterShare = function (address, blockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var activeVoterVotes, voter, _i, _a, vote, group;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            activeVoterVotes = {};\n            return [4\n            /*yield*/\n            , this.getVoter(address, blockNumber)];\n\n          case 1:\n            voter = _b.sent();\n\n            for (_i = 0, _a = voter.votes; _i < _a.length; _i++) {\n              vote = _a[_i];\n              group = address_1.normalizeAddress(vote.group);\n              activeVoterVotes[group] = vote.active;\n            }\n\n            return [2\n            /*return*/\n            , async_1.concurrentValuesMap(10, activeVoterVotes, function (voterVotes, group) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var _a, _b;\n\n                return __generator(this, function (_c) {\n                  switch (_c.label) {\n                    case 0:\n                      _b = (_a = voterVotes).dividedBy;\n                      return [4\n                      /*yield*/\n                      , this.getActiveVotesForGroup(group, blockNumber)];\n\n                    case 1:\n                      return [2\n                      /*return*/\n                      , _b.apply(_a, [_c.sent()])];\n                  }\n                });\n              });\n            })];\n        }\n      });\n    });\n  };\n\n  return ElectionWrapper;\n}(BaseWrapper_1.BaseWrapper);\n\nexports.ElectionWrapper = ElectionWrapper;","map":{"version":3,"sources":["../../src/wrappers/Election.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar address_1 = require(\"@celo/base/lib/address\");\nvar async_1 = require(\"@celo/base/lib/async\");\nvar collections_1 = require(\"@celo/base/lib/collections\");\nvar connect_1 = require(\"@celo/connect\");\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nvar BaseWrapper_1 = require(\"./BaseWrapper\");\n/**\n * Contract for voting for validators and managing validator groups.\n */\nvar ElectionWrapper = /** @class */ (function (_super) {\n    __extends(ElectionWrapper, _super);\n    function ElectionWrapper() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * Returns the current election threshold.\n         * @returns Election threshold.\n         */\n        _this.electabilityThreshold = BaseWrapper_1.proxyCall(_this.contract.methods.getElectabilityThreshold, undefined, BaseWrapper_1.fixidityValueToBigNumber);\n        /**\n         * Gets a validator address from the validator set at the given block number.\n         * @param index Index of requested validator in the validator set.\n         * @param blockNumber Block number to retrieve the validator set from.\n         * @return Address of validator at the requested index.\n         */\n        _this.validatorSignerAddressFromSet = BaseWrapper_1.proxyCall(_this.contract.methods.validatorSignerAddressFromSet);\n        /**\n         * Gets a validator address from the current validator set.\n         * @param index Index of requested validator in the validator set.\n         * @return Address of validator at the requested index.\n         */\n        _this.validatorSignerAddressFromCurrentSet = BaseWrapper_1.proxyCall(_this.contract.methods.validatorSignerAddressFromCurrentSet, BaseWrapper_1.tupleParser(BaseWrapper_1.identity));\n        /**\n         * Gets the size of the validator set that must sign the given block number.\n         * @param blockNumber Block number to retrieve the validator set from.\n         * @return Size of the validator set.\n         */\n        _this.numberValidatorsInSet = BaseWrapper_1.proxyCall(_this.contract.methods.numberValidatorsInSet, undefined, BaseWrapper_1.valueToInt);\n        /**\n         * Gets the size of the current elected validator set.\n         * @return Size of the current elected validator set.\n         */\n        _this.numberValidatorsInCurrentSet = BaseWrapper_1.proxyCall(_this.contract.methods.numberValidatorsInCurrentSet, undefined, BaseWrapper_1.valueToInt);\n        /**\n         * Returns the total votes received across all groups.\n         * @return The total votes received across all groups.\n         */\n        _this.getTotalVotes = BaseWrapper_1.proxyCall(_this.contract.methods.getTotalVotes, undefined, BaseWrapper_1.valueToBigNumber);\n        /**\n         * Returns the current validator signers using the precompiles.\n         * @return List of current validator signers.\n         */\n        _this.getCurrentValidatorSigners = BaseWrapper_1.proxyCall(_this.contract.methods.getCurrentValidatorSigners);\n        /**\n         * Returns the total votes for `group` made by `account`.\n         * @param group The address of the validator group.\n         * @param account The address of the voting account.\n         * @return The total votes for `group` made by `account`.\n         */\n        _this.getTotalVotesForGroupByAccount = BaseWrapper_1.proxyCall(_this.contract.methods.getTotalVotesForGroupByAccount, undefined, BaseWrapper_1.valueToBigNumber);\n        /**\n         * Returns the groups that `account` has voted for.\n         * @param account The address of the account casting votes.\n         * @return The groups that `account` has voted for.\n         */\n        _this.getGroupsVotedForByAccount = BaseWrapper_1.proxyCall(_this.contract.methods.getGroupsVotedForByAccount);\n        _this._activate = BaseWrapper_1.proxySend(_this.kit, _this.contract.methods.activate);\n        return _this;\n    }\n    /**\n     * Returns the minimum and maximum number of validators that can be elected.\n     * @returns The minimum and maximum number of validators that can be elected.\n     */\n    ElectionWrapper.prototype.electableValidators = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, min, max;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this.contract.methods.electableValidators().call()];\n                    case 1:\n                        _a = _b.sent(), min = _a.min, max = _a.max;\n                        return [2 /*return*/, { min: BaseWrapper_1.valueToBigNumber(min), max: BaseWrapper_1.valueToBigNumber(max) }];\n                }\n            });\n        });\n    };\n    /**\n     * Returns the validator signers for block `blockNumber`.\n     * @param blockNumber Block number to retrieve signers for.\n     * @return Address of each signer in the validator set.\n     */\n    ElectionWrapper.prototype.getValidatorSigners = function (blockNumber) {\n        return __awaiter(this, void 0, void 0, function () {\n            var numValidators;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.numberValidatorsInSet(blockNumber)];\n                    case 1:\n                        numValidators = _a.sent();\n                        return [2 /*return*/, async_1.concurrentMap(10, collections_1.zeroRange(numValidators), function (i) {\n                                return _this.validatorSignerAddressFromSet(i, blockNumber);\n                            })];\n                }\n            });\n        });\n    };\n    /**\n     * Returns a list of elected validators with seats allocated to groups via the D'Hondt method.\n     * @return The list of elected validators.\n     * @dev See https://en.wikipedia.org/wiki/D%27Hondt_method#Allocation for more information.\n     */\n    ElectionWrapper.prototype.electValidatorSigners = function (min, max) {\n        return __awaiter(this, void 0, void 0, function () {\n            var config, minArg, maxArg;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!(min !== undefined || max !== undefined)) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.getConfig()];\n                    case 1:\n                        config = _a.sent();\n                        minArg = min === undefined ? config.electableValidators.min : min;\n                        maxArg = max === undefined ? config.electableValidators.max : max;\n                        return [2 /*return*/, this.contract.methods\n                                .electNValidatorSigners(minArg.toString(10), maxArg.toString(10))\n                                .call()];\n                    case 2: return [2 /*return*/, this.contract.methods.electValidatorSigners().call()];\n                }\n            });\n        });\n    };\n    /**\n     * Returns the total votes for `group`.\n     * @param group The address of the validator group.\n     * @return The total votes for `group`.\n     */\n    ElectionWrapper.prototype.getTotalVotesForGroup = function (group, blockNumber) {\n        return __awaiter(this, void 0, void 0, function () {\n            var votes;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.contract.methods.getTotalVotesForGroup(group).call({}, blockNumber)];\n                    case 1:\n                        votes = _a.sent();\n                        return [2 /*return*/, BaseWrapper_1.valueToBigNumber(votes)];\n                }\n            });\n        });\n    };\n    /**\n     * Returns the active votes for `group`.\n     * @param group The address of the validator group.\n     * @return The active votes for `group`.\n     */\n    ElectionWrapper.prototype.getActiveVotesForGroup = function (group, blockNumber) {\n        return __awaiter(this, void 0, void 0, function () {\n            var votes;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.contract.methods.getActiveVotesForGroup(group).call({}, blockNumber)];\n                    case 1:\n                        votes = _a.sent();\n                        return [2 /*return*/, BaseWrapper_1.valueToBigNumber(votes)];\n                }\n            });\n        });\n    };\n    ElectionWrapper.prototype.getVotesForGroupByAccount = function (account, group, blockNumber) {\n        return __awaiter(this, void 0, void 0, function () {\n            var pending, active;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.contract.methods\n                            .getPendingVotesForGroupByAccount(group, account)\n                            // @ts-ignore: Expected 0-1 arguments, but got 2\n                            .call({}, blockNumber)];\n                    case 1:\n                        pending = _a.sent();\n                        return [4 /*yield*/, this.contract.methods\n                                .getActiveVotesForGroupByAccount(group, account)\n                                // @ts-ignore: Expected 0-1 arguments, but got 2\n                                .call({}, blockNumber)];\n                    case 2:\n                        active = _a.sent();\n                        return [2 /*return*/, {\n                                group: group,\n                                pending: BaseWrapper_1.valueToBigNumber(pending),\n                                active: BaseWrapper_1.valueToBigNumber(active),\n                            }];\n                }\n            });\n        });\n    };\n    ElectionWrapper.prototype.getVoter = function (account, blockNumber) {\n        return __awaiter(this, void 0, void 0, function () {\n            var groups, votes;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.contract.methods\n                            .getGroupsVotedForByAccount(account)\n                            // @ts-ignore: Expected 0-1 arguments, but got 2\n                            .call({}, blockNumber)];\n                    case 1:\n                        groups = _a.sent();\n                        return [4 /*yield*/, async_1.concurrentMap(10, groups, function (g) {\n                                return _this.getVotesForGroupByAccount(account, g, blockNumber);\n                            })];\n                    case 2:\n                        votes = _a.sent();\n                        return [2 /*return*/, { address: account, votes: votes }];\n                }\n            });\n        });\n    };\n    /**\n     * Returns whether or not the account has any pending votes.\n     * @param account The address of the account casting votes.\n     * @return The groups that `account` has voted for.\n     */\n    ElectionWrapper.prototype.hasPendingVotes = function (account) {\n        return __awaiter(this, void 0, void 0, function () {\n            var groups, isPending;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.contract.methods.getGroupsVotedForByAccount(account).call()];\n                    case 1:\n                        groups = _a.sent();\n                        return [4 /*yield*/, Promise.all(groups.map(function (g) { return __awaiter(_this, void 0, void 0, function () {\n                                var _a;\n                                return __generator(this, function (_b) {\n                                    switch (_b.label) {\n                                        case 0:\n                                            _a = BaseWrapper_1.valueToBigNumber;\n                                            return [4 /*yield*/, this.contract.methods.getPendingVotesForGroupByAccount(g, account).call()];\n                                        case 1: return [2 /*return*/, _a.apply(void 0, [_b.sent()]).isGreaterThan(0)];\n                                    }\n                                });\n                            }); }))];\n                    case 2:\n                        isPending = _a.sent();\n                        return [2 /*return*/, isPending.some(function (a) { return a; })];\n                }\n            });\n        });\n    };\n    ElectionWrapper.prototype.hasActivatablePendingVotes = function (account) {\n        return __awaiter(this, void 0, void 0, function () {\n            var groups, isActivatable;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.contract.methods.getGroupsVotedForByAccount(account).call()];\n                    case 1:\n                        groups = _a.sent();\n                        return [4 /*yield*/, Promise.all(groups.map(function (g) { return _this.contract.methods.hasActivatablePendingVotes(account, g).call(); }))];\n                    case 2:\n                        isActivatable = _a.sent();\n                        return [2 /*return*/, isActivatable.some(function (a) { return a; })];\n                }\n            });\n        });\n    };\n    /**\n     * Returns current configuration parameters.\n     */\n    ElectionWrapper.prototype.getConfig = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, Promise.all([\n                            this.electableValidators(),\n                            this.electabilityThreshold(),\n                            this.contract.methods.maxNumGroupsVotedFor().call(),\n                            this.getTotalVotes(),\n                        ])];\n                    case 1:\n                        res = _a.sent();\n                        return [2 /*return*/, {\n                                electableValidators: res[0],\n                                electabilityThreshold: res[1],\n                                maxNumGroupsVotedFor: BaseWrapper_1.valueToBigNumber(res[2]),\n                                totalVotes: res[3],\n                                currentThreshold: res[3].multipliedBy(res[1]),\n                            }];\n                }\n            });\n        });\n    };\n    ElectionWrapper.prototype.getValidatorGroupVotes = function (address) {\n        return __awaiter(this, void 0, void 0, function () {\n            var votes, eligible, numVotesReceivable, accounts, name;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.contract.methods.getTotalVotesForGroup(address).call()];\n                    case 1:\n                        votes = _a.sent();\n                        return [4 /*yield*/, this.contract.methods.getGroupEligibility(address).call()];\n                    case 2:\n                        eligible = _a.sent();\n                        return [4 /*yield*/, this.contract.methods.getNumVotesReceivable(address).call()];\n                    case 3:\n                        numVotesReceivable = _a.sent();\n                        return [4 /*yield*/, this.kit.contracts.getAccounts()];\n                    case 4:\n                        accounts = _a.sent();\n                        return [4 /*yield*/, accounts.getName(address)];\n                    case 5:\n                        name = (_a.sent()) || '';\n                        return [2 /*return*/, {\n                                address: address,\n                                name: name,\n                                votes: BaseWrapper_1.valueToBigNumber(votes),\n                                capacity: BaseWrapper_1.valueToBigNumber(numVotesReceivable).minus(votes),\n                                eligible: eligible,\n                            }];\n                }\n            });\n        });\n    };\n    /**\n     * Returns the current registered validator groups and their total votes and eligibility.\n     */\n    ElectionWrapper.prototype.getValidatorGroupsVotes = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var validators, groups;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.kit.contracts.getValidators()];\n                    case 1:\n                        validators = _a.sent();\n                        return [4 /*yield*/, validators.getRegisteredValidatorGroupsAddresses()];\n                    case 2:\n                        groups = _a.sent();\n                        return [2 /*return*/, async_1.concurrentMap(5, groups, function (g) { return _this.getValidatorGroupVotes(g); })];\n                }\n            });\n        });\n    };\n    /**\n     * Activates any activatable pending votes.\n     * @param account The account with pending votes to activate.\n     */\n    ElectionWrapper.prototype.activate = function (account) {\n        return __awaiter(this, void 0, void 0, function () {\n            var groups, isActivatable, groupsActivatable;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.contract.methods.getGroupsVotedForByAccount(account).call()];\n                    case 1:\n                        groups = _a.sent();\n                        return [4 /*yield*/, Promise.all(groups.map(function (g) { return _this.contract.methods.hasActivatablePendingVotes(account, g).call(); }))];\n                    case 2:\n                        isActivatable = _a.sent();\n                        groupsActivatable = groups.filter(function (_, i) { return isActivatable[i]; });\n                        return [2 /*return*/, groupsActivatable.map(function (g) { return _this._activate(g); })];\n                }\n            });\n        });\n    };\n    ElectionWrapper.prototype.revokePending = function (account, group, value) {\n        return __awaiter(this, void 0, void 0, function () {\n            var groups, index, _a, lesser, greater;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this.contract.methods.getGroupsVotedForByAccount(account).call()];\n                    case 1:\n                        groups = _b.sent();\n                        index = address_1.findAddressIndex(group, groups);\n                        return [4 /*yield*/, this.findLesserAndGreaterAfterVote(group, value.times(-1))];\n                    case 2:\n                        _a = _b.sent(), lesser = _a.lesser, greater = _a.greater;\n                        return [2 /*return*/, connect_1.toTransactionObject(this.kit.connection, this.contract.methods.revokePending(group, value.toFixed(), lesser, greater, index))];\n                }\n            });\n        });\n    };\n    ElectionWrapper.prototype.revokeActive = function (account, group, value) {\n        return __awaiter(this, void 0, void 0, function () {\n            var groups, index, _a, lesser, greater;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this.contract.methods.getGroupsVotedForByAccount(account).call()];\n                    case 1:\n                        groups = _b.sent();\n                        index = address_1.findAddressIndex(group, groups);\n                        return [4 /*yield*/, this.findLesserAndGreaterAfterVote(group, value.times(-1))];\n                    case 2:\n                        _a = _b.sent(), lesser = _a.lesser, greater = _a.greater;\n                        return [2 /*return*/, connect_1.toTransactionObject(this.kit.connection, this.contract.methods.revokeActive(group, value.toFixed(), lesser, greater, index))];\n                }\n            });\n        });\n    };\n    ElectionWrapper.prototype.revoke = function (account, group, value) {\n        return __awaiter(this, void 0, void 0, function () {\n            var vote, txos, pendingValue, _a, _b, activeValue, _c, _d;\n            return __generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0: return [4 /*yield*/, this.getVotesForGroupByAccount(account, group)];\n                    case 1:\n                        vote = _e.sent();\n                        if (value.gt(vote.pending.plus(vote.active))) {\n                            throw new Error(\"can't revoke more votes for \" + group + \" than have been made by \" + account);\n                        }\n                        txos = [];\n                        pendingValue = bignumber_js_1.default.minimum(vote.pending, value);\n                        if (!!pendingValue.isZero()) return [3 /*break*/, 3];\n                        _b = (_a = txos).push;\n                        return [4 /*yield*/, this.revokePending(account, group, pendingValue)];\n                    case 2:\n                        _b.apply(_a, [_e.sent()]);\n                        _e.label = 3;\n                    case 3:\n                        if (!pendingValue.lt(value)) return [3 /*break*/, 5];\n                        activeValue = value.minus(pendingValue);\n                        _d = (_c = txos).push;\n                        return [4 /*yield*/, this.revokeActive(account, group, activeValue)];\n                    case 4:\n                        _d.apply(_c, [_e.sent()]);\n                        _e.label = 5;\n                    case 5: return [2 /*return*/, txos];\n                }\n            });\n        });\n    };\n    /**\n     * Increments the number of total and pending votes for `group`.\n     * @param validatorGroup The validator group to vote for.\n     * @param value The amount of gold to use to vote.\n     */\n    ElectionWrapper.prototype.vote = function (validatorGroup, value) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, lesser, greater;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this.findLesserAndGreaterAfterVote(validatorGroup, value)];\n                    case 1:\n                        _a = _b.sent(), lesser = _a.lesser, greater = _a.greater;\n                        return [2 /*return*/, connect_1.toTransactionObject(this.kit.connection, this.contract.methods.vote(validatorGroup, value.toFixed(), lesser, greater))];\n                }\n            });\n        });\n    };\n    /**\n     * Returns the current eligible validator groups and their total votes.\n     */\n    ElectionWrapper.prototype.getEligibleValidatorGroupsVotes = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.contract.methods.getTotalVotesForEligibleValidatorGroups().call()];\n                    case 1:\n                        res = _a.sent();\n                        return [2 /*return*/, collections_1.zip(function (a, b) { return ({\n                                address: a,\n                                name: '',\n                                votes: new bignumber_js_1.default(b),\n                                capacity: new bignumber_js_1.default(0),\n                                eligible: true,\n                            }); }, res[0], res[1])];\n                }\n            });\n        });\n    };\n    ElectionWrapper.prototype.findLesserAndGreaterAfterVote = function (votedGroup, voteWeight) {\n        return __awaiter(this, void 0, void 0, function () {\n            var currentVotes, selectedGroup, voteTotal, greaterKey, lesserKey, _i, currentVotes_1, vote;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getEligibleValidatorGroupsVotes()];\n                    case 1:\n                        currentVotes = _a.sent();\n                        selectedGroup = currentVotes.find(function (votes) { return address_1.eqAddress(votes.address, votedGroup); });\n                        voteTotal = selectedGroup ? selectedGroup.votes.plus(voteWeight) : voteWeight;\n                        greaterKey = address_1.NULL_ADDRESS;\n                        lesserKey = address_1.NULL_ADDRESS;\n                        // This leverages the fact that the currentVotes are already sorted from\n                        // greatest to lowest value\n                        for (_i = 0, currentVotes_1 = currentVotes; _i < currentVotes_1.length; _i++) {\n                            vote = currentVotes_1[_i];\n                            if (!address_1.eqAddress(vote.address, votedGroup)) {\n                                if (vote.votes.isLessThanOrEqualTo(voteTotal)) {\n                                    lesserKey = vote.address;\n                                    break;\n                                }\n                                greaterKey = vote.address;\n                            }\n                        }\n                        return [2 /*return*/, { lesser: lesserKey, greater: greaterKey }];\n                }\n            });\n        });\n    };\n    /**\n     * Retrieves the set of validatorsparticipating in BFT at epochNumber.\n     * @param epochNumber The epoch to retrieve the elected validator set at.\n     */\n    ElectionWrapper.prototype.getElectedValidators = function (epochNumber) {\n        return __awaiter(this, void 0, void 0, function () {\n            var blockNumber, signers, validators;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.kit.getFirstBlockNumberForEpoch(epochNumber)];\n                    case 1:\n                        blockNumber = _a.sent();\n                        return [4 /*yield*/, this.getValidatorSigners(blockNumber)];\n                    case 2:\n                        signers = _a.sent();\n                        return [4 /*yield*/, this.kit.contracts.getValidators()];\n                    case 3:\n                        validators = _a.sent();\n                        return [2 /*return*/, async_1.concurrentMap(10, signers, function (addr) { return validators.getValidatorFromSigner(addr); })];\n                }\n            });\n        });\n    };\n    /**\n     * Retrieves GroupVoterRewards at epochNumber.\n     * @param epochNumber The epoch to retrieve GroupVoterRewards at.\n     */\n    ElectionWrapper.prototype.getGroupVoterRewards = function (epochNumber) {\n        return __awaiter(this, void 0, void 0, function () {\n            var blockNumber, events, validators, validatorGroup;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.kit.getLastBlockNumberForEpoch(epochNumber)];\n                    case 1:\n                        blockNumber = _a.sent();\n                        return [4 /*yield*/, this.getPastEvents('EpochRewardsDistributedToVoters', {\n                                fromBlock: blockNumber,\n                                toBlock: blockNumber,\n                            })];\n                    case 2:\n                        events = _a.sent();\n                        return [4 /*yield*/, this.kit.contracts.getValidators()];\n                    case 3:\n                        validators = _a.sent();\n                        return [4 /*yield*/, async_1.concurrentMap(10, events, function (e) {\n                                return validators.getValidatorGroup(e.returnValues.group, false);\n                            })];\n                    case 4:\n                        validatorGroup = _a.sent();\n                        return [2 /*return*/, events.map(function (e, index) { return ({\n                                epochNumber: epochNumber,\n                                group: validatorGroup[index],\n                                groupVoterPayment: BaseWrapper_1.valueToBigNumber(e.returnValues.value),\n                            }); })];\n                }\n            });\n        });\n    };\n    /**\n     * Retrieves VoterRewards for address at epochNumber.\n     * @param address The address to retrieve VoterRewards for.\n     * @param epochNumber The epoch to retrieve VoterRewards at.\n     * @param voterShare Optionally address' share of group rewards.\n     */\n    ElectionWrapper.prototype.getVoterRewards = function (address, epochNumber, voterShare) {\n        return __awaiter(this, void 0, void 0, function () {\n            var activeVoteShare, _a, _b, _c, groupVoterRewards, voterRewards;\n            return __generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        _a = voterShare;\n                        if (_a) return [3 /*break*/, 3];\n                        _b = this.getVoterShare;\n                        _c = [address];\n                        return [4 /*yield*/, this.kit.getLastBlockNumberForEpoch(epochNumber)];\n                    case 1: return [4 /*yield*/, _b.apply(this, _c.concat([_d.sent()]))];\n                    case 2:\n                        _a = (_d.sent());\n                        _d.label = 3;\n                    case 3:\n                        activeVoteShare = _a;\n                        return [4 /*yield*/, this.getGroupVoterRewards(epochNumber)];\n                    case 4:\n                        groupVoterRewards = _d.sent();\n                        voterRewards = groupVoterRewards.filter(function (e) { return address_1.normalizeAddress(e.group.address) in activeVoteShare; });\n                        return [2 /*return*/, voterRewards.map(function (e) {\n                                var group = address_1.normalizeAddress(e.group.address);\n                                return {\n                                    address: address,\n                                    addressPayment: e.groupVoterPayment.times(activeVoteShare[group]),\n                                    group: e.group,\n                                    epochNumber: e.epochNumber,\n                                };\n                            })];\n                }\n            });\n        });\n    };\n    /**\n     * Retrieves a voter's share of active votes.\n     * @param address The voter to retrieve share for.\n     * @param blockNumber The block to retrieve the voter's share at.\n     */\n    ElectionWrapper.prototype.getVoterShare = function (address, blockNumber) {\n        return __awaiter(this, void 0, void 0, function () {\n            var activeVoterVotes, voter, _i, _a, vote, group;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        activeVoterVotes = {};\n                        return [4 /*yield*/, this.getVoter(address, blockNumber)];\n                    case 1:\n                        voter = _b.sent();\n                        for (_i = 0, _a = voter.votes; _i < _a.length; _i++) {\n                            vote = _a[_i];\n                            group = address_1.normalizeAddress(vote.group);\n                            activeVoterVotes[group] = vote.active;\n                        }\n                        return [2 /*return*/, async_1.concurrentValuesMap(10, activeVoterVotes, function (voterVotes, group) { return __awaiter(_this, void 0, void 0, function () { var _a, _b; return __generator(this, function (_c) {\n                                switch (_c.label) {\n                                    case 0:\n                                        _b = (_a = voterVotes).dividedBy;\n                                        return [4 /*yield*/, this.getActiveVotesForGroup(group, blockNumber)];\n                                    case 1: return [2 /*return*/, _b.apply(_a, [_c.sent()])];\n                                }\n                            }); }); })];\n                }\n            });\n        });\n    };\n    return ElectionWrapper;\n}(BaseWrapper_1.BaseWrapper));\nexports.ElectionWrapper = ElectionWrapper;\n//# sourceMappingURL=Election.js.map"]},"metadata":{},"sourceType":"script"}