{"ast":null,"code":"import { ChainId, Token } from '@ubeswap/sdk';\nimport { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport sortByListPriority from 'utils/listSort';\nimport UNSUPPORTED_TOKEN_LIST from '../../constants/tokenLists/uniswap-v2-unsupported.tokenlist.json';\nimport { UNSUPPORTED_LIST_URLS } from './../../constants/lists';\nimport DEFAULT_TOKEN_LIST from './ubeswap-default.tokenlist.json';\n\n/**\n * Token instances created from token info.\n */\nexport class WrappedTokenInfo extends Token {\n  constructor(tokenInfo, tags) {\n    super(tokenInfo.chainId, tokenInfo.address, tokenInfo.decimals, tokenInfo.symbol, tokenInfo.name);\n    this.tokenInfo = void 0;\n    this.tags = void 0;\n    this.tokenInfo = tokenInfo;\n    this.tags = tags;\n  }\n\n  get logoURI() {\n    return this.tokenInfo.logoURI;\n  }\n\n}\n\n/**\n * An empty result, useful as a default.\n */\nconst EMPTY_LIST = {\n  [ChainId.MAINNET]: {},\n  [ChainId.ALFAJORES]: {},\n  [ChainId.BAKLAVA]: {}\n};\nconst listCache = typeof WeakMap !== 'undefined' ? new WeakMap() : null;\nexport function listToTokenMap(list) {\n  const result = listCache === null || listCache === void 0 ? void 0 : listCache.get(list);\n  if (result) return result;\n  const map = list.tokens.reduce((tokenMap, tokenInfo) => {\n    var _tokenInfo$tags$map$f, _tokenInfo$tags, _tokenInfo$tags$map, _tokenMap$token$chain;\n\n    const tags = (_tokenInfo$tags$map$f = (_tokenInfo$tags = tokenInfo.tags) === null || _tokenInfo$tags === void 0 ? void 0 : (_tokenInfo$tags$map = _tokenInfo$tags.map(tagId => {\n      var _list$tags;\n\n      if (!((_list$tags = list.tags) === null || _list$tags === void 0 ? void 0 : _list$tags[tagId])) return undefined;\n      return { ...list.tags[tagId],\n        id: tagId\n      };\n    })) === null || _tokenInfo$tags$map === void 0 ? void 0 : _tokenInfo$tags$map.filter(x => Boolean(x))) !== null && _tokenInfo$tags$map$f !== void 0 ? _tokenInfo$tags$map$f : [];\n    const token = new WrappedTokenInfo(tokenInfo, tags);\n    if (((_tokenMap$token$chain = tokenMap[token.chainId]) === null || _tokenMap$token$chain === void 0 ? void 0 : _tokenMap$token$chain[token.address]) !== undefined) throw Error('Duplicate tokens.');\n    return { ...tokenMap,\n      [token.chainId]: { ...tokenMap[token.chainId],\n        [token.address]: {\n          token,\n          list: list\n        }\n      }\n    };\n  }, { ...EMPTY_LIST\n  });\n  listCache === null || listCache === void 0 ? void 0 : listCache.set(list, map);\n  return map;\n}\nexport function useAllLists() {\n  return useSelector(state => state.lists.byUrl);\n}\n\nfunction combineMaps(map1, map2) {\n  return {\n    [ChainId.MAINNET]: { ...map1[ChainId.MAINNET],\n      ...map2[ChainId.MAINNET]\n    },\n    [ChainId.ALFAJORES]: { ...map1[ChainId.ALFAJORES],\n      ...map2[ChainId.ALFAJORES]\n    },\n    [ChainId.BAKLAVA]: { ...map1[ChainId.BAKLAVA],\n      ...map2[ChainId.BAKLAVA]\n    }\n  };\n} // merge tokens contained within lists from urls\n\n\nfunction useCombinedTokenMapFromUrls(urls) {\n  const lists = useAllLists();\n  return useMemo(() => {\n    if (!urls) return EMPTY_LIST;\n    return urls.slice() // sort by priority so top priority goes last\n    .sort(sortByListPriority).reduce((allTokens, currentUrl) => {\n      var _lists$currentUrl;\n\n      const current = (_lists$currentUrl = lists[currentUrl]) === null || _lists$currentUrl === void 0 ? void 0 : _lists$currentUrl.current;\n      if (!current) return allTokens;\n\n      try {\n        const newTokens = Object.assign(listToTokenMap(current));\n        return combineMaps(allTokens, newTokens);\n      } catch (error) {\n        console.error('Could not show token list due to error', error);\n        return allTokens;\n      }\n    }, EMPTY_LIST);\n  }, [lists, urls]);\n} // filter out unsupported lists\n\n\nexport function useActiveListUrls() {\n  var _useSelector;\n\n  return (_useSelector = useSelector(state => state.lists.activeListUrls)) === null || _useSelector === void 0 ? void 0 : _useSelector.filter(url => !UNSUPPORTED_LIST_URLS.includes(url));\n}\nexport function useInactiveListUrls() {\n  const lists = useAllLists();\n  const allActiveListUrls = useActiveListUrls();\n  return Object.keys(lists).filter(url => !(allActiveListUrls === null || allActiveListUrls === void 0 ? void 0 : allActiveListUrls.includes(url)) && !UNSUPPORTED_LIST_URLS.includes(url));\n} // get all the tokens from active lists, combine with local default tokens\n\nexport function useCombinedActiveList() {\n  const activeListUrls = useActiveListUrls();\n  const activeTokens = useCombinedTokenMapFromUrls(activeListUrls);\n  const defaultTokenMap = listToTokenMap(DEFAULT_TOKEN_LIST);\n  return combineMaps(activeTokens, defaultTokenMap);\n} // all tokens from inactive lists\n\nexport function useCombinedInactiveList() {\n  const allInactiveListUrls = useInactiveListUrls();\n  return useCombinedTokenMapFromUrls(allInactiveListUrls);\n} // used to hide warnings on import for default tokens\n\nexport function useDefaultTokenList() {\n  return listToTokenMap(DEFAULT_TOKEN_LIST);\n} // list of tokens not supported on interface, used to show warnings and prevent swaps and adds\n\nexport function useUnsupportedTokenList() {\n  // get hard coded unsupported tokens\n  const localUnsupportedListMap = listToTokenMap(UNSUPPORTED_TOKEN_LIST); // get any loaded unsupported tokens\n\n  const loadedUnsupportedListMap = useCombinedTokenMapFromUrls(UNSUPPORTED_LIST_URLS); // format into one token address map\n\n  return combineMaps(localUnsupportedListMap, loadedUnsupportedListMap);\n}\nexport function useIsListActive(url) {\n  const activeListUrls = useActiveListUrls();\n  return Boolean(activeListUrls === null || activeListUrls === void 0 ? void 0 : activeListUrls.includes(url));\n}","map":{"version":3,"sources":["/Users/khoiplus/Desktop/celopad/cpadswaptest/src/state/lists/hooks.ts"],"names":["ChainId","Token","useMemo","useSelector","sortByListPriority","UNSUPPORTED_TOKEN_LIST","UNSUPPORTED_LIST_URLS","DEFAULT_TOKEN_LIST","WrappedTokenInfo","constructor","tokenInfo","tags","chainId","address","decimals","symbol","name","logoURI","EMPTY_LIST","MAINNET","ALFAJORES","BAKLAVA","listCache","WeakMap","listToTokenMap","list","result","get","map","tokens","reduce","tokenMap","tagId","undefined","id","filter","x","Boolean","token","Error","set","useAllLists","state","lists","byUrl","combineMaps","map1","map2","useCombinedTokenMapFromUrls","urls","slice","sort","allTokens","currentUrl","current","newTokens","Object","assign","error","console","useActiveListUrls","activeListUrls","url","includes","useInactiveListUrls","allActiveListUrls","keys","useCombinedActiveList","activeTokens","defaultTokenMap","useCombinedInactiveList","allInactiveListUrls","useDefaultTokenList","useUnsupportedTokenList","localUnsupportedListMap","loadedUnsupportedListMap","useIsListActive"],"mappings":"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","sourcesContent":["import { ChainId, Token } from '@ubeswap/sdk'\nimport { Tags, TokenInfo, TokenList } from '@uniswap/token-lists'\nimport { useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport sortByListPriority from 'utils/listSort'\nimport UNSUPPORTED_TOKEN_LIST from '../../constants/tokenLists/uniswap-v2-unsupported.tokenlist.json'\nimport { AppState } from '../index'\nimport { UNSUPPORTED_LIST_URLS } from './../../constants/lists'\nimport DEFAULT_TOKEN_LIST from './ubeswap-default.tokenlist.json'\n\ntype TagDetails = Tags[keyof Tags]\nexport interface TagInfo extends TagDetails {\n  id: string\n}\n\n/**\n * Token instances created from token info.\n */\nexport class WrappedTokenInfo extends Token {\n  public readonly tokenInfo: TokenInfo\n  public readonly tags: TagInfo[]\n  constructor(tokenInfo: TokenInfo, tags: TagInfo[]) {\n    super(tokenInfo.chainId, tokenInfo.address, tokenInfo.decimals, tokenInfo.symbol, tokenInfo.name)\n    this.tokenInfo = tokenInfo\n    this.tags = tags\n  }\n  public get logoURI(): string | undefined {\n    return this.tokenInfo.logoURI\n  }\n}\n\nexport type TokenAddressMap = Readonly<{\n  [chainId: number]: Readonly<{\n    [tokenAddress: string]: { token: WrappedTokenInfo; list: TokenList }\n  }>\n}>\n\n/**\n * An empty result, useful as a default.\n */\nconst EMPTY_LIST: TokenAddressMap = {\n  [ChainId.MAINNET]: {},\n  [ChainId.ALFAJORES]: {},\n  [ChainId.BAKLAVA]: {}\n}\n\nconst listCache: WeakMap<TokenList, TokenAddressMap> | null =\n  typeof WeakMap !== 'undefined' ? new WeakMap<TokenList, TokenAddressMap>() : null\n\nexport function listToTokenMap(list: TokenList): TokenAddressMap {\n  const result = listCache?.get(list)\n  if (result) return result\n\n  const map = list.tokens.reduce<TokenAddressMap>(\n    (tokenMap, tokenInfo) => {\n      const tags: TagInfo[] =\n        tokenInfo.tags\n          ?.map(tagId => {\n            if (!list.tags?.[tagId]) return undefined\n            return { ...list.tags[tagId], id: tagId }\n          })\n          ?.filter((x): x is TagInfo => Boolean(x)) ?? []\n      const token = new WrappedTokenInfo(tokenInfo, tags)\n      if (tokenMap[token.chainId]?.[token.address] !== undefined) throw Error('Duplicate tokens.')\n      return {\n        ...tokenMap,\n        [token.chainId]: {\n          ...tokenMap[token.chainId],\n          [token.address]: {\n            token,\n            list: list\n          }\n        }\n      }\n    },\n    { ...EMPTY_LIST }\n  )\n  listCache?.set(list, map)\n  return map\n}\n\nexport function useAllLists(): {\n  readonly [url: string]: {\n    readonly current: TokenList | null\n    readonly pendingUpdate: TokenList | null\n    readonly loadingRequestId: string | null\n    readonly error: string | null\n  }\n} {\n  return useSelector<AppState, AppState['lists']['byUrl']>(state => state.lists.byUrl)\n}\n\nfunction combineMaps(map1: TokenAddressMap, map2: TokenAddressMap): TokenAddressMap {\n  return {\n    [ChainId.MAINNET]: { ...map1[ChainId.MAINNET], ...map2[ChainId.MAINNET] },\n    [ChainId.ALFAJORES]: { ...map1[ChainId.ALFAJORES], ...map2[ChainId.ALFAJORES] },\n    [ChainId.BAKLAVA]: { ...map1[ChainId.BAKLAVA], ...map2[ChainId.BAKLAVA] }\n  }\n}\n\n// merge tokens contained within lists from urls\nfunction useCombinedTokenMapFromUrls(urls: string[] | undefined): TokenAddressMap {\n  const lists = useAllLists()\n\n  return useMemo(() => {\n    if (!urls) return EMPTY_LIST\n\n    return (\n      urls\n        .slice()\n        // sort by priority so top priority goes last\n        .sort(sortByListPriority)\n        .reduce((allTokens, currentUrl) => {\n          const current = lists[currentUrl]?.current\n          if (!current) return allTokens\n          try {\n            const newTokens = Object.assign(listToTokenMap(current))\n            return combineMaps(allTokens, newTokens)\n          } catch (error) {\n            console.error('Could not show token list due to error', error)\n            return allTokens\n          }\n        }, EMPTY_LIST)\n    )\n  }, [lists, urls])\n}\n\n// filter out unsupported lists\nexport function useActiveListUrls(): string[] | undefined {\n  return useSelector<AppState, AppState['lists']['activeListUrls']>(state => state.lists.activeListUrls)?.filter(\n    url => !UNSUPPORTED_LIST_URLS.includes(url)\n  )\n}\n\nexport function useInactiveListUrls(): string[] {\n  const lists = useAllLists()\n  const allActiveListUrls = useActiveListUrls()\n  return Object.keys(lists).filter(url => !allActiveListUrls?.includes(url) && !UNSUPPORTED_LIST_URLS.includes(url))\n}\n\n// get all the tokens from active lists, combine with local default tokens\nexport function useCombinedActiveList(): TokenAddressMap {\n  const activeListUrls = useActiveListUrls()\n  const activeTokens = useCombinedTokenMapFromUrls(activeListUrls)\n  const defaultTokenMap = listToTokenMap(DEFAULT_TOKEN_LIST)\n  return combineMaps(activeTokens, defaultTokenMap)\n}\n\n// all tokens from inactive lists\nexport function useCombinedInactiveList(): TokenAddressMap {\n  const allInactiveListUrls: string[] = useInactiveListUrls()\n  return useCombinedTokenMapFromUrls(allInactiveListUrls)\n}\n\n// used to hide warnings on import for default tokens\nexport function useDefaultTokenList(): TokenAddressMap {\n  return listToTokenMap(DEFAULT_TOKEN_LIST)\n}\n\n// list of tokens not supported on interface, used to show warnings and prevent swaps and adds\nexport function useUnsupportedTokenList(): TokenAddressMap {\n  // get hard coded unsupported tokens\n  const localUnsupportedListMap = listToTokenMap(UNSUPPORTED_TOKEN_LIST)\n\n  // get any loaded unsupported tokens\n  const loadedUnsupportedListMap = useCombinedTokenMapFromUrls(UNSUPPORTED_LIST_URLS)\n\n  // format into one token address map\n  return combineMaps(localUnsupportedListMap, loadedUnsupportedListMap)\n}\n\nexport function useIsListActive(url: string): boolean {\n  const activeListUrls = useActiveListUrls()\n  return Boolean(activeListUrls?.includes(url))\n}\n"]},"metadata":{},"sourceType":"module"}