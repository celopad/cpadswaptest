{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nvar BaseWrapper_1 = require(\"./BaseWrapper\");\n/**\n * Contract that allows to exchange StableToken for GoldToken and vice versa\n * using a Constant Product Market Maker Model\n */\n\n\nvar ExchangeWrapper =\n/** @class */\nfunction (_super) {\n  __extends(ExchangeWrapper, _super);\n\n  function ExchangeWrapper() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * Query spread parameter\n     * @returns Current spread charged on exchanges\n     */\n\n\n    _this.spread = BaseWrapper_1.proxyCall(_this.contract.methods.spread, undefined, BaseWrapper_1.fixidityValueToBigNumber);\n    /**\n     * Query reserve fraction parameter\n     * @returns Current fraction to commit to the gold bucket\n     */\n\n    _this.reserveFraction = BaseWrapper_1.proxyCall(_this.contract.methods.reserveFraction, undefined, BaseWrapper_1.fixidityValueToBigNumber);\n    /**\n     * Query update frequency parameter\n     * @returns The time period that needs to elapse between bucket\n     * updates\n     */\n\n    _this.updateFrequency = BaseWrapper_1.proxyCall(_this.contract.methods.updateFrequency, undefined, BaseWrapper_1.valueToBigNumber);\n    /**\n     * Query minimum reports parameter\n     * @returns The minimum number of fresh reports that need to be\n     * present in the oracle to update buckets\n     * commit to the gold bucket\n     */\n\n    _this.minimumReports = BaseWrapper_1.proxyCall(_this.contract.methods.minimumReports, undefined, BaseWrapper_1.valueToBigNumber);\n    /**\n     * Query last bucket update\n     * @returns The timestamp of the last time exchange buckets were updated.\n     */\n\n    _this.lastBucketUpdate = BaseWrapper_1.proxyCall(_this.contract.methods.lastBucketUpdate, undefined, BaseWrapper_1.valueToBigNumber);\n    /**\n     * DEPRECATED: use function sell\n     * Exchanges sellAmount of sellToken in exchange for at least minBuyAmount of buyToken\n     * Requires the sellAmount to have been approved to the exchange\n     * @param sellAmount The amount of sellToken the user is selling to the exchange\n     * @param minBuyAmount The minimum amount of buyToken the user has to receive for this\n     * transaction to succeed\n     * @param sellGold `true` if gold is the sell token\n     * @return The amount of buyToken that was transfered\n     */\n\n    _this.exchange = BaseWrapper_1.proxySend(_this.kit, _this.contract.methods.exchange, BaseWrapper_1.tupleParser(BaseWrapper_1.valueToString, BaseWrapper_1.valueToString, BaseWrapper_1.identity));\n    /**\n     * Sells sellAmount of sellToken in exchange for at least minBuyAmount of buyToken\n     * Requires the sellAmount to have been approved to the exchange\n     * @param sellAmount The amount of sellToken the user is selling to the exchange\n     * @param minBuyAmount The minimum amount of buyToken the user has to receive for this\n     * transaction to succeed\n     * @param sellGold `true` if gold is the sell token\n     * @return The amount of buyToken that was transfered\n     */\n\n    _this.sell = BaseWrapper_1.proxySend(_this.kit, _this.contract.methods.sell, BaseWrapper_1.tupleParser(BaseWrapper_1.valueToString, BaseWrapper_1.valueToString, BaseWrapper_1.identity));\n    /**\n     * Sells sellAmount of sellToken in exchange for at least minBuyAmount of buyToken\n     * Requires the sellAmount to have been approved to the exchange\n     * @param buyAmount The amount of sellToken the user is selling to the exchange\n     * @param maxSellAmount The maximum amount of sellToken the user will sell for this\n     * transaction to succeed\n     * @param buyGold `true` if gold is the buy token\n     * @return The amount of buyToken that was transfered\n     */\n\n    _this.buy = BaseWrapper_1.proxySend(_this.kit, _this.contract.methods.buy, BaseWrapper_1.tupleParser(BaseWrapper_1.valueToString, BaseWrapper_1.valueToString, BaseWrapper_1.identity));\n    /**\n     * Returns the buy token and sell token bucket sizes, in order. The ratio of\n     * the two also represents the exchange rate between the two.\n     * @param sellGold `true` if gold is the sell token\n     * @return [buyTokenBucket, sellTokenBucket]\n     */\n\n    _this.getBuyAndSellBuckets = BaseWrapper_1.proxyCall(_this.contract.methods.getBuyAndSellBuckets, undefined, function (callRes) {\n      return [BaseWrapper_1.valueToBigNumber(callRes[0]), BaseWrapper_1.valueToBigNumber(callRes[1])];\n    });\n    /**\n     * Sell amount of CELO in exchange for at least minUsdAmount of cUsd\n     * Requires the amount to have been approved to the exchange\n     * @param amount The amount of CELO the user is selling to the exchange\n     * @param minUsdAmount The minimum amount of cUsd the user has to receive for this\n     * transaction to succeed\n     */\n\n    _this.sellGold = function (amount, minUSDAmount) {\n      return _this.sell(amount, minUSDAmount, true);\n    };\n    /**\n     * Sell amount of cUsd in exchange for at least minGoldAmount of CELO\n     * Requires the amount to have been approved to the exchange\n     * @param amount The amount of cUsd the user is selling to the exchange\n     * @param minGoldAmount The minimum amount of CELO the user has to receive for this\n     * transaction to succeed\n     */\n\n\n    _this.sellDollar = function (amount, minGoldAmount) {\n      return _this.sell(amount, minGoldAmount, false);\n    };\n    /**\n     * Buy amount of CELO in exchange for at most maxUsdAmount of cUsd\n     * Requires the amount to have been approved to the exchange\n     * @param amount The amount of CELO the user is buying from the exchange\n     * @param maxUsdAmount The maximum amount of cUsd the user will pay for this\n     * transaction to succeed\n     */\n\n\n    _this.buyGold = function (amount, maxUSDAmount) {\n      return _this.buy(amount, maxUSDAmount, true);\n    };\n    /**\n     * Buy amount of cUsd in exchange for at least minGoldAmount of CELO\n     * Requires the amount to have been approved to the exchange\n     * @param amount The amount of cUsd the user is selling to the exchange\n     * @param maxGoldAmount The maximum amount of CELO the user will pay for this\n     * transaction to succeed\n     */\n\n\n    _this.buyDollar = function (amount, maxGoldAmount) {\n      return _this.buy(amount, maxGoldAmount, false);\n    };\n    /**\n     * Returns the amount of CELO a user would get for sellAmount of cUsd\n     * @param sellAmount The amount of cUsd the user is selling to the exchange\n     * @return The corresponding CELO amount.\n     */\n\n\n    _this.quoteUsdSell = function (sellAmount) {\n      return _this.getBuyTokenAmount(sellAmount, false);\n    };\n    /**\n     * Returns the amount of cUsd a user would get for sellAmount of CELO\n     * @param sellAmount The amount of CELO the user is selling to the exchange\n     * @return The corresponding cUsd amount.\n     */\n\n\n    _this.quoteGoldSell = function (sellAmount) {\n      return _this.getBuyTokenAmount(sellAmount, true);\n    };\n    /**\n     * Returns the amount of CELO a user would need to exchange to receive buyAmount of\n     * cUsd.\n     * @param buyAmount The amount of cUsd the user would like to purchase.\n     * @return The corresponding CELO amount.\n     */\n\n\n    _this.quoteUsdBuy = function (buyAmount) {\n      return _this.getSellTokenAmount(buyAmount, false);\n    };\n    /**\n     * Returns the amount of cUsd a user would need to exchange to receive buyAmount of\n     * CELO.\n     * @param buyAmount The amount of CELO the user would like to purchase.\n     * @return The corresponding cUsd amount.\n     */\n\n\n    _this.quoteGoldBuy = function (buyAmount) {\n      return _this.getSellTokenAmount(buyAmount, true);\n    };\n    /**\n     * Returns the exchange rate for cUsd estimated at the buyAmount\n     * @param buyAmount The amount of cUsd in wei to estimate the exchange rate at\n     * @return The exchange rate (number of CELO received for one cUsd)\n     */\n\n\n    _this.getUsdExchangeRate = function (buyAmount) {\n      return _this.getExchangeRate(buyAmount, false);\n    };\n    /**\n     * Returns the exchange rate for CELO estimated at the buyAmount\n     * @param buyAmount The amount of CELO in wei to estimate the exchange rate at\n     * @return The exchange rate (number of cUsd received for one CELO)\n     */\n\n\n    _this.getGoldExchangeRate = function (buyAmount) {\n      return _this.getExchangeRate(buyAmount, true);\n    };\n\n    return _this;\n  }\n  /**\n   * @dev Returns the amount of buyToken a user would get for sellAmount of sellToken\n   * @param sellAmount The amount of sellToken the user is selling to the exchange\n   * @param sellGold `true` if gold is the sell token\n   * @return The corresponding buyToken amount.\n   */\n\n\n  ExchangeWrapper.prototype.getBuyTokenAmount = function (sellAmount, sellGold) {\n    return __awaiter(this, void 0, void 0, function () {\n      var sell, res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            sell = BaseWrapper_1.valueToString(sellAmount);\n\n            if (new bignumber_js_1.default(sell).eq(0)) {\n              return [2\n              /*return*/\n              , new bignumber_js_1.default(0)];\n            }\n\n            return [4\n            /*yield*/\n            , this.contract.methods.getBuyTokenAmount(sell, sellGold).call()];\n\n          case 1:\n            res = _a.sent();\n            return [2\n            /*return*/\n            , BaseWrapper_1.valueToBigNumber(res)];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the amount of sellToken a user would need to exchange to receive buyAmount of\n   * buyToken.\n   * @param buyAmount The amount of buyToken the user would like to purchase.\n   * @param sellGold `true` if gold is the sell token\n   * @return The corresponding sellToken amount.\n   */\n\n\n  ExchangeWrapper.prototype.getSellTokenAmount = function (buyAmount, sellGold) {\n    return __awaiter(this, void 0, void 0, function () {\n      var buy, res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            buy = BaseWrapper_1.valueToString(buyAmount);\n\n            if (new bignumber_js_1.default(buy).eq(0)) {\n              return [2\n              /*return*/\n              , new bignumber_js_1.default(0)];\n            }\n\n            return [4\n            /*yield*/\n            , this.contract.methods.getSellTokenAmount(buy, sellGold).call()];\n\n          case 1:\n            res = _a.sent();\n            return [2\n            /*return*/\n            , BaseWrapper_1.valueToBigNumber(res)];\n        }\n      });\n    });\n  };\n  /**\n   * @dev Returns the current configuration of the exchange contract\n   * @return ExchangeConfig object\n   */\n\n\n  ExchangeWrapper.prototype.getConfig = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Promise.all([this.spread(), this.reserveFraction(), this.updateFrequency(), this.minimumReports(), this.lastBucketUpdate()])];\n\n          case 1:\n            res = _a.sent();\n            return [2\n            /*return*/\n            , {\n              spread: res[0],\n              reserveFraction: res[1],\n              updateFrequency: res[2],\n              minimumReports: res[3],\n              lastBucketUpdate: res[4]\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * @dev Returns human readable configuration of the exchange contract\n   * @return ExchangeConfig object\n   */\n\n\n  ExchangeWrapper.prototype.getHumanReadableConfig = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var config;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getConfig()];\n\n          case 1:\n            config = _a.sent();\n            return [2\n            /*return*/\n            , __assign(__assign({}, config), {\n              updateFrequency: BaseWrapper_1.secondsToDurationString(config.updateFrequency),\n              lastBucketUpdate: BaseWrapper_1.unixSecondsTimestampToDateString(config.lastBucketUpdate)\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the exchange rate estimated at buyAmount.\n   * @param buyAmount The amount of buyToken in wei to estimate the exchange rate at\n   * @param sellGold `true` if gold is the sell token\n   * @return The exchange rate (number of sellTokens received for one buyToken).\n   */\n\n\n  ExchangeWrapper.prototype.getExchangeRate = function (buyAmount, sellGold) {\n    return __awaiter(this, void 0, void 0, function () {\n      var takerAmount;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getBuyTokenAmount(buyAmount, sellGold)];\n\n          case 1:\n            takerAmount = _a.sent();\n            return [2\n            /*return*/\n            , BaseWrapper_1.valueToFrac(buyAmount, takerAmount)];\n          // Number of sellTokens received for one buyToken\n        }\n      });\n    });\n  };\n\n  return ExchangeWrapper;\n}(BaseWrapper_1.BaseWrapper);\n\nexports.ExchangeWrapper = ExchangeWrapper;","map":{"version":3,"sources":["../../src/wrappers/Exchange.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nvar BaseWrapper_1 = require(\"./BaseWrapper\");\n/**\n * Contract that allows to exchange StableToken for GoldToken and vice versa\n * using a Constant Product Market Maker Model\n */\nvar ExchangeWrapper = /** @class */ (function (_super) {\n    __extends(ExchangeWrapper, _super);\n    function ExchangeWrapper() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * Query spread parameter\n         * @returns Current spread charged on exchanges\n         */\n        _this.spread = BaseWrapper_1.proxyCall(_this.contract.methods.spread, undefined, BaseWrapper_1.fixidityValueToBigNumber);\n        /**\n         * Query reserve fraction parameter\n         * @returns Current fraction to commit to the gold bucket\n         */\n        _this.reserveFraction = BaseWrapper_1.proxyCall(_this.contract.methods.reserveFraction, undefined, BaseWrapper_1.fixidityValueToBigNumber);\n        /**\n         * Query update frequency parameter\n         * @returns The time period that needs to elapse between bucket\n         * updates\n         */\n        _this.updateFrequency = BaseWrapper_1.proxyCall(_this.contract.methods.updateFrequency, undefined, BaseWrapper_1.valueToBigNumber);\n        /**\n         * Query minimum reports parameter\n         * @returns The minimum number of fresh reports that need to be\n         * present in the oracle to update buckets\n         * commit to the gold bucket\n         */\n        _this.minimumReports = BaseWrapper_1.proxyCall(_this.contract.methods.minimumReports, undefined, BaseWrapper_1.valueToBigNumber);\n        /**\n         * Query last bucket update\n         * @returns The timestamp of the last time exchange buckets were updated.\n         */\n        _this.lastBucketUpdate = BaseWrapper_1.proxyCall(_this.contract.methods.lastBucketUpdate, undefined, BaseWrapper_1.valueToBigNumber);\n        /**\n         * DEPRECATED: use function sell\n         * Exchanges sellAmount of sellToken in exchange for at least minBuyAmount of buyToken\n         * Requires the sellAmount to have been approved to the exchange\n         * @param sellAmount The amount of sellToken the user is selling to the exchange\n         * @param minBuyAmount The minimum amount of buyToken the user has to receive for this\n         * transaction to succeed\n         * @param sellGold `true` if gold is the sell token\n         * @return The amount of buyToken that was transfered\n         */\n        _this.exchange = BaseWrapper_1.proxySend(_this.kit, _this.contract.methods.exchange, BaseWrapper_1.tupleParser(BaseWrapper_1.valueToString, BaseWrapper_1.valueToString, BaseWrapper_1.identity));\n        /**\n         * Sells sellAmount of sellToken in exchange for at least minBuyAmount of buyToken\n         * Requires the sellAmount to have been approved to the exchange\n         * @param sellAmount The amount of sellToken the user is selling to the exchange\n         * @param minBuyAmount The minimum amount of buyToken the user has to receive for this\n         * transaction to succeed\n         * @param sellGold `true` if gold is the sell token\n         * @return The amount of buyToken that was transfered\n         */\n        _this.sell = BaseWrapper_1.proxySend(_this.kit, _this.contract.methods.sell, BaseWrapper_1.tupleParser(BaseWrapper_1.valueToString, BaseWrapper_1.valueToString, BaseWrapper_1.identity));\n        /**\n         * Sells sellAmount of sellToken in exchange for at least minBuyAmount of buyToken\n         * Requires the sellAmount to have been approved to the exchange\n         * @param buyAmount The amount of sellToken the user is selling to the exchange\n         * @param maxSellAmount The maximum amount of sellToken the user will sell for this\n         * transaction to succeed\n         * @param buyGold `true` if gold is the buy token\n         * @return The amount of buyToken that was transfered\n         */\n        _this.buy = BaseWrapper_1.proxySend(_this.kit, _this.contract.methods.buy, BaseWrapper_1.tupleParser(BaseWrapper_1.valueToString, BaseWrapper_1.valueToString, BaseWrapper_1.identity));\n        /**\n         * Returns the buy token and sell token bucket sizes, in order. The ratio of\n         * the two also represents the exchange rate between the two.\n         * @param sellGold `true` if gold is the sell token\n         * @return [buyTokenBucket, sellTokenBucket]\n         */\n        _this.getBuyAndSellBuckets = BaseWrapper_1.proxyCall(_this.contract.methods.getBuyAndSellBuckets, undefined, function (callRes) {\n            return [BaseWrapper_1.valueToBigNumber(callRes[0]), BaseWrapper_1.valueToBigNumber(callRes[1])];\n        });\n        /**\n         * Sell amount of CELO in exchange for at least minUsdAmount of cUsd\n         * Requires the amount to have been approved to the exchange\n         * @param amount The amount of CELO the user is selling to the exchange\n         * @param minUsdAmount The minimum amount of cUsd the user has to receive for this\n         * transaction to succeed\n         */\n        _this.sellGold = function (amount, minUSDAmount) {\n            return _this.sell(amount, minUSDAmount, true);\n        };\n        /**\n         * Sell amount of cUsd in exchange for at least minGoldAmount of CELO\n         * Requires the amount to have been approved to the exchange\n         * @param amount The amount of cUsd the user is selling to the exchange\n         * @param minGoldAmount The minimum amount of CELO the user has to receive for this\n         * transaction to succeed\n         */\n        _this.sellDollar = function (amount, minGoldAmount) {\n            return _this.sell(amount, minGoldAmount, false);\n        };\n        /**\n         * Buy amount of CELO in exchange for at most maxUsdAmount of cUsd\n         * Requires the amount to have been approved to the exchange\n         * @param amount The amount of CELO the user is buying from the exchange\n         * @param maxUsdAmount The maximum amount of cUsd the user will pay for this\n         * transaction to succeed\n         */\n        _this.buyGold = function (amount, maxUSDAmount) {\n            return _this.buy(amount, maxUSDAmount, true);\n        };\n        /**\n         * Buy amount of cUsd in exchange for at least minGoldAmount of CELO\n         * Requires the amount to have been approved to the exchange\n         * @param amount The amount of cUsd the user is selling to the exchange\n         * @param maxGoldAmount The maximum amount of CELO the user will pay for this\n         * transaction to succeed\n         */\n        _this.buyDollar = function (amount, maxGoldAmount) {\n            return _this.buy(amount, maxGoldAmount, false);\n        };\n        /**\n         * Returns the amount of CELO a user would get for sellAmount of cUsd\n         * @param sellAmount The amount of cUsd the user is selling to the exchange\n         * @return The corresponding CELO amount.\n         */\n        _this.quoteUsdSell = function (sellAmount) { return _this.getBuyTokenAmount(sellAmount, false); };\n        /**\n         * Returns the amount of cUsd a user would get for sellAmount of CELO\n         * @param sellAmount The amount of CELO the user is selling to the exchange\n         * @return The corresponding cUsd amount.\n         */\n        _this.quoteGoldSell = function (sellAmount) { return _this.getBuyTokenAmount(sellAmount, true); };\n        /**\n         * Returns the amount of CELO a user would need to exchange to receive buyAmount of\n         * cUsd.\n         * @param buyAmount The amount of cUsd the user would like to purchase.\n         * @return The corresponding CELO amount.\n         */\n        _this.quoteUsdBuy = function (buyAmount) { return _this.getSellTokenAmount(buyAmount, false); };\n        /**\n         * Returns the amount of cUsd a user would need to exchange to receive buyAmount of\n         * CELO.\n         * @param buyAmount The amount of CELO the user would like to purchase.\n         * @return The corresponding cUsd amount.\n         */\n        _this.quoteGoldBuy = function (buyAmount) { return _this.getSellTokenAmount(buyAmount, true); };\n        /**\n         * Returns the exchange rate for cUsd estimated at the buyAmount\n         * @param buyAmount The amount of cUsd in wei to estimate the exchange rate at\n         * @return The exchange rate (number of CELO received for one cUsd)\n         */\n        _this.getUsdExchangeRate = function (buyAmount) { return _this.getExchangeRate(buyAmount, false); };\n        /**\n         * Returns the exchange rate for CELO estimated at the buyAmount\n         * @param buyAmount The amount of CELO in wei to estimate the exchange rate at\n         * @return The exchange rate (number of cUsd received for one CELO)\n         */\n        _this.getGoldExchangeRate = function (buyAmount) { return _this.getExchangeRate(buyAmount, true); };\n        return _this;\n    }\n    /**\n     * @dev Returns the amount of buyToken a user would get for sellAmount of sellToken\n     * @param sellAmount The amount of sellToken the user is selling to the exchange\n     * @param sellGold `true` if gold is the sell token\n     * @return The corresponding buyToken amount.\n     */\n    ExchangeWrapper.prototype.getBuyTokenAmount = function (sellAmount, sellGold) {\n        return __awaiter(this, void 0, void 0, function () {\n            var sell, res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        sell = BaseWrapper_1.valueToString(sellAmount);\n                        if (new bignumber_js_1.default(sell).eq(0)) {\n                            return [2 /*return*/, new bignumber_js_1.default(0)];\n                        }\n                        return [4 /*yield*/, this.contract.methods.getBuyTokenAmount(sell, sellGold).call()];\n                    case 1:\n                        res = _a.sent();\n                        return [2 /*return*/, BaseWrapper_1.valueToBigNumber(res)];\n                }\n            });\n        });\n    };\n    /**\n     * Returns the amount of sellToken a user would need to exchange to receive buyAmount of\n     * buyToken.\n     * @param buyAmount The amount of buyToken the user would like to purchase.\n     * @param sellGold `true` if gold is the sell token\n     * @return The corresponding sellToken amount.\n     */\n    ExchangeWrapper.prototype.getSellTokenAmount = function (buyAmount, sellGold) {\n        return __awaiter(this, void 0, void 0, function () {\n            var buy, res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        buy = BaseWrapper_1.valueToString(buyAmount);\n                        if (new bignumber_js_1.default(buy).eq(0)) {\n                            return [2 /*return*/, new bignumber_js_1.default(0)];\n                        }\n                        return [4 /*yield*/, this.contract.methods.getSellTokenAmount(buy, sellGold).call()];\n                    case 1:\n                        res = _a.sent();\n                        return [2 /*return*/, BaseWrapper_1.valueToBigNumber(res)];\n                }\n            });\n        });\n    };\n    /**\n     * @dev Returns the current configuration of the exchange contract\n     * @return ExchangeConfig object\n     */\n    ExchangeWrapper.prototype.getConfig = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, Promise.all([\n                            this.spread(),\n                            this.reserveFraction(),\n                            this.updateFrequency(),\n                            this.minimumReports(),\n                            this.lastBucketUpdate(),\n                        ])];\n                    case 1:\n                        res = _a.sent();\n                        return [2 /*return*/, {\n                                spread: res[0],\n                                reserveFraction: res[1],\n                                updateFrequency: res[2],\n                                minimumReports: res[3],\n                                lastBucketUpdate: res[4],\n                            }];\n                }\n            });\n        });\n    };\n    /**\n     * @dev Returns human readable configuration of the exchange contract\n     * @return ExchangeConfig object\n     */\n    ExchangeWrapper.prototype.getHumanReadableConfig = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var config;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getConfig()];\n                    case 1:\n                        config = _a.sent();\n                        return [2 /*return*/, __assign(__assign({}, config), { updateFrequency: BaseWrapper_1.secondsToDurationString(config.updateFrequency), lastBucketUpdate: BaseWrapper_1.unixSecondsTimestampToDateString(config.lastBucketUpdate) })];\n                }\n            });\n        });\n    };\n    /**\n     * Returns the exchange rate estimated at buyAmount.\n     * @param buyAmount The amount of buyToken in wei to estimate the exchange rate at\n     * @param sellGold `true` if gold is the sell token\n     * @return The exchange rate (number of sellTokens received for one buyToken).\n     */\n    ExchangeWrapper.prototype.getExchangeRate = function (buyAmount, sellGold) {\n        return __awaiter(this, void 0, void 0, function () {\n            var takerAmount;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getBuyTokenAmount(buyAmount, sellGold)];\n                    case 1:\n                        takerAmount = _a.sent();\n                        return [2 /*return*/, BaseWrapper_1.valueToFrac(buyAmount, takerAmount)]; // Number of sellTokens received for one buyToken\n                }\n            });\n        });\n    };\n    return ExchangeWrapper;\n}(BaseWrapper_1.BaseWrapper));\nexports.ExchangeWrapper = ExchangeWrapper;\n//# sourceMappingURL=Exchange.js.map"]},"metadata":{},"sourceType":"script"}