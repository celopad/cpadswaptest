{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar signatureUtils_1 = require(\"@celo/base/lib/signatureUtils\");\n\nvar connect_1 = require(\"@celo/connect\");\n\nvar signatureUtils_2 = require(\"@celo/utils/lib/signatureUtils\");\n\nvar solidity_1 = require(\"@celo/utils/lib/solidity\");\n\nvar BaseWrapper_1 = require(\"../wrappers/BaseWrapper\");\n/**\n * Contract for handling deposits needed for voting.\n */\n\n\nvar AccountsWrapper =\n/** @class */\nfunction (_super) {\n  __extends(AccountsWrapper, _super);\n\n  function AccountsWrapper() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * Creates an account.\n     */\n\n\n    _this.createAccount = BaseWrapper_1.proxySend(_this.kit, _this.contract.methods.createAccount);\n    /**\n     * Returns the attestation signer for the specified account.\n     * @param account The address of the account.\n     * @return The address with which the account can vote.\n     */\n\n    _this.getAttestationSigner = BaseWrapper_1.proxyCall(_this.contract.methods.getAttestationSigner);\n    /**\n     * Returns if the account has authorized an attestation signer\n     * @param account The address of the account.\n     * @return If the account has authorized an attestation signer\n     */\n\n    _this.hasAuthorizedAttestationSigner = BaseWrapper_1.proxyCall(_this.contract.methods.hasAuthorizedAttestationSigner);\n    /**\n     * Returns the vote signer for the specified account.\n     * @param account The address of the account.\n     * @return The address with which the account can vote.\n     */\n\n    _this.getVoteSigner = BaseWrapper_1.proxyCall(_this.contract.methods.getVoteSigner);\n    /**\n     * Returns the validator signer for the specified account.\n     * @param account The address of the account.\n     * @return The address with which the account can register a validator or group.\n     */\n\n    _this.getValidatorSigner = BaseWrapper_1.proxyCall(_this.contract.methods.getValidatorSigner);\n    /**\n     * Returns the account address given the signer for voting\n     * @param signer Address that is authorized to sign the tx as voter\n     * @return The Account address\n     */\n\n    _this.voteSignerToAccount = BaseWrapper_1.proxyCall(_this.contract.methods.voteSignerToAccount);\n    /**\n     * Returns the account address given the signer for validating\n     * @param signer Address that is authorized to sign the tx as validator\n     * @return The Account address\n     */\n\n    _this.validatorSignerToAccount = BaseWrapper_1.proxyCall(_this.contract.methods.validatorSignerToAccount);\n    /**\n     * Returns the account associated with `signer`.\n     * @param signer The address of the account or previously authorized signer.\n     * @dev Fails if the `signer` is not an account or previously authorized signer.\n     * @return The associated account.\n     */\n\n    _this.signerToAccount = BaseWrapper_1.proxyCall(_this.contract.methods.signerToAccount);\n    /**\n     * Check if an account already exists.\n     * @param account The address of the account\n     * @return Returns `true` if account exists. Returns `false` otherwise.\n     */\n\n    _this.isAccount = BaseWrapper_1.proxyCall(_this.contract.methods.isAccount);\n    /**\n     * Check if an address is a signer address\n     * @param address The address of the account\n     * @return Returns `true` if account exists. Returns `false` otherwise.\n     */\n\n    _this.isSigner = BaseWrapper_1.proxyCall(_this.contract.methods.isAuthorizedSigner);\n    /**\n     * Returns the set data encryption key for the account\n     * @param account Account\n     */\n\n    _this.getDataEncryptionKey = BaseWrapper_1.proxyCall(_this.contract.methods.getDataEncryptionKey, undefined, function (res) {\n      return BaseWrapper_1.solidityBytesToString(res);\n    });\n    /**\n     * Returns the set wallet address for the account\n     * @param account Account\n     */\n\n    _this.getWalletAddress = BaseWrapper_1.proxyCall(_this.contract.methods.getWalletAddress);\n    /**\n     * Returns the metadataURL for the account\n     * @param account Account\n     */\n\n    _this.getMetadataURL = BaseWrapper_1.proxyCall(_this.contract.methods.getMetadataURL);\n    /**\n     * Sets the data encryption of the account\n     * @param encryptionKey The key to set\n     */\n\n    _this.setAccountDataEncryptionKey = BaseWrapper_1.proxySend(_this.kit, _this.contract.methods.setAccountDataEncryptionKey);\n    /**\n     * Sets the name for the account\n     * @param name The name to set\n     */\n\n    _this.setName = BaseWrapper_1.proxySend(_this.kit, _this.contract.methods.setName);\n    /**\n     * Sets the metadataURL for the account\n     * @param url The url to set\n     */\n\n    _this.setMetadataURL = BaseWrapper_1.proxySend(_this.kit, _this.contract.methods.setMetadataURL);\n    return _this;\n  }\n\n  AccountsWrapper.prototype.getCurrentSigners = function (address) {\n    return Promise.all([this.getVoteSigner(address), this.getValidatorSigner(address), this.getAttestationSigner(address)]);\n  };\n\n  AccountsWrapper.prototype.getAccountSummary = function (account) {\n    return __awaiter(this, void 0, void 0, function () {\n      var ret;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Promise.all([this.getName(account), this.getVoteSigner(account), this.getValidatorSigner(account), this.getAttestationSigner(account), this.getMetadataURL(account), this.getWalletAddress(account), this.getDataEncryptionKey(account)])];\n\n          case 1:\n            ret = _a.sent();\n            return [2\n            /*return*/\n            , {\n              address: account,\n              name: ret[0],\n              authorizedSigners: {\n                vote: ret[1],\n                validator: ret[2],\n                attestation: ret[3]\n              },\n              metadataURL: ret[4],\n              wallet: ret[5],\n              dataEncryptionKey: ret[6]\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Authorize an attestation signing key on behalf of this account to another address.\n   * @param signer The address of the signing key to authorize.\n   * @param proofOfSigningKeyPossession The account address signed by the signer address.\n   * @return A CeloTransactionObject\n   */\n\n\n  AccountsWrapper.prototype.authorizeAttestationSigner = function (signer, proofOfSigningKeyPossession) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , connect_1.toTransactionObject(this.kit.connection, this.contract.methods.authorizeAttestationSigner(signer, proofOfSigningKeyPossession.v, proofOfSigningKeyPossession.r, proofOfSigningKeyPossession.s))];\n      });\n    });\n  };\n  /**\n   * Authorizes an address to sign votes on behalf of the account.\n   * @param signer The address of the vote signing key to authorize.\n   * @param proofOfSigningKeyPossession The account address signed by the signer address.\n   * @return A CeloTransactionObject\n   */\n\n\n  AccountsWrapper.prototype.authorizeVoteSigner = function (signer, proofOfSigningKeyPossession) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , connect_1.toTransactionObject(this.kit.connection, this.contract.methods.authorizeVoteSigner(signer, proofOfSigningKeyPossession.v, proofOfSigningKeyPossession.r, proofOfSigningKeyPossession.s))];\n      });\n    });\n  };\n  /**\n   * Authorizes an address to sign consensus messages on behalf of the account.\n   * @param signer The address of the signing key to authorize.\n   * @param proofOfSigningKeyPossession The account address signed by the signer address.\n   * @return A CeloTransactionObject\n   */\n\n\n  AccountsWrapper.prototype.authorizeValidatorSigner = function (signer, proofOfSigningKeyPossession) {\n    return __awaiter(this, void 0, void 0, function () {\n      var validators, account, _a, message, prefixedMsg, pubKey;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.kit.contracts.getValidators()];\n\n          case 1:\n            validators = _b.sent();\n            _a = this.kit.connection.defaultAccount;\n            if (_a) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.kit.connection.getAccounts()];\n\n          case 2:\n            _a = _b.sent()[0];\n            _b.label = 3;\n\n          case 3:\n            account = _a;\n            return [4\n            /*yield*/\n            , validators.isValidator(account)];\n\n          case 4:\n            if (_b.sent()) {\n              message = this.kit.connection.web3.utils.soliditySha3({\n                type: 'address',\n                value: account\n              });\n              prefixedMsg = signatureUtils_2.hashMessageWithPrefix(message);\n              pubKey = signatureUtils_2.signedMessageToPublicKey(prefixedMsg, proofOfSigningKeyPossession.v, proofOfSigningKeyPossession.r, proofOfSigningKeyPossession.s);\n              return [2\n              /*return*/\n              , connect_1.toTransactionObject(this.kit.connection, this.contract.methods.authorizeValidatorSignerWithPublicKey(signer, proofOfSigningKeyPossession.v, proofOfSigningKeyPossession.r, proofOfSigningKeyPossession.s, BaseWrapper_1.stringToSolidityBytes(pubKey)))];\n            } else {\n              return [2\n              /*return*/\n              , connect_1.toTransactionObject(this.kit.connection, this.contract.methods.authorizeValidatorSigner(signer, proofOfSigningKeyPossession.v, proofOfSigningKeyPossession.r, proofOfSigningKeyPossession.s))];\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Authorizes an address to sign consensus messages on behalf of the account. Also switch BLS key at the same time.\n   * @param signer The address of the signing key to authorize.\n   * @param proofOfSigningKeyPossession The account address signed by the signer address.\n   * @param blsPublicKey The BLS public key that the validator is using for consensus, should pass proof\n   *   of possession. 48 bytes.\n   * @param blsPop The BLS public key proof-of-possession, which consists of a signature on the\n   *   account address. 96 bytes.\n   * @return A CeloTransactionObject\n   */\n\n\n  AccountsWrapper.prototype.authorizeValidatorSignerAndBls = function (signer, proofOfSigningKeyPossession, blsPublicKey, blsPop) {\n    return __awaiter(this, void 0, void 0, function () {\n      var account, _a, message, prefixedMsg, pubKey;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this.kit.connection.defaultAccount;\n            if (_a) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.kit.connection.getAccounts()];\n\n          case 1:\n            _a = _b.sent()[0];\n            _b.label = 2;\n\n          case 2:\n            account = _a;\n            message = this.kit.connection.web3.utils.soliditySha3({\n              type: 'address',\n              value: account\n            });\n            prefixedMsg = signatureUtils_2.hashMessageWithPrefix(message);\n            pubKey = signatureUtils_2.signedMessageToPublicKey(prefixedMsg, proofOfSigningKeyPossession.v, proofOfSigningKeyPossession.r, proofOfSigningKeyPossession.s);\n            return [2\n            /*return*/\n            , connect_1.toTransactionObject(this.kit.connection, this.contract.methods.authorizeValidatorSignerWithKeys(signer, proofOfSigningKeyPossession.v, proofOfSigningKeyPossession.r, proofOfSigningKeyPossession.s, BaseWrapper_1.stringToSolidityBytes(pubKey), BaseWrapper_1.stringToSolidityBytes(blsPublicKey), BaseWrapper_1.stringToSolidityBytes(blsPop)))];\n        }\n      });\n    });\n  };\n\n  AccountsWrapper.prototype.generateProofOfKeyPossession = function (account, signer) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.getParsedSignatureOfAddress(account, signer, signatureUtils_1.NativeSigner(this.kit.connection.web3.eth.sign, signer))];\n      });\n    });\n  };\n\n  AccountsWrapper.prototype.generateProofOfKeyPossessionLocally = function (account, signer, privateKey) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.getParsedSignatureOfAddress(account, signer, signatureUtils_2.LocalSigner(privateKey))];\n      });\n    });\n  };\n  /**\n   * Returns the set name for the account\n   * @param account Account\n   * @param blockNumber Height of result, defaults to tip.\n   */\n\n\n  AccountsWrapper.prototype.getName = function (account, blockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        // @ts-ignore: Expected 0-1 arguments, but got 2\n        return [2\n        /*return*/\n        , this.contract.methods.getName(account).call({}, blockNumber)];\n      });\n    });\n  };\n  /**\n   * Convenience Setter for the dataEncryptionKey and wallet address for an account\n   * @param name A string to set as the name of the account\n   * @param dataEncryptionKey secp256k1 public key for data encryption. Preferably compressed.\n   * @param walletAddress The wallet address to set for the account\n   * @param proofOfPossession Signature from the wallet address key over the sender's address\n   */\n\n\n  AccountsWrapper.prototype.setAccount = function (name, dataEncryptionKey, walletAddress, proofOfPossession) {\n    if (proofOfPossession === void 0) {\n      proofOfPossession = null;\n    }\n\n    if (proofOfPossession) {\n      return connect_1.toTransactionObject(this.kit.connection, this.contract.methods.setAccount(name, // @ts-ignore\n      dataEncryptionKey, walletAddress, proofOfPossession.v, proofOfPossession.r, proofOfPossession.s));\n    } else {\n      return connect_1.toTransactionObject(this.kit.connection, this.contract.methods.setAccount(name, // @ts-ignore\n      dataEncryptionKey, walletAddress, '0x0', '0x0', '0x0'));\n    }\n  };\n  /**\n   * Sets the wallet address for the account\n   * @param address The address to set\n   */\n\n\n  AccountsWrapper.prototype.setWalletAddress = function (walletAddress, proofOfPossession) {\n    if (proofOfPossession === void 0) {\n      proofOfPossession = null;\n    }\n\n    if (proofOfPossession) {\n      return connect_1.toTransactionObject(this.kit.connection, this.contract.methods.setWalletAddress(walletAddress, proofOfPossession.v, proofOfPossession.r, proofOfPossession.s));\n    } else {\n      return connect_1.toTransactionObject(this.kit.connection, this.contract.methods.setWalletAddress(walletAddress, '0x0', '0x0', '0x0'));\n    }\n  };\n\n  AccountsWrapper.prototype.parseSignatureOfAddress = function (address, signer, signature) {\n    var hash = solidity_1.soliditySha3({\n      type: 'address',\n      value: address\n    });\n    return signatureUtils_2.parseSignature(hash, signature, signer);\n  };\n\n  AccountsWrapper.prototype.getParsedSignatureOfAddress = function (address, signer, signerFn) {\n    return __awaiter(this, void 0, void 0, function () {\n      var hash, signature;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            hash = solidity_1.soliditySha3({\n              type: 'address',\n              value: address\n            });\n            return [4\n            /*yield*/\n            , signerFn.sign(hash)];\n\n          case 1:\n            signature = _a.sent();\n            return [2\n            /*return*/\n            , signatureUtils_2.parseSignature(hash, signature, signer)];\n        }\n      });\n    });\n  };\n\n  return AccountsWrapper;\n}(BaseWrapper_1.BaseWrapper);\n\nexports.AccountsWrapper = AccountsWrapper;","map":{"version":3,"sources":["../../src/wrappers/Accounts.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar signatureUtils_1 = require(\"@celo/base/lib/signatureUtils\");\nvar connect_1 = require(\"@celo/connect\");\nvar signatureUtils_2 = require(\"@celo/utils/lib/signatureUtils\");\nvar solidity_1 = require(\"@celo/utils/lib/solidity\");\nvar BaseWrapper_1 = require(\"../wrappers/BaseWrapper\");\n/**\n * Contract for handling deposits needed for voting.\n */\nvar AccountsWrapper = /** @class */ (function (_super) {\n    __extends(AccountsWrapper, _super);\n    function AccountsWrapper() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * Creates an account.\n         */\n        _this.createAccount = BaseWrapper_1.proxySend(_this.kit, _this.contract.methods.createAccount);\n        /**\n         * Returns the attestation signer for the specified account.\n         * @param account The address of the account.\n         * @return The address with which the account can vote.\n         */\n        _this.getAttestationSigner = BaseWrapper_1.proxyCall(_this.contract.methods.getAttestationSigner);\n        /**\n         * Returns if the account has authorized an attestation signer\n         * @param account The address of the account.\n         * @return If the account has authorized an attestation signer\n         */\n        _this.hasAuthorizedAttestationSigner = BaseWrapper_1.proxyCall(_this.contract.methods.hasAuthorizedAttestationSigner);\n        /**\n         * Returns the vote signer for the specified account.\n         * @param account The address of the account.\n         * @return The address with which the account can vote.\n         */\n        _this.getVoteSigner = BaseWrapper_1.proxyCall(_this.contract.methods.getVoteSigner);\n        /**\n         * Returns the validator signer for the specified account.\n         * @param account The address of the account.\n         * @return The address with which the account can register a validator or group.\n         */\n        _this.getValidatorSigner = BaseWrapper_1.proxyCall(_this.contract.methods.getValidatorSigner);\n        /**\n         * Returns the account address given the signer for voting\n         * @param signer Address that is authorized to sign the tx as voter\n         * @return The Account address\n         */\n        _this.voteSignerToAccount = BaseWrapper_1.proxyCall(_this.contract.methods.voteSignerToAccount);\n        /**\n         * Returns the account address given the signer for validating\n         * @param signer Address that is authorized to sign the tx as validator\n         * @return The Account address\n         */\n        _this.validatorSignerToAccount = BaseWrapper_1.proxyCall(_this.contract.methods.validatorSignerToAccount);\n        /**\n         * Returns the account associated with `signer`.\n         * @param signer The address of the account or previously authorized signer.\n         * @dev Fails if the `signer` is not an account or previously authorized signer.\n         * @return The associated account.\n         */\n        _this.signerToAccount = BaseWrapper_1.proxyCall(_this.contract.methods.signerToAccount);\n        /**\n         * Check if an account already exists.\n         * @param account The address of the account\n         * @return Returns `true` if account exists. Returns `false` otherwise.\n         */\n        _this.isAccount = BaseWrapper_1.proxyCall(_this.contract.methods.isAccount);\n        /**\n         * Check if an address is a signer address\n         * @param address The address of the account\n         * @return Returns `true` if account exists. Returns `false` otherwise.\n         */\n        _this.isSigner = BaseWrapper_1.proxyCall(_this.contract.methods.isAuthorizedSigner);\n        /**\n         * Returns the set data encryption key for the account\n         * @param account Account\n         */\n        _this.getDataEncryptionKey = BaseWrapper_1.proxyCall(_this.contract.methods.getDataEncryptionKey, undefined, function (res) {\n            return BaseWrapper_1.solidityBytesToString(res);\n        });\n        /**\n         * Returns the set wallet address for the account\n         * @param account Account\n         */\n        _this.getWalletAddress = BaseWrapper_1.proxyCall(_this.contract.methods.getWalletAddress);\n        /**\n         * Returns the metadataURL for the account\n         * @param account Account\n         */\n        _this.getMetadataURL = BaseWrapper_1.proxyCall(_this.contract.methods.getMetadataURL);\n        /**\n         * Sets the data encryption of the account\n         * @param encryptionKey The key to set\n         */\n        _this.setAccountDataEncryptionKey = BaseWrapper_1.proxySend(_this.kit, _this.contract.methods.setAccountDataEncryptionKey);\n        /**\n         * Sets the name for the account\n         * @param name The name to set\n         */\n        _this.setName = BaseWrapper_1.proxySend(_this.kit, _this.contract.methods.setName);\n        /**\n         * Sets the metadataURL for the account\n         * @param url The url to set\n         */\n        _this.setMetadataURL = BaseWrapper_1.proxySend(_this.kit, _this.contract.methods.setMetadataURL);\n        return _this;\n    }\n    AccountsWrapper.prototype.getCurrentSigners = function (address) {\n        return Promise.all([\n            this.getVoteSigner(address),\n            this.getValidatorSigner(address),\n            this.getAttestationSigner(address),\n        ]);\n    };\n    AccountsWrapper.prototype.getAccountSummary = function (account) {\n        return __awaiter(this, void 0, void 0, function () {\n            var ret;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, Promise.all([\n                            this.getName(account),\n                            this.getVoteSigner(account),\n                            this.getValidatorSigner(account),\n                            this.getAttestationSigner(account),\n                            this.getMetadataURL(account),\n                            this.getWalletAddress(account),\n                            this.getDataEncryptionKey(account),\n                        ])];\n                    case 1:\n                        ret = _a.sent();\n                        return [2 /*return*/, {\n                                address: account,\n                                name: ret[0],\n                                authorizedSigners: {\n                                    vote: ret[1],\n                                    validator: ret[2],\n                                    attestation: ret[3],\n                                },\n                                metadataURL: ret[4],\n                                wallet: ret[5],\n                                dataEncryptionKey: ret[6],\n                            }];\n                }\n            });\n        });\n    };\n    /**\n     * Authorize an attestation signing key on behalf of this account to another address.\n     * @param signer The address of the signing key to authorize.\n     * @param proofOfSigningKeyPossession The account address signed by the signer address.\n     * @return A CeloTransactionObject\n     */\n    AccountsWrapper.prototype.authorizeAttestationSigner = function (signer, proofOfSigningKeyPossession) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, connect_1.toTransactionObject(this.kit.connection, this.contract.methods.authorizeAttestationSigner(signer, proofOfSigningKeyPossession.v, proofOfSigningKeyPossession.r, proofOfSigningKeyPossession.s))];\n            });\n        });\n    };\n    /**\n     * Authorizes an address to sign votes on behalf of the account.\n     * @param signer The address of the vote signing key to authorize.\n     * @param proofOfSigningKeyPossession The account address signed by the signer address.\n     * @return A CeloTransactionObject\n     */\n    AccountsWrapper.prototype.authorizeVoteSigner = function (signer, proofOfSigningKeyPossession) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, connect_1.toTransactionObject(this.kit.connection, this.contract.methods.authorizeVoteSigner(signer, proofOfSigningKeyPossession.v, proofOfSigningKeyPossession.r, proofOfSigningKeyPossession.s))];\n            });\n        });\n    };\n    /**\n     * Authorizes an address to sign consensus messages on behalf of the account.\n     * @param signer The address of the signing key to authorize.\n     * @param proofOfSigningKeyPossession The account address signed by the signer address.\n     * @return A CeloTransactionObject\n     */\n    AccountsWrapper.prototype.authorizeValidatorSigner = function (signer, proofOfSigningKeyPossession) {\n        return __awaiter(this, void 0, void 0, function () {\n            var validators, account, _a, message, prefixedMsg, pubKey;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this.kit.contracts.getValidators()];\n                    case 1:\n                        validators = _b.sent();\n                        _a = this.kit.connection.defaultAccount;\n                        if (_a) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this.kit.connection.getAccounts()];\n                    case 2:\n                        _a = (_b.sent())[0];\n                        _b.label = 3;\n                    case 3:\n                        account = _a;\n                        return [4 /*yield*/, validators.isValidator(account)];\n                    case 4:\n                        if (_b.sent()) {\n                            message = this.kit.connection.web3.utils.soliditySha3({\n                                type: 'address',\n                                value: account,\n                            });\n                            prefixedMsg = signatureUtils_2.hashMessageWithPrefix(message);\n                            pubKey = signatureUtils_2.signedMessageToPublicKey(prefixedMsg, proofOfSigningKeyPossession.v, proofOfSigningKeyPossession.r, proofOfSigningKeyPossession.s);\n                            return [2 /*return*/, connect_1.toTransactionObject(this.kit.connection, this.contract.methods.authorizeValidatorSignerWithPublicKey(signer, proofOfSigningKeyPossession.v, proofOfSigningKeyPossession.r, proofOfSigningKeyPossession.s, BaseWrapper_1.stringToSolidityBytes(pubKey)))];\n                        }\n                        else {\n                            return [2 /*return*/, connect_1.toTransactionObject(this.kit.connection, this.contract.methods.authorizeValidatorSigner(signer, proofOfSigningKeyPossession.v, proofOfSigningKeyPossession.r, proofOfSigningKeyPossession.s))];\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Authorizes an address to sign consensus messages on behalf of the account. Also switch BLS key at the same time.\n     * @param signer The address of the signing key to authorize.\n     * @param proofOfSigningKeyPossession The account address signed by the signer address.\n     * @param blsPublicKey The BLS public key that the validator is using for consensus, should pass proof\n     *   of possession. 48 bytes.\n     * @param blsPop The BLS public key proof-of-possession, which consists of a signature on the\n     *   account address. 96 bytes.\n     * @return A CeloTransactionObject\n     */\n    AccountsWrapper.prototype.authorizeValidatorSignerAndBls = function (signer, proofOfSigningKeyPossession, blsPublicKey, blsPop) {\n        return __awaiter(this, void 0, void 0, function () {\n            var account, _a, message, prefixedMsg, pubKey;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _a = this.kit.connection.defaultAccount;\n                        if (_a) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.kit.connection.getAccounts()];\n                    case 1:\n                        _a = (_b.sent())[0];\n                        _b.label = 2;\n                    case 2:\n                        account = _a;\n                        message = this.kit.connection.web3.utils.soliditySha3({\n                            type: 'address',\n                            value: account,\n                        });\n                        prefixedMsg = signatureUtils_2.hashMessageWithPrefix(message);\n                        pubKey = signatureUtils_2.signedMessageToPublicKey(prefixedMsg, proofOfSigningKeyPossession.v, proofOfSigningKeyPossession.r, proofOfSigningKeyPossession.s);\n                        return [2 /*return*/, connect_1.toTransactionObject(this.kit.connection, this.contract.methods.authorizeValidatorSignerWithKeys(signer, proofOfSigningKeyPossession.v, proofOfSigningKeyPossession.r, proofOfSigningKeyPossession.s, BaseWrapper_1.stringToSolidityBytes(pubKey), BaseWrapper_1.stringToSolidityBytes(blsPublicKey), BaseWrapper_1.stringToSolidityBytes(blsPop)))];\n                }\n            });\n        });\n    };\n    AccountsWrapper.prototype.generateProofOfKeyPossession = function (account, signer) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.getParsedSignatureOfAddress(account, signer, signatureUtils_1.NativeSigner(this.kit.connection.web3.eth.sign, signer))];\n            });\n        });\n    };\n    AccountsWrapper.prototype.generateProofOfKeyPossessionLocally = function (account, signer, privateKey) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.getParsedSignatureOfAddress(account, signer, signatureUtils_2.LocalSigner(privateKey))];\n            });\n        });\n    };\n    /**\n     * Returns the set name for the account\n     * @param account Account\n     * @param blockNumber Height of result, defaults to tip.\n     */\n    AccountsWrapper.prototype.getName = function (account, blockNumber) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                // @ts-ignore: Expected 0-1 arguments, but got 2\n                return [2 /*return*/, this.contract.methods.getName(account).call({}, blockNumber)];\n            });\n        });\n    };\n    /**\n     * Convenience Setter for the dataEncryptionKey and wallet address for an account\n     * @param name A string to set as the name of the account\n     * @param dataEncryptionKey secp256k1 public key for data encryption. Preferably compressed.\n     * @param walletAddress The wallet address to set for the account\n     * @param proofOfPossession Signature from the wallet address key over the sender's address\n     */\n    AccountsWrapper.prototype.setAccount = function (name, dataEncryptionKey, walletAddress, proofOfPossession) {\n        if (proofOfPossession === void 0) { proofOfPossession = null; }\n        if (proofOfPossession) {\n            return connect_1.toTransactionObject(this.kit.connection, this.contract.methods.setAccount(name, \n            // @ts-ignore\n            dataEncryptionKey, walletAddress, proofOfPossession.v, proofOfPossession.r, proofOfPossession.s));\n        }\n        else {\n            return connect_1.toTransactionObject(this.kit.connection, this.contract.methods.setAccount(name, \n            // @ts-ignore\n            dataEncryptionKey, walletAddress, '0x0', '0x0', '0x0'));\n        }\n    };\n    /**\n     * Sets the wallet address for the account\n     * @param address The address to set\n     */\n    AccountsWrapper.prototype.setWalletAddress = function (walletAddress, proofOfPossession) {\n        if (proofOfPossession === void 0) { proofOfPossession = null; }\n        if (proofOfPossession) {\n            return connect_1.toTransactionObject(this.kit.connection, this.contract.methods.setWalletAddress(walletAddress, proofOfPossession.v, proofOfPossession.r, proofOfPossession.s));\n        }\n        else {\n            return connect_1.toTransactionObject(this.kit.connection, this.contract.methods.setWalletAddress(walletAddress, '0x0', '0x0', '0x0'));\n        }\n    };\n    AccountsWrapper.prototype.parseSignatureOfAddress = function (address, signer, signature) {\n        var hash = solidity_1.soliditySha3({ type: 'address', value: address });\n        return signatureUtils_2.parseSignature(hash, signature, signer);\n    };\n    AccountsWrapper.prototype.getParsedSignatureOfAddress = function (address, signer, signerFn) {\n        return __awaiter(this, void 0, void 0, function () {\n            var hash, signature;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        hash = solidity_1.soliditySha3({ type: 'address', value: address });\n                        return [4 /*yield*/, signerFn.sign(hash)];\n                    case 1:\n                        signature = _a.sent();\n                        return [2 /*return*/, signatureUtils_2.parseSignature(hash, signature, signer)];\n                }\n            });\n        });\n    };\n    return AccountsWrapper;\n}(BaseWrapper_1.BaseWrapper));\nexports.AccountsWrapper = AccountsWrapper;\n//# sourceMappingURL=Accounts.js.map"]},"metadata":{},"sourceType":"script"}