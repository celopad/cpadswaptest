{"ast":null,"code":"var _jsxFileName = \"/Users/khoiplus/Desktop/celopad/cpadswaptest/src/pages/Swap/index.tsx\";\nimport { JSBI, Token } from '@ubeswap/sdk';\nimport UnsupportedCurrencyFooter from 'components/swap/UnsupportedCurrencyFooter';\nimport { useIsTransactionUnsupported } from 'hooks/Trades';\nimport React, { useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport { ArrowDown } from 'react-feather';\nimport ReactGA from 'react-ga';\nimport { Text } from 'rebass';\nimport { ThemeContext } from 'styled-components';\nimport AddressInputPanel from '../../components/AddressInputPanel';\nimport { ButtonConfirmed, ButtonError, ButtonLight, ButtonPrimary } from '../../components/Button';\nimport Card, { GreyCard } from '../../components/Card';\nimport Column, { AutoColumn } from '../../components/Column';\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel';\nimport Loader from '../../components/Loader';\nimport { SwapPoolTabs } from '../../components/NavigationTabs';\nimport ProgressSteps from '../../components/ProgressSteps';\nimport { AutoRow, RowBetween } from '../../components/Row';\nimport AdvancedSwapDetailsDropdown from '../../components/swap/AdvancedSwapDetailsDropdown';\nimport confirmPriceImpactWithoutFee from '../../components/swap/confirmPriceImpactWithoutFee';\nimport ConfirmSwapModal from '../../components/swap/ConfirmSwapModal';\nimport { ArrowWrapper, BottomGrouping, SwapCallbackError, Wrapper } from '../../components/swap/styleds';\nimport SwapHeader from '../../components/swap/SwapHeader';\nimport TradePrice from '../../components/swap/TradePrice';\nimport TokenWarningModal from '../../components/TokenWarningModal';\nimport { INITIAL_ALLOWED_SLIPPAGE } from '../../constants';\nimport { useActiveWeb3React } from '../../hooks';\nimport { useAllTokens, useCurrency } from '../../hooks/Tokens';\nimport { ApprovalState, useApproveCallbackFromTrade } from '../../hooks/useApproveCallback';\nimport useENSAddress from '../../hooks/useENSAddress';\nimport { useSwapCallback } from '../../hooks/useSwapCallback';\nimport { useToggleSettingsMenu, useWalletModalToggle } from '../../state/application/hooks';\nimport { Field } from '../../state/swap/actions';\nimport { useDefaultsFromURLSearch, useDerivedSwapInfo, useSwapActionHandlers, useSwapState } from '../../state/swap/hooks';\nimport { useExpertModeManager, useUserSingleHopOnly, useUserSlippageTolerance } from '../../state/user/hooks';\nimport { LinkStyledButton, TYPE } from '../../theme';\nimport { maxAmountSpend } from '../../utils/maxAmountSpend';\nimport { computeTradePriceBreakdown, warningSeverity } from '../../utils/prices';\nimport AppBody from '../AppBody';\nimport { ClickableText } from '../Pool/styleds';\nexport default function Swap() {\n  var _parsedAmounts$depend, _parsedAmounts$depend2, _parsedAmounts$indepe, _parsedAmounts$Field$, _currencies$Field$INP;\n\n  const loadedUrlParams = useDefaultsFromURLSearch(); // token warning stuff\n\n  const [loadedInputCurrency, loadedOutputCurrency] = [useCurrency(loadedUrlParams === null || loadedUrlParams === void 0 ? void 0 : loadedUrlParams.inputCurrencyId), useCurrency(loadedUrlParams === null || loadedUrlParams === void 0 ? void 0 : loadedUrlParams.outputCurrencyId)];\n  const [dismissTokenWarning, setDismissTokenWarning] = useState(false);\n  const urlLoadedTokens = useMemo(() => {\n    var _filter, _ref;\n\n    return (_filter = (_ref = [loadedInputCurrency, loadedOutputCurrency]) === null || _ref === void 0 ? void 0 : _ref.filter(c => c instanceof Token)) !== null && _filter !== void 0 ? _filter : [];\n  }, [loadedInputCurrency, loadedOutputCurrency]);\n  const handleConfirmTokenWarning = useCallback(() => {\n    setDismissTokenWarning(true);\n  }, []); // dismiss warning if all imported tokens are in active lists\n\n  const defaultTokens = useAllTokens();\n  const importTokensNotInDefault = urlLoadedTokens && urlLoadedTokens.filter(token => {\n    return !Boolean(token.address in defaultTokens);\n  });\n  const {\n    account\n  } = useActiveWeb3React();\n  const theme = useContext(ThemeContext); // toggle wallet when disconnected\n\n  const toggleWalletModal = useWalletModalToggle(); // for expert mode\n\n  const toggleSettings = useToggleSettingsMenu();\n  const [isExpertMode] = useExpertModeManager(); // get custom setting values for user\n\n  const [allowedSlippage] = useUserSlippageTolerance(); // swap state\n\n  const {\n    independentField,\n    typedValue,\n    recipient\n  } = useSwapState();\n  const {\n    v2Trade,\n    currencyBalances,\n    parsedAmount,\n    currencies,\n    inputError: swapInputError\n  } = useDerivedSwapInfo();\n  const {\n    address: recipientAddress\n  } = useENSAddress(recipient);\n  const trade = v2Trade;\n  const parsedAmounts = {\n    [Field.INPUT]: independentField === Field.INPUT ? parsedAmount : trade === null || trade === void 0 ? void 0 : trade.inputAmount,\n    [Field.OUTPUT]: independentField === Field.OUTPUT ? parsedAmount : trade === null || trade === void 0 ? void 0 : trade.outputAmount\n  };\n  const {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient\n  } = useSwapActionHandlers();\n  const isValid = !swapInputError;\n  const dependentField = independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT;\n  const handleTypeInput = useCallback(value => {\n    onUserInput(Field.INPUT, value);\n  }, [onUserInput]);\n  const handleTypeOutput = useCallback(value => {\n    onUserInput(Field.OUTPUT, value);\n  }, [onUserInput]); // modal and loading\n\n  const [{\n    showConfirm,\n    tradeToConfirm,\n    swapErrorMessage,\n    attemptingTxn,\n    txHash\n  }, setSwapState] = useState({\n    showConfirm: false,\n    tradeToConfirm: undefined,\n    attemptingTxn: false,\n    swapErrorMessage: undefined,\n    txHash: undefined\n  });\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: (_parsedAmounts$depend = (_parsedAmounts$depend2 = parsedAmounts[dependentField]) === null || _parsedAmounts$depend2 === void 0 ? void 0 : _parsedAmounts$depend2.toSignificant(6)) !== null && _parsedAmounts$depend !== void 0 ? _parsedAmounts$depend : ''\n  };\n  const userHasSpecifiedInputOutput = Boolean(currencies[Field.INPUT] && currencies[Field.OUTPUT] && ((_parsedAmounts$indepe = parsedAmounts[independentField]) === null || _parsedAmounts$indepe === void 0 ? void 0 : _parsedAmounts$indepe.greaterThan(JSBI.BigInt(0))));\n  const route = trade === null || trade === void 0 ? void 0 : trade.route;\n  const noRoute = !route; // check whether the user has approved the router on the input token\n\n  const [approval, approveCallback] = useApproveCallbackFromTrade(trade, allowedSlippage); // check if user has gone through approval process, used to show two step buttons, reset on token change\n\n  const [approvalSubmitted, setApprovalSubmitted] = useState(false); // mark when a user has submitted an approval, reset onTokenSelection for input field\n\n  useEffect(() => {\n    if (approval === ApprovalState.PENDING) {\n      setApprovalSubmitted(true);\n    }\n  }, [approval, approvalSubmitted]);\n  const maxAmountInput = maxAmountSpend(currencyBalances[Field.INPUT]);\n  const atMaxAmountInput = Boolean(maxAmountInput && ((_parsedAmounts$Field$ = parsedAmounts[Field.INPUT]) === null || _parsedAmounts$Field$ === void 0 ? void 0 : _parsedAmounts$Field$.equalTo(maxAmountInput))); // the callback to execute the swap\n\n  const {\n    callback: swapCallback,\n    error: swapCallbackError\n  } = useSwapCallback(trade, allowedSlippage, recipient);\n  const {\n    priceImpactWithoutFee\n  } = computeTradePriceBreakdown(trade);\n  const [singleHopOnly] = useUserSingleHopOnly();\n  const handleSwap = useCallback(() => {\n    if (priceImpactWithoutFee && !confirmPriceImpactWithoutFee(priceImpactWithoutFee)) {\n      return;\n    }\n\n    if (!swapCallback) {\n      return;\n    }\n\n    setSwapState({\n      attemptingTxn: true,\n      tradeToConfirm,\n      showConfirm,\n      swapErrorMessage: undefined,\n      txHash: undefined\n    });\n    swapCallback().then(hash => {\n      var _trade$inputAmount, _trade$inputAmount$cu, _trade$outputAmount, _trade$outputAmount$c;\n\n      setSwapState({\n        attemptingTxn: false,\n        tradeToConfirm,\n        showConfirm,\n        swapErrorMessage: undefined,\n        txHash: hash\n      });\n      ReactGA.event({\n        category: 'Swap',\n        action: recipient === null ? 'Swap w/o Send' : (recipientAddress !== null && recipientAddress !== void 0 ? recipientAddress : recipient) === account ? 'Swap w/o Send + recipient' : 'Swap w/ Send',\n        label: [trade === null || trade === void 0 ? void 0 : (_trade$inputAmount = trade.inputAmount) === null || _trade$inputAmount === void 0 ? void 0 : (_trade$inputAmount$cu = _trade$inputAmount.currency) === null || _trade$inputAmount$cu === void 0 ? void 0 : _trade$inputAmount$cu.symbol, trade === null || trade === void 0 ? void 0 : (_trade$outputAmount = trade.outputAmount) === null || _trade$outputAmount === void 0 ? void 0 : (_trade$outputAmount$c = _trade$outputAmount.currency) === null || _trade$outputAmount$c === void 0 ? void 0 : _trade$outputAmount$c.symbol].join('/')\n      });\n      ReactGA.event({\n        category: 'Routing',\n        action: singleHopOnly ? 'Swap with multihop disabled' : 'Swap with multihop enabled'\n      });\n    }).catch(error => {\n      setSwapState({\n        attemptingTxn: false,\n        tradeToConfirm,\n        showConfirm,\n        swapErrorMessage: error.message,\n        txHash: undefined\n      });\n    });\n  }, [priceImpactWithoutFee, swapCallback, tradeToConfirm, showConfirm, recipient, recipientAddress, account, trade, singleHopOnly]); // errors\n\n  const [showInverted, setShowInverted] = useState(false); // warnings on slippage\n\n  const priceImpactSeverity = warningSeverity(priceImpactWithoutFee); // show approve flow when: no error on inputs, not approved or pending, or approved in current session\n  // never show if price impact is above threshold in non expert mode\n\n  const showApproveFlow = !swapInputError && (approval === ApprovalState.NOT_APPROVED || approval === ApprovalState.PENDING || approvalSubmitted && approval === ApprovalState.APPROVED) && !(priceImpactSeverity > 3 && !isExpertMode);\n  const handleConfirmDismiss = useCallback(() => {\n    setSwapState({\n      showConfirm: false,\n      tradeToConfirm,\n      attemptingTxn,\n      swapErrorMessage,\n      txHash\n    }); // if there was a tx hash, we want to clear the input\n\n    if (txHash) {\n      onUserInput(Field.INPUT, '');\n    }\n  }, [attemptingTxn, onUserInput, swapErrorMessage, tradeToConfirm, txHash]);\n  const handleAcceptChanges = useCallback(() => {\n    setSwapState({\n      tradeToConfirm: trade,\n      swapErrorMessage,\n      txHash,\n      attemptingTxn,\n      showConfirm\n    });\n  }, [attemptingTxn, showConfirm, swapErrorMessage, trade, txHash]);\n  const handleInputSelect = useCallback(inputCurrency => {\n    setApprovalSubmitted(false); // reset 2 step UI for approvals\n\n    onCurrencySelection(Field.INPUT, inputCurrency);\n  }, [onCurrencySelection]);\n  const handleMaxInput = useCallback(() => {\n    maxAmountInput && onUserInput(Field.INPUT, maxAmountInput.toExact());\n  }, [maxAmountInput, onUserInput]);\n  const handleOutputSelect = useCallback(outputCurrency => onCurrencySelection(Field.OUTPUT, outputCurrency), [onCurrencySelection]);\n  const swapIsUnsupported = useIsTransactionUnsupported(currencies === null || currencies === void 0 ? void 0 : currencies.INPUT, currencies === null || currencies === void 0 ? void 0 : currencies.OUTPUT);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TokenWarningModal, {\n    isOpen: importTokensNotInDefault.length > 0 && !dismissTokenWarning,\n    tokens: importTokensNotInDefault,\n    onConfirm: handleConfirmTokenWarning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(SwapPoolTabs, {\n    active: 'swap',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(AppBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(SwapHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Wrapper, {\n    id: \"swap-page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ConfirmSwapModal, {\n    isOpen: showConfirm,\n    trade: trade,\n    originalTrade: tradeToConfirm,\n    onAcceptChanges: handleAcceptChanges,\n    attemptingTxn: attemptingTxn,\n    txHash: txHash,\n    recipient: recipient,\n    allowedSlippage: allowedSlippage,\n    onConfirm: handleSwap,\n    swapErrorMessage: swapErrorMessage,\n    onDismiss: handleConfirmDismiss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: 'md',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CurrencyInputPanel, {\n    label: independentField === Field.OUTPUT && trade ? 'From (estimated)' : 'From',\n    value: formattedAmounts[Field.INPUT],\n    showMaxButton: !atMaxAmountInput,\n    currency: currencies[Field.INPUT],\n    onUserInput: handleTypeInput,\n    onMax: handleMaxInput,\n    onCurrencySelect: handleInputSelect,\n    otherCurrency: currencies[Field.OUTPUT],\n    id: \"swap-currency-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(AutoColumn, {\n    justify: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(AutoRow, {\n    justify: isExpertMode ? 'space-between' : 'center',\n    style: {\n      padding: '0 1rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ArrowWrapper, {\n    clickable: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ArrowDown, {\n    size: \"16\",\n    onClick: () => {\n      setApprovalSubmitted(false); // reset 2 step UI for approvals\n\n      onSwitchTokens();\n    },\n    color: currencies[Field.INPUT] && currencies[Field.OUTPUT] ? theme.primary1 : theme.text2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 19\n    }\n  })), recipient === null && isExpertMode ? /*#__PURE__*/React.createElement(LinkStyledButton, {\n    id: \"add-recipient-button\",\n    onClick: () => onChangeRecipient(''),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 19\n    }\n  }, \"+ Add a send (optional)\") : null)), /*#__PURE__*/React.createElement(CurrencyInputPanel, {\n    value: formattedAmounts[Field.OUTPUT],\n    onUserInput: handleTypeOutput,\n    label: independentField === Field.INPUT && trade ? 'To (estimated)' : 'To',\n    showMaxButton: false,\n    currency: currencies[Field.OUTPUT],\n    onCurrencySelect: handleOutputSelect,\n    otherCurrency: currencies[Field.INPUT],\n    id: \"swap-currency-output\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 13\n    }\n  }), recipient !== null ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AutoRow, {\n    justify: \"space-between\",\n    style: {\n      padding: '0 1rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ArrowWrapper, {\n    clickable: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(ArrowDown, {\n    size: \"16\",\n    color: theme.text2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(LinkStyledButton, {\n    id: \"remove-recipient-button\",\n    onClick: () => onChangeRecipient(null),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 19\n    }\n  }, \"- Remove send\")), /*#__PURE__*/React.createElement(AddressInputPanel, {\n    id: \"recipient\",\n    value: recipient,\n    onChange: onChangeRecipient,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 17\n    }\n  })) : null, /*#__PURE__*/React.createElement(Card, {\n    padding: '0px',\n    borderRadius: '20px',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: \"8px\",\n    style: {\n      padding: '0 16px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 15\n    }\n  }, Boolean(trade) && /*#__PURE__*/React.createElement(RowBetween, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    fontWeight: 500,\n    fontSize: 14,\n    color: theme.text2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 21\n    }\n  }, \"Price\"), /*#__PURE__*/React.createElement(TradePrice, {\n    price: trade === null || trade === void 0 ? void 0 : trade.executionPrice,\n    showInverted: showInverted,\n    setShowInverted: setShowInverted,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 21\n    }\n  })), allowedSlippage !== INITIAL_ALLOWED_SLIPPAGE && /*#__PURE__*/React.createElement(RowBetween, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(ClickableText, {\n    fontWeight: 500,\n    fontSize: 14,\n    color: theme.text2,\n    onClick: toggleSettings,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 21\n    }\n  }, \"Slippage Tolerance\"), /*#__PURE__*/React.createElement(ClickableText, {\n    fontWeight: 500,\n    fontSize: 14,\n    color: theme.text2,\n    onClick: toggleSettings,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 21\n    }\n  }, allowedSlippage / 100, \"%\"))))), /*#__PURE__*/React.createElement(BottomGrouping, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 11\n    }\n  }, swapIsUnsupported ? /*#__PURE__*/React.createElement(ButtonPrimary, {\n    disabled: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.main, {\n    mb: \"4px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 17\n    }\n  }, \"Unsupported Asset\")) : !account ? /*#__PURE__*/React.createElement(ButtonLight, {\n    onClick: toggleWalletModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 15\n    }\n  }, \"Connect Wallet\") : noRoute && userHasSpecifiedInputOutput ? /*#__PURE__*/React.createElement(GreyCard, {\n    style: {\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.main, {\n    mb: \"4px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 17\n    }\n  }, \"Insufficient liquidity for this trade.\"), singleHopOnly && /*#__PURE__*/React.createElement(TYPE.main, {\n    mb: \"4px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 35\n    }\n  }, \"Try enabling multi-hop trades.\")) : showApproveFlow ? /*#__PURE__*/React.createElement(RowBetween, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ButtonConfirmed, {\n    onClick: approveCallback,\n    disabled: approval !== ApprovalState.NOT_APPROVED || approvalSubmitted,\n    width: \"48%\",\n    altDisabledStyle: approval === ApprovalState.PENDING // show solid button while waiting\n    ,\n    confirmed: approval === ApprovalState.APPROVED,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 17\n    }\n  }, approval === ApprovalState.PENDING ? /*#__PURE__*/React.createElement(AutoRow, {\n    gap: \"6px\",\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 21\n    }\n  }, \"Approving \", /*#__PURE__*/React.createElement(Loader, {\n    stroke: \"white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 33\n    }\n  })) : approvalSubmitted && approval === ApprovalState.APPROVED ? 'Approved' : 'Approve ' + ((_currencies$Field$INP = currencies[Field.INPUT]) === null || _currencies$Field$INP === void 0 ? void 0 : _currencies$Field$INP.symbol)), /*#__PURE__*/React.createElement(ButtonError, {\n    onClick: () => {\n      if (isExpertMode) {\n        handleSwap();\n      } else {\n        setSwapState({\n          tradeToConfirm: trade,\n          attemptingTxn: false,\n          swapErrorMessage: undefined,\n          showConfirm: true,\n          txHash: undefined\n        });\n      }\n    },\n    width: \"48%\",\n    id: \"swap-button\",\n    disabled: !isValid || approval !== ApprovalState.APPROVED || priceImpactSeverity > 3 && !isExpertMode,\n    error: isValid && priceImpactSeverity > 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    fontSize: 16,\n    fontWeight: 500,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 19\n    }\n  }, priceImpactSeverity > 3 && !isExpertMode ? `Price Impact High` : `Swap${priceImpactSeverity > 2 ? ' Anyway' : ''}`))) : /*#__PURE__*/React.createElement(ButtonError, {\n    onClick: () => {\n      if (isExpertMode) {\n        handleSwap();\n      } else {\n        setSwapState({\n          tradeToConfirm: trade,\n          attemptingTxn: false,\n          swapErrorMessage: undefined,\n          showConfirm: true,\n          txHash: undefined\n        });\n      }\n    },\n    id: \"swap-button\",\n    disabled: !isValid || priceImpactSeverity > 3 && !isExpertMode || !!swapCallbackError,\n    error: isValid && priceImpactSeverity > 2 && !swapCallbackError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    fontSize: 20,\n    fontWeight: 500,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 17\n    }\n  }, swapInputError ? swapInputError : priceImpactSeverity > 3 && !isExpertMode ? `Price Impact Too High` : `Swap${priceImpactSeverity > 2 ? ' Anyway' : ''}`)), showApproveFlow && /*#__PURE__*/React.createElement(Column, {\n    style: {\n      marginTop: '1rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 450,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ProgressSteps, {\n    steps: [approval === ApprovalState.APPROVED],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 451,\n      columnNumber: 17\n    }\n  })), isExpertMode && swapErrorMessage ? /*#__PURE__*/React.createElement(SwapCallbackError, {\n    error: swapErrorMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 49\n    }\n  }) : null))), !swapIsUnsupported ? /*#__PURE__*/React.createElement(AdvancedSwapDetailsDropdown, {\n    trade: trade,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(UnsupportedCurrencyFooter, {\n    show: swapIsUnsupported,\n    currencies: [currencies.INPUT, currencies.OUTPUT],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 461,\n      columnNumber: 9\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/khoiplus/Desktop/celopad/cpadswaptest/src/pages/Swap/index.tsx"],"names":["JSBI","Token","UnsupportedCurrencyFooter","useIsTransactionUnsupported","React","useCallback","useContext","useEffect","useMemo","useState","ArrowDown","ReactGA","Text","ThemeContext","AddressInputPanel","ButtonConfirmed","ButtonError","ButtonLight","ButtonPrimary","Card","GreyCard","Column","AutoColumn","CurrencyInputPanel","Loader","SwapPoolTabs","ProgressSteps","AutoRow","RowBetween","AdvancedSwapDetailsDropdown","confirmPriceImpactWithoutFee","ConfirmSwapModal","ArrowWrapper","BottomGrouping","SwapCallbackError","Wrapper","SwapHeader","TradePrice","TokenWarningModal","INITIAL_ALLOWED_SLIPPAGE","useActiveWeb3React","useAllTokens","useCurrency","ApprovalState","useApproveCallbackFromTrade","useENSAddress","useSwapCallback","useToggleSettingsMenu","useWalletModalToggle","Field","useDefaultsFromURLSearch","useDerivedSwapInfo","useSwapActionHandlers","useSwapState","useExpertModeManager","useUserSingleHopOnly","useUserSlippageTolerance","LinkStyledButton","TYPE","maxAmountSpend","computeTradePriceBreakdown","warningSeverity","AppBody","ClickableText","Swap","loadedUrlParams","loadedInputCurrency","loadedOutputCurrency","inputCurrencyId","outputCurrencyId","dismissTokenWarning","setDismissTokenWarning","urlLoadedTokens","filter","c","handleConfirmTokenWarning","defaultTokens","importTokensNotInDefault","token","Boolean","address","account","theme","toggleWalletModal","toggleSettings","isExpertMode","allowedSlippage","independentField","typedValue","recipient","v2Trade","currencyBalances","parsedAmount","currencies","inputError","swapInputError","recipientAddress","trade","parsedAmounts","INPUT","inputAmount","OUTPUT","outputAmount","onSwitchTokens","onCurrencySelection","onUserInput","onChangeRecipient","isValid","dependentField","handleTypeInput","value","handleTypeOutput","showConfirm","tradeToConfirm","swapErrorMessage","attemptingTxn","txHash","setSwapState","undefined","formattedAmounts","toSignificant","userHasSpecifiedInputOutput","greaterThan","BigInt","route","noRoute","approval","approveCallback","approvalSubmitted","setApprovalSubmitted","PENDING","maxAmountInput","atMaxAmountInput","equalTo","callback","swapCallback","error","swapCallbackError","priceImpactWithoutFee","singleHopOnly","handleSwap","then","hash","event","category","action","label","currency","symbol","join","catch","message","showInverted","setShowInverted","priceImpactSeverity","showApproveFlow","NOT_APPROVED","APPROVED","handleConfirmDismiss","handleAcceptChanges","handleInputSelect","inputCurrency","handleMaxInput","toExact","handleOutputSelect","outputCurrency","swapIsUnsupported","length","padding","primary1","text2","executionPrice","textAlign","marginTop"],"mappings":"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","sourcesContent":["import { JSBI, Token, TokenAmount, Trade } from '@ubeswap/sdk'\nimport UnsupportedCurrencyFooter from 'components/swap/UnsupportedCurrencyFooter'\nimport { useIsTransactionUnsupported } from 'hooks/Trades'\nimport React, { useCallback, useContext, useEffect, useMemo, useState } from 'react'\nimport { ArrowDown } from 'react-feather'\nimport ReactGA from 'react-ga'\nimport { Text } from 'rebass'\nimport { ThemeContext } from 'styled-components'\nimport AddressInputPanel from '../../components/AddressInputPanel'\nimport { ButtonConfirmed, ButtonError, ButtonLight, ButtonPrimary } from '../../components/Button'\nimport Card, { GreyCard } from '../../components/Card'\nimport Column, { AutoColumn } from '../../components/Column'\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel'\nimport Loader from '../../components/Loader'\nimport { SwapPoolTabs } from '../../components/NavigationTabs'\nimport ProgressSteps from '../../components/ProgressSteps'\nimport { AutoRow, RowBetween } from '../../components/Row'\nimport AdvancedSwapDetailsDropdown from '../../components/swap/AdvancedSwapDetailsDropdown'\nimport confirmPriceImpactWithoutFee from '../../components/swap/confirmPriceImpactWithoutFee'\nimport ConfirmSwapModal from '../../components/swap/ConfirmSwapModal'\nimport { ArrowWrapper, BottomGrouping, SwapCallbackError, Wrapper } from '../../components/swap/styleds'\nimport SwapHeader from '../../components/swap/SwapHeader'\nimport TradePrice from '../../components/swap/TradePrice'\nimport TokenWarningModal from '../../components/TokenWarningModal'\nimport { INITIAL_ALLOWED_SLIPPAGE } from '../../constants'\nimport { useActiveWeb3React } from '../../hooks'\nimport { useAllTokens, useCurrency } from '../../hooks/Tokens'\nimport { ApprovalState, useApproveCallbackFromTrade } from '../../hooks/useApproveCallback'\nimport useENSAddress from '../../hooks/useENSAddress'\nimport { useSwapCallback } from '../../hooks/useSwapCallback'\nimport { useToggleSettingsMenu, useWalletModalToggle } from '../../state/application/hooks'\nimport { Field } from '../../state/swap/actions'\nimport {\n  useDefaultsFromURLSearch,\n  useDerivedSwapInfo,\n  useSwapActionHandlers,\n  useSwapState\n} from '../../state/swap/hooks'\nimport { useExpertModeManager, useUserSingleHopOnly, useUserSlippageTolerance } from '../../state/user/hooks'\nimport { LinkStyledButton, TYPE } from '../../theme'\nimport { maxAmountSpend } from '../../utils/maxAmountSpend'\nimport { computeTradePriceBreakdown, warningSeverity } from '../../utils/prices'\nimport AppBody from '../AppBody'\nimport { ClickableText } from '../Pool/styleds'\n\nexport default function Swap() {\n  const loadedUrlParams = useDefaultsFromURLSearch()\n\n  // token warning stuff\n  const [loadedInputCurrency, loadedOutputCurrency] = [\n    useCurrency(loadedUrlParams?.inputCurrencyId),\n    useCurrency(loadedUrlParams?.outputCurrencyId)\n  ]\n  const [dismissTokenWarning, setDismissTokenWarning] = useState<boolean>(false)\n  const urlLoadedTokens: Token[] = useMemo(\n    () => [loadedInputCurrency, loadedOutputCurrency]?.filter((c): c is Token => c instanceof Token) ?? [],\n    [loadedInputCurrency, loadedOutputCurrency]\n  )\n  const handleConfirmTokenWarning = useCallback(() => {\n    setDismissTokenWarning(true)\n  }, [])\n\n  // dismiss warning if all imported tokens are in active lists\n  const defaultTokens = useAllTokens()\n  const importTokensNotInDefault =\n    urlLoadedTokens &&\n    urlLoadedTokens.filter((token: Token) => {\n      return !Boolean(token.address in defaultTokens)\n    })\n\n  const { account } = useActiveWeb3React()\n  const theme = useContext(ThemeContext)\n\n  // toggle wallet when disconnected\n  const toggleWalletModal = useWalletModalToggle()\n\n  // for expert mode\n  const toggleSettings = useToggleSettingsMenu()\n  const [isExpertMode] = useExpertModeManager()\n\n  // get custom setting values for user\n  const [allowedSlippage] = useUserSlippageTolerance()\n\n  // swap state\n  const { independentField, typedValue, recipient } = useSwapState()\n  const { v2Trade, currencyBalances, parsedAmount, currencies, inputError: swapInputError } = useDerivedSwapInfo()\n  const { address: recipientAddress } = useENSAddress(recipient)\n  const trade = v2Trade\n\n  const parsedAmounts = {\n    [Field.INPUT]: independentField === Field.INPUT ? parsedAmount : trade?.inputAmount,\n    [Field.OUTPUT]: independentField === Field.OUTPUT ? parsedAmount : trade?.outputAmount\n  }\n\n  const { onSwitchTokens, onCurrencySelection, onUserInput, onChangeRecipient } = useSwapActionHandlers()\n  const isValid = !swapInputError\n  const dependentField: Field = independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT\n\n  const handleTypeInput = useCallback(\n    (value: string) => {\n      onUserInput(Field.INPUT, value)\n    },\n    [onUserInput]\n  )\n  const handleTypeOutput = useCallback(\n    (value: string) => {\n      onUserInput(Field.OUTPUT, value)\n    },\n    [onUserInput]\n  )\n\n  // modal and loading\n  const [{ showConfirm, tradeToConfirm, swapErrorMessage, attemptingTxn, txHash }, setSwapState] = useState<{\n    showConfirm: boolean\n    tradeToConfirm: Trade | undefined\n    attemptingTxn: boolean\n    swapErrorMessage: string | undefined\n    txHash: string | undefined\n  }>({\n    showConfirm: false,\n    tradeToConfirm: undefined,\n    attemptingTxn: false,\n    swapErrorMessage: undefined,\n    txHash: undefined\n  })\n\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: parsedAmounts[dependentField]?.toSignificant(6) ?? ''\n  }\n\n  const userHasSpecifiedInputOutput = Boolean(\n    currencies[Field.INPUT] && currencies[Field.OUTPUT] && parsedAmounts[independentField]?.greaterThan(JSBI.BigInt(0))\n  )\n  const route = trade?.route\n  const noRoute = !route\n\n  // check whether the user has approved the router on the input token\n  const [approval, approveCallback] = useApproveCallbackFromTrade(trade, allowedSlippage)\n\n  // check if user has gone through approval process, used to show two step buttons, reset on token change\n  const [approvalSubmitted, setApprovalSubmitted] = useState<boolean>(false)\n\n  // mark when a user has submitted an approval, reset onTokenSelection for input field\n  useEffect(() => {\n    if (approval === ApprovalState.PENDING) {\n      setApprovalSubmitted(true)\n    }\n  }, [approval, approvalSubmitted])\n\n  const maxAmountInput: TokenAmount | undefined = maxAmountSpend(currencyBalances[Field.INPUT])\n  const atMaxAmountInput = Boolean(maxAmountInput && parsedAmounts[Field.INPUT]?.equalTo(maxAmountInput))\n\n  // the callback to execute the swap\n  const { callback: swapCallback, error: swapCallbackError } = useSwapCallback(trade, allowedSlippage, recipient)\n\n  const { priceImpactWithoutFee } = computeTradePriceBreakdown(trade)\n\n  const [singleHopOnly] = useUserSingleHopOnly()\n\n  const handleSwap = useCallback(() => {\n    if (priceImpactWithoutFee && !confirmPriceImpactWithoutFee(priceImpactWithoutFee)) {\n      return\n    }\n    if (!swapCallback) {\n      return\n    }\n    setSwapState({ attemptingTxn: true, tradeToConfirm, showConfirm, swapErrorMessage: undefined, txHash: undefined })\n    swapCallback()\n      .then(hash => {\n        setSwapState({ attemptingTxn: false, tradeToConfirm, showConfirm, swapErrorMessage: undefined, txHash: hash })\n\n        ReactGA.event({\n          category: 'Swap',\n          action:\n            recipient === null\n              ? 'Swap w/o Send'\n              : (recipientAddress ?? recipient) === account\n              ? 'Swap w/o Send + recipient'\n              : 'Swap w/ Send',\n          label: [trade?.inputAmount?.currency?.symbol, trade?.outputAmount?.currency?.symbol].join('/')\n        })\n\n        ReactGA.event({\n          category: 'Routing',\n          action: singleHopOnly ? 'Swap with multihop disabled' : 'Swap with multihop enabled'\n        })\n      })\n      .catch(error => {\n        setSwapState({\n          attemptingTxn: false,\n          tradeToConfirm,\n          showConfirm,\n          swapErrorMessage: error.message,\n          txHash: undefined\n        })\n      })\n  }, [\n    priceImpactWithoutFee,\n    swapCallback,\n    tradeToConfirm,\n    showConfirm,\n    recipient,\n    recipientAddress,\n    account,\n    trade,\n    singleHopOnly\n  ])\n\n  // errors\n  const [showInverted, setShowInverted] = useState<boolean>(false)\n\n  // warnings on slippage\n  const priceImpactSeverity = warningSeverity(priceImpactWithoutFee)\n\n  // show approve flow when: no error on inputs, not approved or pending, or approved in current session\n  // never show if price impact is above threshold in non expert mode\n  const showApproveFlow =\n    !swapInputError &&\n    (approval === ApprovalState.NOT_APPROVED ||\n      approval === ApprovalState.PENDING ||\n      (approvalSubmitted && approval === ApprovalState.APPROVED)) &&\n    !(priceImpactSeverity > 3 && !isExpertMode)\n\n  const handleConfirmDismiss = useCallback(() => {\n    setSwapState({ showConfirm: false, tradeToConfirm, attemptingTxn, swapErrorMessage, txHash })\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      onUserInput(Field.INPUT, '')\n    }\n  }, [attemptingTxn, onUserInput, swapErrorMessage, tradeToConfirm, txHash])\n\n  const handleAcceptChanges = useCallback(() => {\n    setSwapState({ tradeToConfirm: trade, swapErrorMessage, txHash, attemptingTxn, showConfirm })\n  }, [attemptingTxn, showConfirm, swapErrorMessage, trade, txHash])\n\n  const handleInputSelect = useCallback(\n    inputCurrency => {\n      setApprovalSubmitted(false) // reset 2 step UI for approvals\n      onCurrencySelection(Field.INPUT, inputCurrency)\n    },\n    [onCurrencySelection]\n  )\n\n  const handleMaxInput = useCallback(() => {\n    maxAmountInput && onUserInput(Field.INPUT, maxAmountInput.toExact())\n  }, [maxAmountInput, onUserInput])\n\n  const handleOutputSelect = useCallback(outputCurrency => onCurrencySelection(Field.OUTPUT, outputCurrency), [\n    onCurrencySelection\n  ])\n\n  const swapIsUnsupported = useIsTransactionUnsupported(currencies?.INPUT, currencies?.OUTPUT)\n\n  return (\n    <>\n      <TokenWarningModal\n        isOpen={importTokensNotInDefault.length > 0 && !dismissTokenWarning}\n        tokens={importTokensNotInDefault}\n        onConfirm={handleConfirmTokenWarning}\n      />\n      <SwapPoolTabs active={'swap'} />\n      <AppBody>\n        <SwapHeader />\n        <Wrapper id=\"swap-page\">\n          <ConfirmSwapModal\n            isOpen={showConfirm}\n            trade={trade}\n            originalTrade={tradeToConfirm}\n            onAcceptChanges={handleAcceptChanges}\n            attemptingTxn={attemptingTxn}\n            txHash={txHash}\n            recipient={recipient}\n            allowedSlippage={allowedSlippage}\n            onConfirm={handleSwap}\n            swapErrorMessage={swapErrorMessage}\n            onDismiss={handleConfirmDismiss}\n          />\n\n          <AutoColumn gap={'md'}>\n            <CurrencyInputPanel\n              label={independentField === Field.OUTPUT && trade ? 'From (estimated)' : 'From'}\n              value={formattedAmounts[Field.INPUT]}\n              showMaxButton={!atMaxAmountInput}\n              currency={currencies[Field.INPUT]}\n              onUserInput={handleTypeInput}\n              onMax={handleMaxInput}\n              onCurrencySelect={handleInputSelect}\n              otherCurrency={currencies[Field.OUTPUT]}\n              id=\"swap-currency-input\"\n            />\n            <AutoColumn justify=\"space-between\">\n              <AutoRow justify={isExpertMode ? 'space-between' : 'center'} style={{ padding: '0 1rem' }}>\n                <ArrowWrapper clickable>\n                  <ArrowDown\n                    size=\"16\"\n                    onClick={() => {\n                      setApprovalSubmitted(false) // reset 2 step UI for approvals\n                      onSwitchTokens()\n                    }}\n                    color={currencies[Field.INPUT] && currencies[Field.OUTPUT] ? theme.primary1 : theme.text2}\n                  />\n                </ArrowWrapper>\n                {recipient === null && isExpertMode ? (\n                  <LinkStyledButton id=\"add-recipient-button\" onClick={() => onChangeRecipient('')}>\n                    + Add a send (optional)\n                  </LinkStyledButton>\n                ) : null}\n              </AutoRow>\n            </AutoColumn>\n            <CurrencyInputPanel\n              value={formattedAmounts[Field.OUTPUT]}\n              onUserInput={handleTypeOutput}\n              label={independentField === Field.INPUT && trade ? 'To (estimated)' : 'To'}\n              showMaxButton={false}\n              currency={currencies[Field.OUTPUT]}\n              onCurrencySelect={handleOutputSelect}\n              otherCurrency={currencies[Field.INPUT]}\n              id=\"swap-currency-output\"\n            />\n\n            {recipient !== null ? (\n              <>\n                <AutoRow justify=\"space-between\" style={{ padding: '0 1rem' }}>\n                  <ArrowWrapper clickable={false}>\n                    <ArrowDown size=\"16\" color={theme.text2} />\n                  </ArrowWrapper>\n                  <LinkStyledButton id=\"remove-recipient-button\" onClick={() => onChangeRecipient(null)}>\n                    - Remove send\n                  </LinkStyledButton>\n                </AutoRow>\n                <AddressInputPanel id=\"recipient\" value={recipient} onChange={onChangeRecipient} />\n              </>\n            ) : null}\n            <Card padding={'0px'} borderRadius={'20px'}>\n              <AutoColumn gap=\"8px\" style={{ padding: '0 16px' }}>\n                {Boolean(trade) && (\n                  <RowBetween align=\"center\">\n                    <Text fontWeight={500} fontSize={14} color={theme.text2}>\n                      Price\n                    </Text>\n                    <TradePrice\n                      price={trade?.executionPrice}\n                      showInverted={showInverted}\n                      setShowInverted={setShowInverted}\n                    />\n                  </RowBetween>\n                )}\n                {allowedSlippage !== INITIAL_ALLOWED_SLIPPAGE && (\n                  <RowBetween align=\"center\">\n                    <ClickableText fontWeight={500} fontSize={14} color={theme.text2} onClick={toggleSettings}>\n                      Slippage Tolerance\n                    </ClickableText>\n                    <ClickableText fontWeight={500} fontSize={14} color={theme.text2} onClick={toggleSettings}>\n                      {allowedSlippage / 100}%\n                    </ClickableText>\n                  </RowBetween>\n                )}\n              </AutoColumn>\n            </Card>\n          </AutoColumn>\n          <BottomGrouping>\n            {swapIsUnsupported ? (\n              <ButtonPrimary disabled={true}>\n                <TYPE.main mb=\"4px\">Unsupported Asset</TYPE.main>\n              </ButtonPrimary>\n            ) : !account ? (\n              <ButtonLight onClick={toggleWalletModal}>Connect Wallet</ButtonLight>\n            ) : noRoute && userHasSpecifiedInputOutput ? (\n              <GreyCard style={{ textAlign: 'center' }}>\n                <TYPE.main mb=\"4px\">Insufficient liquidity for this trade.</TYPE.main>\n                {singleHopOnly && <TYPE.main mb=\"4px\">Try enabling multi-hop trades.</TYPE.main>}\n              </GreyCard>\n            ) : showApproveFlow ? (\n              <RowBetween>\n                <ButtonConfirmed\n                  onClick={approveCallback}\n                  disabled={approval !== ApprovalState.NOT_APPROVED || approvalSubmitted}\n                  width=\"48%\"\n                  altDisabledStyle={approval === ApprovalState.PENDING} // show solid button while waiting\n                  confirmed={approval === ApprovalState.APPROVED}\n                >\n                  {approval === ApprovalState.PENDING ? (\n                    <AutoRow gap=\"6px\" justify=\"center\">\n                      Approving <Loader stroke=\"white\" />\n                    </AutoRow>\n                  ) : approvalSubmitted && approval === ApprovalState.APPROVED ? (\n                    'Approved'\n                  ) : (\n                    'Approve ' + currencies[Field.INPUT]?.symbol\n                  )}\n                </ButtonConfirmed>\n                <ButtonError\n                  onClick={() => {\n                    if (isExpertMode) {\n                      handleSwap()\n                    } else {\n                      setSwapState({\n                        tradeToConfirm: trade,\n                        attemptingTxn: false,\n                        swapErrorMessage: undefined,\n                        showConfirm: true,\n                        txHash: undefined\n                      })\n                    }\n                  }}\n                  width=\"48%\"\n                  id=\"swap-button\"\n                  disabled={\n                    !isValid || approval !== ApprovalState.APPROVED || (priceImpactSeverity > 3 && !isExpertMode)\n                  }\n                  error={isValid && priceImpactSeverity > 2}\n                >\n                  <Text fontSize={16} fontWeight={500}>\n                    {priceImpactSeverity > 3 && !isExpertMode\n                      ? `Price Impact High`\n                      : `Swap${priceImpactSeverity > 2 ? ' Anyway' : ''}`}\n                  </Text>\n                </ButtonError>\n              </RowBetween>\n            ) : (\n              <ButtonError\n                onClick={() => {\n                  if (isExpertMode) {\n                    handleSwap()\n                  } else {\n                    setSwapState({\n                      tradeToConfirm: trade,\n                      attemptingTxn: false,\n                      swapErrorMessage: undefined,\n                      showConfirm: true,\n                      txHash: undefined\n                    })\n                  }\n                }}\n                id=\"swap-button\"\n                disabled={!isValid || (priceImpactSeverity > 3 && !isExpertMode) || !!swapCallbackError}\n                error={isValid && priceImpactSeverity > 2 && !swapCallbackError}\n              >\n                <Text fontSize={20} fontWeight={500}>\n                  {swapInputError\n                    ? swapInputError\n                    : priceImpactSeverity > 3 && !isExpertMode\n                    ? `Price Impact Too High`\n                    : `Swap${priceImpactSeverity > 2 ? ' Anyway' : ''}`}\n                </Text>\n              </ButtonError>\n            )}\n            {showApproveFlow && (\n              <Column style={{ marginTop: '1rem' }}>\n                <ProgressSteps steps={[approval === ApprovalState.APPROVED]} />\n              </Column>\n            )}\n            {isExpertMode && swapErrorMessage ? <SwapCallbackError error={swapErrorMessage} /> : null}\n          </BottomGrouping>\n        </Wrapper>\n      </AppBody>\n      {!swapIsUnsupported ? (\n        <AdvancedSwapDetailsDropdown trade={trade} />\n      ) : (\n        <UnsupportedCurrencyFooter show={swapIsUnsupported} currencies={[currencies.INPUT, currencies.OUTPUT]} />\n      )}\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}