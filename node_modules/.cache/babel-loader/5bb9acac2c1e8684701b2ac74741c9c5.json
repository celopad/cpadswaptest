{"ast":null,"code":"\"use strict\";\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar io_1 = require(\"@celo/base/lib/io\");\n\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nvar Either_1 = require(\"fp-ts/lib/Either\");\n\nvar t = __importStar(require(\"io-ts\"));\n\nvar address_1 = require(\"./address\");\n\nvar phoneNumbers_1 = require(\"./phoneNumbers\"); // Exports moved to @celo/base, forwarding them\n// here for backwards compatibility\n\n\nvar io_2 = require(\"@celo/base/lib/io\");\n\nexports.isValidUrl = io_2.isValidUrl;\nexports.URL_REGEX = io_2.URL_REGEX;\nexports.UrlType = new t.Type('Url', t.string.is, function (input, context) {\n  return Either_1.either.chain(t.string.validate(input, context), function (stringValue) {\n    return io_1.URL_REGEX.test(stringValue) ? t.success(stringValue) : t.failure(stringValue, context, 'is not a valid url');\n  });\n}, String);\nexports.JSONStringType = new t.Type('JSONString', t.string.is, function (input, context) {\n  return Either_1.either.chain(t.string.validate(input, context), function (stringValue) {\n    try {\n      JSON.parse(stringValue);\n      return t.success(stringValue);\n    } catch (error) {\n      return t.failure(stringValue, context, 'can not be parsed as JSON');\n    }\n  });\n}, String);\nexports.E164PhoneNumberType = new t.Type('E164Number', t.string.is, function (input, context) {\n  return Either_1.either.chain(t.string.validate(input, context), function (stringValue) {\n    return phoneNumbers_1.isE164NumberStrict(stringValue) ? t.success(stringValue) : t.failure(stringValue, context, 'is not a valid e164 number');\n  });\n}, String);\nexports.AddressType = new t.Type('Address', t.string.is, function (input, context) {\n  return Either_1.either.chain(t.string.validate(input, context), function (stringValue) {\n    return address_1.isValidAddress(stringValue) ? t.success(ethereumjs_util_1.toChecksumAddress(stringValue)) : t.failure(stringValue, context, 'is not a valid address');\n  });\n}, String);\nexports.PublicKeyType = new t.Type('Public Key', t.string.is, function (input, context) {\n  return Either_1.either.chain(t.string.validate(input, context), function (stringValue) {\n    return stringValue.startsWith('0x') && ethereumjs_util_1.isValidPublic(Buffer.from(stringValue.slice(2), 'hex'), true) ? t.success(ethereumjs_util_1.toChecksumAddress(stringValue)) : t.failure(stringValue, context, 'is not a valid public key');\n  });\n}, String);\nexports.SignatureType = t.string;\nexports.SaltType = t.string;\nexports.AttestationServiceStatusResponseType = t.type({\n  status: t.literal('ok'),\n  smsProviders: t.array(t.string),\n  blacklistedRegionCodes: t.union([t.array(t.string), t.undefined]),\n  accountAddress: exports.AddressType,\n  signature: t.union([exports.SignatureType, t.undefined]),\n  version: t.string,\n  latestBlock: t.number,\n  ageOfLatestBlock: t.number,\n  isNodeSyncing: t.boolean,\n  appSignature: t.string\n});\nexports.AttestationServiceTestRequestType = t.type({\n  phoneNumber: exports.E164PhoneNumberType,\n  message: t.string,\n  signature: exports.SignatureType,\n  provider: t.union([t.string, t.undefined])\n});\nexports.AttestationRequestType = t.type({\n  phoneNumber: exports.E164PhoneNumberType,\n  account: exports.AddressType,\n  issuer: exports.AddressType,\n  // io-ts way of defining optional key-value pair\n  salt: t.union([t.undefined, exports.SaltType]),\n  smsRetrieverAppSig: t.union([t.undefined, t.string]),\n  // if specified, the message sent will be short random number prefixed by this string\n  securityCodePrefix: t.union([t.undefined, t.string]),\n  language: t.union([t.undefined, t.string])\n});\nexports.GetAttestationRequestType = t.type({\n  phoneNumber: exports.E164PhoneNumberType,\n  account: exports.AddressType,\n  issuer: exports.AddressType,\n  // io-ts way of defining optional key-value pair\n  salt: t.union([t.undefined, exports.SaltType]),\n  // if the value supplied matches the stored security code, the response will include the complete message\n  securityCode: t.union([t.undefined, t.string])\n});\nexports.AttestationResponseType = t.type({\n  // Always returned in 1.0.x\n  success: t.boolean,\n  // Returned for errors in 1.0.x\n  error: t.union([t.undefined, t.string]),\n  // Stringifyed JSON dict of dicts, mapping attempt to error info.\n  errors: t.union([t.undefined, t.string]),\n  // Returned for successful send in 1.0.x\n  provider: t.union([t.undefined, t.string]),\n  // New fields\n  identifier: t.union([t.undefined, t.string]),\n  account: t.union([t.undefined, exports.AddressType]),\n  issuer: t.union([t.undefined, exports.AddressType]),\n  status: t.union([t.undefined, t.string]),\n  attempt: t.union([t.undefined, t.number]),\n  countryCode: t.union([t.undefined, t.string]),\n  // Time to receive eventual delivery/failure (inc retries)\n  duration: t.union([t.undefined, t.number]),\n  // Only used by test endpoint to return randomly generated salt.\n  // Never return a user-supplied salt.\n  salt: t.union([t.undefined, t.string]),\n  // only returned if the request supplied the correct security code\n  attestationCode: t.union([t.undefined, t.string])\n});","map":{"version":3,"sources":["../src/io.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar io_1 = require(\"@celo/base/lib/io\");\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar Either_1 = require(\"fp-ts/lib/Either\");\nvar t = __importStar(require(\"io-ts\"));\nvar address_1 = require(\"./address\");\nvar phoneNumbers_1 = require(\"./phoneNumbers\");\n// Exports moved to @celo/base, forwarding them\n// here for backwards compatibility\nvar io_2 = require(\"@celo/base/lib/io\");\nexports.isValidUrl = io_2.isValidUrl;\nexports.URL_REGEX = io_2.URL_REGEX;\nexports.UrlType = new t.Type('Url', t.string.is, function (input, context) {\n    return Either_1.either.chain(t.string.validate(input, context), function (stringValue) {\n        return io_1.URL_REGEX.test(stringValue)\n            ? t.success(stringValue)\n            : t.failure(stringValue, context, 'is not a valid url');\n    });\n}, String);\nexports.JSONStringType = new t.Type('JSONString', t.string.is, function (input, context) {\n    return Either_1.either.chain(t.string.validate(input, context), function (stringValue) {\n        try {\n            JSON.parse(stringValue);\n            return t.success(stringValue);\n        }\n        catch (error) {\n            return t.failure(stringValue, context, 'can not be parsed as JSON');\n        }\n    });\n}, String);\nexports.E164PhoneNumberType = new t.Type('E164Number', t.string.is, function (input, context) {\n    return Either_1.either.chain(t.string.validate(input, context), function (stringValue) {\n        return phoneNumbers_1.isE164NumberStrict(stringValue)\n            ? t.success(stringValue)\n            : t.failure(stringValue, context, 'is not a valid e164 number');\n    });\n}, String);\nexports.AddressType = new t.Type('Address', t.string.is, function (input, context) {\n    return Either_1.either.chain(t.string.validate(input, context), function (stringValue) {\n        return address_1.isValidAddress(stringValue)\n            ? t.success(ethereumjs_util_1.toChecksumAddress(stringValue))\n            : t.failure(stringValue, context, 'is not a valid address');\n    });\n}, String);\nexports.PublicKeyType = new t.Type('Public Key', t.string.is, function (input, context) {\n    return Either_1.either.chain(t.string.validate(input, context), function (stringValue) {\n        return stringValue.startsWith('0x') && ethereumjs_util_1.isValidPublic(Buffer.from(stringValue.slice(2), 'hex'), true)\n            ? t.success(ethereumjs_util_1.toChecksumAddress(stringValue))\n            : t.failure(stringValue, context, 'is not a valid public key');\n    });\n}, String);\nexports.SignatureType = t.string;\nexports.SaltType = t.string;\nexports.AttestationServiceStatusResponseType = t.type({\n    status: t.literal('ok'),\n    smsProviders: t.array(t.string),\n    blacklistedRegionCodes: t.union([t.array(t.string), t.undefined]),\n    accountAddress: exports.AddressType,\n    signature: t.union([exports.SignatureType, t.undefined]),\n    version: t.string,\n    latestBlock: t.number,\n    ageOfLatestBlock: t.number,\n    isNodeSyncing: t.boolean,\n    appSignature: t.string,\n});\nexports.AttestationServiceTestRequestType = t.type({\n    phoneNumber: exports.E164PhoneNumberType,\n    message: t.string,\n    signature: exports.SignatureType,\n    provider: t.union([t.string, t.undefined]),\n});\nexports.AttestationRequestType = t.type({\n    phoneNumber: exports.E164PhoneNumberType,\n    account: exports.AddressType,\n    issuer: exports.AddressType,\n    // io-ts way of defining optional key-value pair\n    salt: t.union([t.undefined, exports.SaltType]),\n    smsRetrieverAppSig: t.union([t.undefined, t.string]),\n    // if specified, the message sent will be short random number prefixed by this string\n    securityCodePrefix: t.union([t.undefined, t.string]),\n    language: t.union([t.undefined, t.string]),\n});\nexports.GetAttestationRequestType = t.type({\n    phoneNumber: exports.E164PhoneNumberType,\n    account: exports.AddressType,\n    issuer: exports.AddressType,\n    // io-ts way of defining optional key-value pair\n    salt: t.union([t.undefined, exports.SaltType]),\n    // if the value supplied matches the stored security code, the response will include the complete message\n    securityCode: t.union([t.undefined, t.string]),\n});\nexports.AttestationResponseType = t.type({\n    // Always returned in 1.0.x\n    success: t.boolean,\n    // Returned for errors in 1.0.x\n    error: t.union([t.undefined, t.string]),\n    // Stringifyed JSON dict of dicts, mapping attempt to error info.\n    errors: t.union([t.undefined, t.string]),\n    // Returned for successful send in 1.0.x\n    provider: t.union([t.undefined, t.string]),\n    // New fields\n    identifier: t.union([t.undefined, t.string]),\n    account: t.union([t.undefined, exports.AddressType]),\n    issuer: t.union([t.undefined, exports.AddressType]),\n    status: t.union([t.undefined, t.string]),\n    attempt: t.union([t.undefined, t.number]),\n    countryCode: t.union([t.undefined, t.string]),\n    // Time to receive eventual delivery/failure (inc retries)\n    duration: t.union([t.undefined, t.number]),\n    // Only used by test endpoint to return randomly generated salt.\n    // Never return a user-supplied salt.\n    salt: t.union([t.undefined, t.string]),\n    // only returned if the request supplied the correct security code\n    attestationCode: t.union([t.undefined, t.string]),\n});\n//# sourceMappingURL=io.js.map"]},"metadata":{},"sourceType":"script"}