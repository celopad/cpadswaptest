{"ast":null,"code":"import { abi as IUniswapV2PairABI } from '@uniswap/v2-core/build/IUniswapV2Pair.json';\nimport { useMemo } from 'react';\nimport ENS_PUBLIC_RESOLVER_ABI from '../constants/abis/ens-public-resolver.json';\nimport { ERC20_BYTES32_ABI } from '../constants/abis/erc20';\nimport ERC20_ABI from '../constants/abis/erc20.json';\nimport { MULTICALL_ABI, MULTICALL_NETWORKS } from '../constants/multicall';\nimport { getContract } from '../utils';\nimport { useActiveWeb3React } from './index'; // returns null on errors\n\nfunction useContract(address, ABI, withSignerIfPossible = true) {\n  const {\n    library,\n    account\n  } = useActiveWeb3React();\n  return useMemo(() => {\n    if (!address || !ABI || !library) return null;\n\n    try {\n      return getContract(address, ABI, library, withSignerIfPossible && account ? account : undefined);\n    } catch (error) {\n      console.error('Failed to get contract', error);\n      return null;\n    }\n  }, [address, ABI, library, withSignerIfPossible, account]);\n}\n\nexport function useTokenContract(tokenAddress, withSignerIfPossible) {\n  return useContract(tokenAddress, ERC20_ABI, withSignerIfPossible);\n}\nexport function useENSRegistrarContract(withSignerIfPossible) {\n  // TODO(igm): find CELO equivalent of ENS\n  return null;\n}\nexport function useENSResolverContract(address, withSignerIfPossible) {\n  return useContract(address, ENS_PUBLIC_RESOLVER_ABI, withSignerIfPossible);\n}\nexport function useBytes32TokenContract(tokenAddress, withSignerIfPossible) {\n  return useContract(tokenAddress, ERC20_BYTES32_ABI, withSignerIfPossible);\n}\nexport function usePairContract(pairAddress, withSignerIfPossible) {\n  return useContract(pairAddress, IUniswapV2PairABI, withSignerIfPossible);\n}\nexport function useMulticallContract() {\n  const {\n    chainId\n  } = useActiveWeb3React();\n  return useContract(chainId ? MULTICALL_NETWORKS[chainId] : undefined, MULTICALL_ABI, false);\n}","map":{"version":3,"sources":["/Users/khoiplus/Desktop/celopad/cpadswaptest/src/hooks/useContract.ts"],"names":["abi","IUniswapV2PairABI","useMemo","ENS_PUBLIC_RESOLVER_ABI","ERC20_BYTES32_ABI","ERC20_ABI","MULTICALL_ABI","MULTICALL_NETWORKS","getContract","useActiveWeb3React","useContract","address","ABI","withSignerIfPossible","library","account","undefined","error","console","useTokenContract","tokenAddress","useENSRegistrarContract","useENSResolverContract","useBytes32TokenContract","usePairContract","pairAddress","useMulticallContract","chainId"],"mappings":"AACA,SAASA,GAAG,IAAIC,iBAAhB,QAAyC,4CAAzC;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,OAAOC,uBAAP,MAAoC,4CAApC;AACA,SAASC,iBAAT,QAAkC,yBAAlC;AACA,OAAOC,SAAP,MAAsB,8BAAtB;AACA,SAASC,aAAT,EAAwBC,kBAAxB,QAAkD,wBAAlD;AACA,SAASC,WAAT,QAA4B,UAA5B;AACA,SAASC,kBAAT,QAAmC,SAAnC,C,CAEA;;AACA,SAASC,WAAT,CAAqBC,OAArB,EAAkDC,GAAlD,EAA4DC,oBAAoB,GAAG,IAAnF,EAA0G;AACxG,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuBN,kBAAkB,EAA/C;AAEA,SAAOP,OAAO,CAAC,MAAM;AACnB,QAAI,CAACS,OAAD,IAAY,CAACC,GAAb,IAAoB,CAACE,OAAzB,EAAkC,OAAO,IAAP;;AAClC,QAAI;AACF,aAAON,WAAW,CAACG,OAAD,EAAUC,GAAV,EAAeE,OAAf,EAAwBD,oBAAoB,IAAIE,OAAxB,GAAkCA,OAAlC,GAA4CC,SAApE,CAAlB;AACD,KAFD,CAEE,OAAOC,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAc,wBAAd,EAAwCA,KAAxC;AACA,aAAO,IAAP;AACD;AACF,GARa,EAQX,CAACN,OAAD,EAAUC,GAAV,EAAeE,OAAf,EAAwBD,oBAAxB,EAA8CE,OAA9C,CARW,CAAd;AASD;;AAED,OAAO,SAASI,gBAAT,CAA0BC,YAA1B,EAAiDP,oBAAjD,EAAkG;AACvG,SAAOH,WAAW,CAACU,YAAD,EAAef,SAAf,EAA0BQ,oBAA1B,CAAlB;AACD;AAED,OAAO,SAASQ,uBAAT,CAAiCR,oBAAjC,EAAkF;AACvF;AACA,SAAO,IAAP;AACD;AAED,OAAO,SAASS,sBAAT,CAAgCX,OAAhC,EAA6DE,oBAA7D,EAA8G;AACnH,SAAOH,WAAW,CAACC,OAAD,EAAUR,uBAAV,EAAmCU,oBAAnC,CAAlB;AACD;AAED,OAAO,SAASU,uBAAT,CAAiCH,YAAjC,EAAwDP,oBAAxD,EAAyG;AAC9G,SAAOH,WAAW,CAACU,YAAD,EAAehB,iBAAf,EAAkCS,oBAAlC,CAAlB;AACD;AAED,OAAO,SAASW,eAAT,CAAyBC,WAAzB,EAA+CZ,oBAA/C,EAAgG;AACrG,SAAOH,WAAW,CAACe,WAAD,EAAcxB,iBAAd,EAAiCY,oBAAjC,CAAlB;AACD;AAED,OAAO,SAASa,oBAAT,GAAiD;AACtD,QAAM;AAAEC,IAAAA;AAAF,MAAclB,kBAAkB,EAAtC;AACA,SAAOC,WAAW,CAACiB,OAAO,GAAGpB,kBAAkB,CAACoB,OAAD,CAArB,GAAiCX,SAAzC,EAAoDV,aAApD,EAAmE,KAAnE,CAAlB;AACD","sourcesContent":["import { Contract } from '@ethersproject/contracts'\nimport { abi as IUniswapV2PairABI } from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport { useMemo } from 'react'\nimport ENS_PUBLIC_RESOLVER_ABI from '../constants/abis/ens-public-resolver.json'\nimport { ERC20_BYTES32_ABI } from '../constants/abis/erc20'\nimport ERC20_ABI from '../constants/abis/erc20.json'\nimport { MULTICALL_ABI, MULTICALL_NETWORKS } from '../constants/multicall'\nimport { getContract } from '../utils'\nimport { useActiveWeb3React } from './index'\n\n// returns null on errors\nfunction useContract(address: string | undefined, ABI: any, withSignerIfPossible = true): Contract | null {\n  const { library, account } = useActiveWeb3React()\n\n  return useMemo(() => {\n    if (!address || !ABI || !library) return null\n    try {\n      return getContract(address, ABI, library, withSignerIfPossible && account ? account : undefined)\n    } catch (error) {\n      console.error('Failed to get contract', error)\n      return null\n    }\n  }, [address, ABI, library, withSignerIfPossible, account])\n}\n\nexport function useTokenContract(tokenAddress?: string, withSignerIfPossible?: boolean): Contract | null {\n  return useContract(tokenAddress, ERC20_ABI, withSignerIfPossible)\n}\n\nexport function useENSRegistrarContract(withSignerIfPossible?: boolean): Contract | null {\n  // TODO(igm): find CELO equivalent of ENS\n  return null\n}\n\nexport function useENSResolverContract(address: string | undefined, withSignerIfPossible?: boolean): Contract | null {\n  return useContract(address, ENS_PUBLIC_RESOLVER_ABI, withSignerIfPossible)\n}\n\nexport function useBytes32TokenContract(tokenAddress?: string, withSignerIfPossible?: boolean): Contract | null {\n  return useContract(tokenAddress, ERC20_BYTES32_ABI, withSignerIfPossible)\n}\n\nexport function usePairContract(pairAddress?: string, withSignerIfPossible?: boolean): Contract | null {\n  return useContract(pairAddress, IUniswapV2PairABI, withSignerIfPossible)\n}\n\nexport function useMulticallContract(): Contract | null {\n  const { chainId } = useActiveWeb3React()\n  return useContract(chainId ? MULTICALL_NETWORKS[chainId] : undefined, MULTICALL_ABI, false)\n}\n"]},"metadata":{},"sourceType":"module"}