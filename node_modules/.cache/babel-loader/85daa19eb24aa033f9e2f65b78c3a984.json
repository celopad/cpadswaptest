{"ast":null,"code":"// Largely based off of CeloVote\n// https://github.com/zviadm/celovote-app/blob/main/src/ledger.ts\nimport { newKit } from '@celo/contractkit';\nimport { AddressValidation, newLedgerWalletWithSetup } from '@celo/wallet-ledger';\nimport TransportWebUSB from '@ledgerhq/hw-transport-webusb';\nimport { CHAIN_INFO } from '@ubeswap/sdk';\nimport { AbstractConnector } from '@web3-react/abstract-connector';\nimport { NETWORK_CHAIN_ID } from 'connectors';\nexport class LedgerKit {\n  constructor(chainId, kit, wallet) {\n    this.chainId = chainId;\n    this.kit = kit;\n    this.wallet = wallet;\n    this.closed = false;\n\n    this.close = () => {\n      if (this.closed) {\n        return;\n      }\n\n      this.closed = true;\n      this.wallet.transport.close();\n      this.kit.stop();\n    };\n  }\n\n  static async init(chainId, idxs) {\n    const transport = await TransportWebUSB.create();\n\n    try {\n      const wallet = await newLedgerWalletWithSetup(transport, idxs, undefined, AddressValidation.never);\n      const kit = newKit(CHAIN_INFO[chainId].fornoURL, wallet);\n      return new LedgerKit(chainId, kit, wallet);\n    } catch (e) {\n      transport.close();\n      throw e;\n    }\n  }\n\n}\nexport class LedgerConnector extends AbstractConnector {\n  constructor(connectedKit) {\n    super({\n      supportedChainIds: [NETWORK_CHAIN_ID]\n    });\n    this.kit = null;\n    this.index = null;\n\n    if (connectedKit) {\n      this.kit = connectedKit.kit;\n      this.index = connectedKit.index;\n    }\n  }\n\n  async activate() {\n    if (this.kit && this.index !== null) {\n      return {\n        provider: this.kit.kit.web3.currentProvider,\n        chainId: NETWORK_CHAIN_ID,\n        account: this.kit.wallet.getAccounts()[this.index]\n      };\n    }\n\n    const idxs = [0, 1, 2, 3, 4];\n    const ledgerKit = await LedgerKit.init(NETWORK_CHAIN_ID, idxs);\n    this.kit = ledgerKit;\n    return {\n      provider: ledgerKit.kit.web3.currentProvider,\n      chainId: NETWORK_CHAIN_ID,\n      account: ledgerKit.wallet.getAccounts()[0]\n    };\n  }\n\n  async getProvider() {\n    var _this$kit$kit$web3$cu, _this$kit;\n\n    return (_this$kit$kit$web3$cu = (_this$kit = this.kit) === null || _this$kit === void 0 ? void 0 : _this$kit.kit.web3.currentProvider) !== null && _this$kit$kit$web3$cu !== void 0 ? _this$kit$kit$web3$cu : null;\n  }\n\n  async getChainId() {\n    return NETWORK_CHAIN_ID;\n  }\n\n  async getAccount() {\n    var _this$kit$wallet$getA, _this$kit2, _this$kit2$wallet$get;\n\n    return (_this$kit$wallet$getA = (_this$kit2 = this.kit) === null || _this$kit2 === void 0 ? void 0 : (_this$kit2$wallet$get = _this$kit2.wallet.getAccounts()) === null || _this$kit2$wallet$get === void 0 ? void 0 : _this$kit2$wallet$get[0]) !== null && _this$kit$wallet$getA !== void 0 ? _this$kit$wallet$getA : null;\n  }\n\n  deactivate() {\n    var _this$kit3;\n\n    (_this$kit3 = this.kit) === null || _this$kit3 === void 0 ? void 0 : _this$kit3.close();\n  }\n\n  async close() {\n    var _this$kit4;\n\n    (_this$kit4 = this.kit) === null || _this$kit4 === void 0 ? void 0 : _this$kit4.close();\n    this.kit = null;\n    this.emitDeactivate();\n  }\n\n}","map":{"version":3,"sources":["/Users/khoiplus/Desktop/celopad/cpadswaptest/src/connectors/ledger/LedgerConnector.ts"],"names":["newKit","AddressValidation","newLedgerWalletWithSetup","TransportWebUSB","CHAIN_INFO","AbstractConnector","NETWORK_CHAIN_ID","LedgerKit","constructor","chainId","kit","wallet","closed","close","transport","stop","init","idxs","create","undefined","never","fornoURL","e","LedgerConnector","connectedKit","supportedChainIds","index","activate","provider","web3","currentProvider","account","getAccounts","ledgerKit","getProvider","getChainId","getAccount","deactivate","emitDeactivate"],"mappings":"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","sourcesContent":["// Largely based off of CeloVote\n// https://github.com/zviadm/celovote-app/blob/main/src/ledger.ts\n\nimport { ContractKit, newKit } from '@celo/contractkit'\nimport { AddressValidation, LedgerWallet, newLedgerWalletWithSetup } from '@celo/wallet-ledger'\nimport TransportWebUSB from '@ledgerhq/hw-transport-webusb'\nimport { ChainId, CHAIN_INFO } from '@ubeswap/sdk'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport { ConnectorUpdate } from '@web3-react/types'\nimport { NETWORK_CHAIN_ID } from 'connectors'\n\nexport class LedgerKit {\n  private closed = false\n  private constructor(public chainId: ChainId, public kit: ContractKit, public wallet: LedgerWallet) {}\n\n  public static async init(chainId: ChainId, idxs: number[]) {\n    const transport = await TransportWebUSB.create()\n    try {\n      const wallet = await newLedgerWalletWithSetup(transport, idxs, undefined, AddressValidation.never)\n      const kit = newKit(CHAIN_INFO[chainId].fornoURL, wallet)\n      return new LedgerKit(chainId, kit, wallet)\n    } catch (e) {\n      transport.close()\n      throw e\n    }\n  }\n\n  close = () => {\n    if (this.closed) {\n      return\n    }\n    this.closed = true\n    this.wallet.transport.close()\n    this.kit.stop()\n  }\n}\n\nexport class LedgerConnector extends AbstractConnector {\n  private kit: LedgerKit | null = null\n  private index: number | null = null\n\n  constructor(connectedKit?: { kit: LedgerKit; index: number }) {\n    super({ supportedChainIds: [NETWORK_CHAIN_ID] })\n    if (connectedKit) {\n      this.kit = connectedKit.kit\n      this.index = connectedKit.index\n    }\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (this.kit && this.index !== null) {\n      return {\n        provider: this.kit.kit.web3.currentProvider,\n        chainId: NETWORK_CHAIN_ID,\n        account: this.kit.wallet.getAccounts()[this.index]\n      }\n    }\n    const idxs = [0, 1, 2, 3, 4]\n    const ledgerKit = await LedgerKit.init(NETWORK_CHAIN_ID, idxs)\n    this.kit = ledgerKit\n    return {\n      provider: ledgerKit.kit.web3.currentProvider,\n      chainId: NETWORK_CHAIN_ID,\n      account: ledgerKit.wallet.getAccounts()[0]\n    }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.kit?.kit.web3.currentProvider ?? null\n  }\n\n  public async getChainId(): Promise<number> {\n    return NETWORK_CHAIN_ID\n  }\n\n  public async getAccount(): Promise<string | null> {\n    return this.kit?.wallet.getAccounts()?.[0] ?? null\n  }\n\n  public deactivate() {\n    this.kit?.close()\n  }\n\n  async close() {\n    this.kit?.close()\n    this.kit = null\n    this.emitDeactivate()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}