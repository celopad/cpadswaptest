{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar connect_1 = require(\"@celo/connect\");\n\nvar wallet_local_1 = require(\"@celo/wallet-local\");\n\nvar bignumber_js_1 = require(\"bignumber.js\");\n\nvar net_1 = __importDefault(require(\"net\"));\n\nvar web3_1 = __importDefault(require(\"web3\"));\n\nvar address_registry_1 = require(\"./address-registry\");\n\nvar base_1 = require(\"./base\");\n\nvar contract_cache_1 = require(\"./contract-cache\");\n\nvar web3_contract_cache_1 = require(\"./web3-contract-cache\");\n/**\n * Creates a new instance of `ContractKit` give a nodeUrl\n * @param url CeloBlockchain node url\n * @optional wallet to reuse or add a wallet different that the default (example ledger-wallet)\n */\n\n\nfunction newKit(url, wallet) {\n  var web3 = url.endsWith('.ipc') ? new web3_1.default(new web3_1.default.providers.IpcProvider(url, net_1.default)) : new web3_1.default(url);\n  return newKitFromWeb3(web3, wallet);\n}\n\nexports.newKit = newKit;\n/**\n * Creates a new instance of the `ContractKit` with a web3 instance\n * @param web3 Web3 instance\n */\n\nfunction newKitFromWeb3(web3, wallet) {\n  if (wallet === void 0) {\n    wallet = new wallet_local_1.LocalWallet();\n  }\n\n  if (!web3.currentProvider) {\n    throw new Error('Must have a valid Provider');\n  }\n\n  return new ContractKit(new connect_1.Connection(web3, wallet));\n}\n\nexports.newKitFromWeb3 = newKitFromWeb3;\n\nvar ContractKit =\n/** @class */\nfunction () {\n  function ContractKit(connection) {\n    this.connection = connection; // TODO: remove once cUSD gasPrice is available on minimumClientVersion node rpc\n\n    this.gasPriceSuggestionMultiplier = 5;\n    this.registry = new address_registry_1.AddressRegistry(this);\n    this._web3Contracts = new web3_contract_cache_1.Web3ContractCache(this);\n    this.contracts = new contract_cache_1.WrapperCache(this);\n  }\n\n  ContractKit.prototype.getWallet = function () {\n    return this.connection.wallet;\n  };\n\n  ContractKit.prototype.getTotalBalance = function (address) {\n    return __awaiter(this, void 0, void 0, function () {\n      var celoToken, stableToken, lockedCelo, goldBalance, lockedBalance, dollarBalance, pending, err_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.contracts.getGoldToken()];\n\n          case 1:\n            celoToken = _a.sent();\n            return [4\n            /*yield*/\n            , this.contracts.getStableToken()];\n\n          case 2:\n            stableToken = _a.sent();\n            return [4\n            /*yield*/\n            , this.contracts.getLockedGold()];\n\n          case 3:\n            lockedCelo = _a.sent();\n            return [4\n            /*yield*/\n            , celoToken.balanceOf(address)];\n\n          case 4:\n            goldBalance = _a.sent();\n            return [4\n            /*yield*/\n            , lockedCelo.getAccountTotalLockedGold(address)];\n\n          case 5:\n            lockedBalance = _a.sent();\n            return [4\n            /*yield*/\n            , stableToken.balanceOf(address)];\n\n          case 6:\n            dollarBalance = _a.sent();\n            pending = new bignumber_js_1.BigNumber(0);\n            _a.label = 7;\n\n          case 7:\n            _a.trys.push([7, 9,, 10]);\n\n            return [4\n            /*yield*/\n            , lockedCelo.getPendingWithdrawalsTotalValue(address)];\n\n          case 8:\n            pending = _a.sent();\n            return [3\n            /*break*/\n            , 10];\n\n          case 9:\n            err_1 = _a.sent();\n            return [3\n            /*break*/\n            , 10];\n\n          case 10:\n            return [2\n            /*return*/\n            , {\n              CELO: goldBalance,\n              lockedCELO: lockedBalance,\n              cUSD: dollarBalance,\n              pending: pending\n            }];\n        }\n      });\n    });\n  };\n\n  ContractKit.prototype.getNetworkConfig = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var token1, token2, promises, contracts, res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.registry.addressFor(base_1.CeloContract.GoldToken)];\n\n          case 1:\n            token1 = _a.sent();\n            return [4\n            /*yield*/\n            , this.registry.addressFor(base_1.CeloContract.StableToken) // There can only be `10` unique parametrized types in Promise.all call, that is how\n            // its typescript typing is setup. Thus, since we crossed threshold of 10\n            // have to explicitly cast it to just any type and discard type information.\n            ];\n\n          case 2:\n            token2 = _a.sent();\n            promises = [this.contracts.getExchange(), this.contracts.getElection(), this.contracts.getAttestations(), this.contracts.getGovernance(), this.contracts.getLockedGold(), this.contracts.getSortedOracles(), this.contracts.getGasPriceMinimum(), this.contracts.getReserve(), this.contracts.getStableToken(), this.contracts.getValidators(), this.contracts.getDowntimeSlasher(), this.contracts.getBlockchainParameters()];\n            return [4\n            /*yield*/\n            , Promise.all(promises)];\n\n          case 3:\n            contracts = _a.sent();\n            return [4\n            /*yield*/\n            , Promise.all([contracts[0].getConfig(), contracts[1].getConfig(), contracts[2].getConfig([token1, token2]), contracts[3].getConfig(), contracts[4].getConfig(), contracts[5].getConfig(), contracts[6].getConfig(), contracts[7].getConfig(), contracts[8].getConfig(), contracts[9].getConfig(), contracts[10].getConfig(), contracts[11].getConfig()])];\n\n          case 4:\n            res = _a.sent();\n            return [2\n            /*return*/\n            , {\n              exchange: res[0],\n              election: res[1],\n              attestations: res[2],\n              governance: res[3],\n              lockedGold: res[4],\n              sortedOracles: res[5],\n              gasPriceMinimum: res[6],\n              reserve: res[7],\n              stableToken: res[8],\n              validators: res[9],\n              downtimeSlasher: res[10],\n              blockchainParameters: res[11]\n            }];\n        }\n      });\n    });\n  };\n\n  ContractKit.prototype.getHumanReadableNetworkConfig = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var token1, token2, promises, contracts, res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.registry.addressFor(base_1.CeloContract.GoldToken)];\n\n          case 1:\n            token1 = _a.sent();\n            return [4\n            /*yield*/\n            , this.registry.addressFor(base_1.CeloContract.StableToken)];\n\n          case 2:\n            token2 = _a.sent();\n            promises = [this.contracts.getExchange(), this.contracts.getElection(), this.contracts.getAttestations(), this.contracts.getGovernance(), this.contracts.getLockedGold(), this.contracts.getSortedOracles(), this.contracts.getGasPriceMinimum(), this.contracts.getReserve(), this.contracts.getStableToken(), this.contracts.getValidators(), this.contracts.getDowntimeSlasher(), this.contracts.getBlockchainParameters()];\n            return [4\n            /*yield*/\n            , Promise.all(promises)];\n\n          case 3:\n            contracts = _a.sent();\n            return [4\n            /*yield*/\n            , Promise.all([contracts[0].getHumanReadableConfig(), contracts[1].getConfig(), contracts[2].getHumanReadableConfig([token1, token2]), contracts[3].getHumanReadableConfig(), contracts[4].getHumanReadableConfig(), contracts[5].getHumanReadableConfig(), contracts[6].getConfig(), contracts[7].getConfig(), contracts[8].getHumanReadableConfig(), contracts[9].getHumanReadableConfig(), contracts[10].getHumanReadableConfig(), contracts[11].getConfig()])];\n\n          case 4:\n            res = _a.sent();\n            return [2\n            /*return*/\n            , {\n              exchange: res[0],\n              election: res[1],\n              attestations: res[2],\n              governance: res[3],\n              lockedGold: res[4],\n              sortedOracles: res[5],\n              gasPriceMinimum: res[6],\n              reserve: res[7],\n              stableToken: res[8],\n              validators: res[9],\n              downtimeSlasher: res[10],\n              blockchainParameters: res[11]\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Set CeloToken to use to pay for gas fees\n   * @param token cUSD (StableToken) or CELO (GoldToken)\n   */\n\n\n  ContractKit.prototype.setFeeCurrency = function (token) {\n    return __awaiter(this, void 0, void 0, function () {\n      var address, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(token === base_1.CeloContract.GoldToken)) return [3\n            /*break*/\n            , 1];\n            _a = undefined;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.registry.addressFor(token)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            address = _a;\n            if (!address) return [3\n            /*break*/\n            , 5];\n            return [4\n            /*yield*/\n            , this.updateGasPriceInConnectionLayer(address)];\n\n          case 4:\n            _b.sent();\n\n            _b.label = 5;\n\n          case 5:\n            this.connection.defaultFeeCurrency = address;\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }; // TODO: remove once cUSD gasPrice is available on minimumClientVersion node rpc\n\n\n  ContractKit.prototype.updateGasPriceInConnectionLayer = function (currency) {\n    return __awaiter(this, void 0, void 0, function () {\n      var gasPriceMinimum, rawGasPrice, gasPrice;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.contracts.getGasPriceMinimum()];\n\n          case 1:\n            gasPriceMinimum = _a.sent();\n            return [4\n            /*yield*/\n            , gasPriceMinimum.getGasPriceMinimum(currency)];\n\n          case 2:\n            rawGasPrice = _a.sent();\n            gasPrice = rawGasPrice.multipliedBy(this.gasPriceSuggestionMultiplier).toFixed();\n            return [4\n            /*yield*/\n            , this.connection.setGasPriceForCurrency(currency, gasPrice)];\n\n          case 3:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  ContractKit.prototype.getEpochSize = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var validators, epochSize;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.contracts.getValidators()];\n\n          case 1:\n            validators = _a.sent();\n            return [4\n            /*yield*/\n            , validators.getEpochSize()];\n\n          case 2:\n            epochSize = _a.sent();\n            return [2\n            /*return*/\n            , epochSize.toNumber()];\n        }\n      });\n    });\n  };\n\n  ContractKit.prototype.getFirstBlockNumberForEpoch = function (epochNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var epochSize;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getEpochSize() // Follows GetEpochFirstBlockNumber from celo-blockchain/blob/master/consensus/istanbul/utils.go\n            ];\n\n          case 1:\n            epochSize = _a.sent(); // Follows GetEpochFirstBlockNumber from celo-blockchain/blob/master/consensus/istanbul/utils.go\n\n            if (epochNumber === 0) {\n              // No first block for epoch 0\n              return [2\n              /*return*/\n              , 0];\n            }\n\n            return [2\n            /*return*/\n            , (epochNumber - 1) * epochSize + 1];\n        }\n      });\n    });\n  };\n\n  ContractKit.prototype.getLastBlockNumberForEpoch = function (epochNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var epochSize, firstBlockNumberForEpoch;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getEpochSize() // Follows GetEpochLastBlockNumber from celo-blockchain/blob/master/consensus/istanbul/utils.go\n            ];\n\n          case 1:\n            epochSize = _a.sent(); // Follows GetEpochLastBlockNumber from celo-blockchain/blob/master/consensus/istanbul/utils.go\n\n            if (epochNumber === 0) {\n              return [2\n              /*return*/\n              , 0];\n            }\n\n            return [4\n            /*yield*/\n            , this.getFirstBlockNumberForEpoch(epochNumber)];\n\n          case 2:\n            firstBlockNumberForEpoch = _a.sent();\n            return [2\n            /*return*/\n            , firstBlockNumberForEpoch + (epochSize - 1)];\n        }\n      });\n    });\n  };\n\n  ContractKit.prototype.getEpochNumberOfBlock = function (blockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var epochSize, epochNumber;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getEpochSize() // Follows GetEpochNumber from celo-blockchain/blob/master/consensus/istanbul/utils.go\n            ];\n\n          case 1:\n            epochSize = _a.sent();\n            epochNumber = Math.floor(blockNumber / epochSize);\n\n            if (blockNumber % epochSize === 0) {\n              return [2\n              /*return*/\n              , epochNumber];\n            } else {\n              return [2\n              /*return*/\n              , epochNumber + 1];\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }; // *** NOTICE ***\n  // Next functions exists for backwards compatibility\n  // These should be consumed via connection to avoid future deprecation issues\n\n\n  ContractKit.prototype.addAccount = function (privateKey) {\n    this.connection.addAccount(privateKey);\n  };\n\n  Object.defineProperty(ContractKit.prototype, \"defaultAccount\", {\n    get: function () {\n      return this.connection.defaultAccount;\n    },\n    set: function (address) {\n      this.connection.defaultAccount = address;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ContractKit.prototype, \"gasInflationFactor\", {\n    get: function () {\n      return this.connection.defaultGasInflationFactor;\n    },\n    set: function (factor) {\n      this.connection.defaultGasInflationFactor = factor;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ContractKit.prototype, \"gasPrice\", {\n    get: function () {\n      return this.connection.defaultGasPrice;\n    },\n    set: function (price) {\n      this.connection.defaultGasPrice = price;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ContractKit.prototype, \"defaultFeeCurrency\", {\n    get: function () {\n      return this.connection.defaultFeeCurrency;\n    },\n    set: function (address) {\n      this.connection.defaultFeeCurrency = address;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ContractKit.prototype.isListening = function () {\n    return this.connection.isListening();\n  };\n\n  ContractKit.prototype.isSyncing = function () {\n    return this.connection.isSyncing();\n  };\n\n  ContractKit.prototype.fillGasPrice = function (tx) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(tx.feeCurrency && tx.gasPrice === '0')) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.updateGasPriceInConnectionLayer(tx.feeCurrency)];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            , this.connection.fillGasPrice(tx)];\n        }\n      });\n    });\n  };\n\n  ContractKit.prototype.sendTransaction = function (tx) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.connection.sendTransaction(tx)];\n      });\n    });\n  };\n\n  ContractKit.prototype.sendTransactionObject = function (txObj, tx) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.connection.sendTransactionObject(txObj, tx)];\n      });\n    });\n  };\n\n  ContractKit.prototype.signTypedData = function (signer, typedData) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.connection.signTypedData(signer, typedData)];\n      });\n    });\n  };\n\n  ContractKit.prototype.stop = function () {\n    this.connection.stop();\n  };\n\n  Object.defineProperty(ContractKit.prototype, \"web3\", {\n    get: function () {\n      return this.connection.web3;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return ContractKit;\n}();\n\nexports.ContractKit = ContractKit;","map":{"version":3,"sources":["../src/kit.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar connect_1 = require(\"@celo/connect\");\nvar wallet_local_1 = require(\"@celo/wallet-local\");\nvar bignumber_js_1 = require(\"bignumber.js\");\nvar net_1 = __importDefault(require(\"net\"));\nvar web3_1 = __importDefault(require(\"web3\"));\nvar address_registry_1 = require(\"./address-registry\");\nvar base_1 = require(\"./base\");\nvar contract_cache_1 = require(\"./contract-cache\");\nvar web3_contract_cache_1 = require(\"./web3-contract-cache\");\n/**\n * Creates a new instance of `ContractKit` give a nodeUrl\n * @param url CeloBlockchain node url\n * @optional wallet to reuse or add a wallet different that the default (example ledger-wallet)\n */\nfunction newKit(url, wallet) {\n    var web3 = url.endsWith('.ipc')\n        ? new web3_1.default(new web3_1.default.providers.IpcProvider(url, net_1.default))\n        : new web3_1.default(url);\n    return newKitFromWeb3(web3, wallet);\n}\nexports.newKit = newKit;\n/**\n * Creates a new instance of the `ContractKit` with a web3 instance\n * @param web3 Web3 instance\n */\nfunction newKitFromWeb3(web3, wallet) {\n    if (wallet === void 0) { wallet = new wallet_local_1.LocalWallet(); }\n    if (!web3.currentProvider) {\n        throw new Error('Must have a valid Provider');\n    }\n    return new ContractKit(new connect_1.Connection(web3, wallet));\n}\nexports.newKitFromWeb3 = newKitFromWeb3;\nvar ContractKit = /** @class */ (function () {\n    function ContractKit(connection) {\n        this.connection = connection;\n        // TODO: remove once cUSD gasPrice is available on minimumClientVersion node rpc\n        this.gasPriceSuggestionMultiplier = 5;\n        this.registry = new address_registry_1.AddressRegistry(this);\n        this._web3Contracts = new web3_contract_cache_1.Web3ContractCache(this);\n        this.contracts = new contract_cache_1.WrapperCache(this);\n    }\n    ContractKit.prototype.getWallet = function () {\n        return this.connection.wallet;\n    };\n    ContractKit.prototype.getTotalBalance = function (address) {\n        return __awaiter(this, void 0, void 0, function () {\n            var celoToken, stableToken, lockedCelo, goldBalance, lockedBalance, dollarBalance, pending, err_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.contracts.getGoldToken()];\n                    case 1:\n                        celoToken = _a.sent();\n                        return [4 /*yield*/, this.contracts.getStableToken()];\n                    case 2:\n                        stableToken = _a.sent();\n                        return [4 /*yield*/, this.contracts.getLockedGold()];\n                    case 3:\n                        lockedCelo = _a.sent();\n                        return [4 /*yield*/, celoToken.balanceOf(address)];\n                    case 4:\n                        goldBalance = _a.sent();\n                        return [4 /*yield*/, lockedCelo.getAccountTotalLockedGold(address)];\n                    case 5:\n                        lockedBalance = _a.sent();\n                        return [4 /*yield*/, stableToken.balanceOf(address)];\n                    case 6:\n                        dollarBalance = _a.sent();\n                        pending = new bignumber_js_1.BigNumber(0);\n                        _a.label = 7;\n                    case 7:\n                        _a.trys.push([7, 9, , 10]);\n                        return [4 /*yield*/, lockedCelo.getPendingWithdrawalsTotalValue(address)];\n                    case 8:\n                        pending = _a.sent();\n                        return [3 /*break*/, 10];\n                    case 9:\n                        err_1 = _a.sent();\n                        return [3 /*break*/, 10];\n                    case 10: return [2 /*return*/, {\n                            CELO: goldBalance,\n                            lockedCELO: lockedBalance,\n                            cUSD: dollarBalance,\n                            pending: pending,\n                        }];\n                }\n            });\n        });\n    };\n    ContractKit.prototype.getNetworkConfig = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var token1, token2, promises, contracts, res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.registry.addressFor(base_1.CeloContract.GoldToken)];\n                    case 1:\n                        token1 = _a.sent();\n                        return [4 /*yield*/, this.registry.addressFor(base_1.CeloContract.StableToken)\n                            // There can only be `10` unique parametrized types in Promise.all call, that is how\n                            // its typescript typing is setup. Thus, since we crossed threshold of 10\n                            // have to explicitly cast it to just any type and discard type information.\n                        ];\n                    case 2:\n                        token2 = _a.sent();\n                        promises = [\n                            this.contracts.getExchange(),\n                            this.contracts.getElection(),\n                            this.contracts.getAttestations(),\n                            this.contracts.getGovernance(),\n                            this.contracts.getLockedGold(),\n                            this.contracts.getSortedOracles(),\n                            this.contracts.getGasPriceMinimum(),\n                            this.contracts.getReserve(),\n                            this.contracts.getStableToken(),\n                            this.contracts.getValidators(),\n                            this.contracts.getDowntimeSlasher(),\n                            this.contracts.getBlockchainParameters(),\n                        ];\n                        return [4 /*yield*/, Promise.all(promises)];\n                    case 3:\n                        contracts = _a.sent();\n                        return [4 /*yield*/, Promise.all([\n                                contracts[0].getConfig(),\n                                contracts[1].getConfig(),\n                                contracts[2].getConfig([token1, token2]),\n                                contracts[3].getConfig(),\n                                contracts[4].getConfig(),\n                                contracts[5].getConfig(),\n                                contracts[6].getConfig(),\n                                contracts[7].getConfig(),\n                                contracts[8].getConfig(),\n                                contracts[9].getConfig(),\n                                contracts[10].getConfig(),\n                                contracts[11].getConfig(),\n                            ])];\n                    case 4:\n                        res = _a.sent();\n                        return [2 /*return*/, {\n                                exchange: res[0],\n                                election: res[1],\n                                attestations: res[2],\n                                governance: res[3],\n                                lockedGold: res[4],\n                                sortedOracles: res[5],\n                                gasPriceMinimum: res[6],\n                                reserve: res[7],\n                                stableToken: res[8],\n                                validators: res[9],\n                                downtimeSlasher: res[10],\n                                blockchainParameters: res[11],\n                            }];\n                }\n            });\n        });\n    };\n    ContractKit.prototype.getHumanReadableNetworkConfig = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var token1, token2, promises, contracts, res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.registry.addressFor(base_1.CeloContract.GoldToken)];\n                    case 1:\n                        token1 = _a.sent();\n                        return [4 /*yield*/, this.registry.addressFor(base_1.CeloContract.StableToken)];\n                    case 2:\n                        token2 = _a.sent();\n                        promises = [\n                            this.contracts.getExchange(),\n                            this.contracts.getElection(),\n                            this.contracts.getAttestations(),\n                            this.contracts.getGovernance(),\n                            this.contracts.getLockedGold(),\n                            this.contracts.getSortedOracles(),\n                            this.contracts.getGasPriceMinimum(),\n                            this.contracts.getReserve(),\n                            this.contracts.getStableToken(),\n                            this.contracts.getValidators(),\n                            this.contracts.getDowntimeSlasher(),\n                            this.contracts.getBlockchainParameters(),\n                        ];\n                        return [4 /*yield*/, Promise.all(promises)];\n                    case 3:\n                        contracts = _a.sent();\n                        return [4 /*yield*/, Promise.all([\n                                contracts[0].getHumanReadableConfig(),\n                                contracts[1].getConfig(),\n                                contracts[2].getHumanReadableConfig([token1, token2]),\n                                contracts[3].getHumanReadableConfig(),\n                                contracts[4].getHumanReadableConfig(),\n                                contracts[5].getHumanReadableConfig(),\n                                contracts[6].getConfig(),\n                                contracts[7].getConfig(),\n                                contracts[8].getHumanReadableConfig(),\n                                contracts[9].getHumanReadableConfig(),\n                                contracts[10].getHumanReadableConfig(),\n                                contracts[11].getConfig(),\n                            ])];\n                    case 4:\n                        res = _a.sent();\n                        return [2 /*return*/, {\n                                exchange: res[0],\n                                election: res[1],\n                                attestations: res[2],\n                                governance: res[3],\n                                lockedGold: res[4],\n                                sortedOracles: res[5],\n                                gasPriceMinimum: res[6],\n                                reserve: res[7],\n                                stableToken: res[8],\n                                validators: res[9],\n                                downtimeSlasher: res[10],\n                                blockchainParameters: res[11],\n                            }];\n                }\n            });\n        });\n    };\n    /**\n     * Set CeloToken to use to pay for gas fees\n     * @param token cUSD (StableToken) or CELO (GoldToken)\n     */\n    ContractKit.prototype.setFeeCurrency = function (token) {\n        return __awaiter(this, void 0, void 0, function () {\n            var address, _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(token === base_1.CeloContract.GoldToken)) return [3 /*break*/, 1];\n                        _a = undefined;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.registry.addressFor(token)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        address = _a;\n                        if (!address) return [3 /*break*/, 5];\n                        return [4 /*yield*/, this.updateGasPriceInConnectionLayer(address)];\n                    case 4:\n                        _b.sent();\n                        _b.label = 5;\n                    case 5:\n                        this.connection.defaultFeeCurrency = address;\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // TODO: remove once cUSD gasPrice is available on minimumClientVersion node rpc\n    ContractKit.prototype.updateGasPriceInConnectionLayer = function (currency) {\n        return __awaiter(this, void 0, void 0, function () {\n            var gasPriceMinimum, rawGasPrice, gasPrice;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.contracts.getGasPriceMinimum()];\n                    case 1:\n                        gasPriceMinimum = _a.sent();\n                        return [4 /*yield*/, gasPriceMinimum.getGasPriceMinimum(currency)];\n                    case 2:\n                        rawGasPrice = _a.sent();\n                        gasPrice = rawGasPrice.multipliedBy(this.gasPriceSuggestionMultiplier).toFixed();\n                        return [4 /*yield*/, this.connection.setGasPriceForCurrency(currency, gasPrice)];\n                    case 3:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    ContractKit.prototype.getEpochSize = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var validators, epochSize;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.contracts.getValidators()];\n                    case 1:\n                        validators = _a.sent();\n                        return [4 /*yield*/, validators.getEpochSize()];\n                    case 2:\n                        epochSize = _a.sent();\n                        return [2 /*return*/, epochSize.toNumber()];\n                }\n            });\n        });\n    };\n    ContractKit.prototype.getFirstBlockNumberForEpoch = function (epochNumber) {\n        return __awaiter(this, void 0, void 0, function () {\n            var epochSize;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getEpochSize()\n                        // Follows GetEpochFirstBlockNumber from celo-blockchain/blob/master/consensus/istanbul/utils.go\n                    ];\n                    case 1:\n                        epochSize = _a.sent();\n                        // Follows GetEpochFirstBlockNumber from celo-blockchain/blob/master/consensus/istanbul/utils.go\n                        if (epochNumber === 0) {\n                            // No first block for epoch 0\n                            return [2 /*return*/, 0];\n                        }\n                        return [2 /*return*/, (epochNumber - 1) * epochSize + 1];\n                }\n            });\n        });\n    };\n    ContractKit.prototype.getLastBlockNumberForEpoch = function (epochNumber) {\n        return __awaiter(this, void 0, void 0, function () {\n            var epochSize, firstBlockNumberForEpoch;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getEpochSize()\n                        // Follows GetEpochLastBlockNumber from celo-blockchain/blob/master/consensus/istanbul/utils.go\n                    ];\n                    case 1:\n                        epochSize = _a.sent();\n                        // Follows GetEpochLastBlockNumber from celo-blockchain/blob/master/consensus/istanbul/utils.go\n                        if (epochNumber === 0) {\n                            return [2 /*return*/, 0];\n                        }\n                        return [4 /*yield*/, this.getFirstBlockNumberForEpoch(epochNumber)];\n                    case 2:\n                        firstBlockNumberForEpoch = _a.sent();\n                        return [2 /*return*/, firstBlockNumberForEpoch + (epochSize - 1)];\n                }\n            });\n        });\n    };\n    ContractKit.prototype.getEpochNumberOfBlock = function (blockNumber) {\n        return __awaiter(this, void 0, void 0, function () {\n            var epochSize, epochNumber;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getEpochSize()\n                        // Follows GetEpochNumber from celo-blockchain/blob/master/consensus/istanbul/utils.go\n                    ];\n                    case 1:\n                        epochSize = _a.sent();\n                        epochNumber = Math.floor(blockNumber / epochSize);\n                        if (blockNumber % epochSize === 0) {\n                            return [2 /*return*/, epochNumber];\n                        }\n                        else {\n                            return [2 /*return*/, epochNumber + 1];\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // *** NOTICE ***\n    // Next functions exists for backwards compatibility\n    // These should be consumed via connection to avoid future deprecation issues\n    ContractKit.prototype.addAccount = function (privateKey) {\n        this.connection.addAccount(privateKey);\n    };\n    Object.defineProperty(ContractKit.prototype, \"defaultAccount\", {\n        get: function () {\n            return this.connection.defaultAccount;\n        },\n        set: function (address) {\n            this.connection.defaultAccount = address;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ContractKit.prototype, \"gasInflationFactor\", {\n        get: function () {\n            return this.connection.defaultGasInflationFactor;\n        },\n        set: function (factor) {\n            this.connection.defaultGasInflationFactor = factor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ContractKit.prototype, \"gasPrice\", {\n        get: function () {\n            return this.connection.defaultGasPrice;\n        },\n        set: function (price) {\n            this.connection.defaultGasPrice = price;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ContractKit.prototype, \"defaultFeeCurrency\", {\n        get: function () {\n            return this.connection.defaultFeeCurrency;\n        },\n        set: function (address) {\n            this.connection.defaultFeeCurrency = address;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ContractKit.prototype.isListening = function () {\n        return this.connection.isListening();\n    };\n    ContractKit.prototype.isSyncing = function () {\n        return this.connection.isSyncing();\n    };\n    ContractKit.prototype.fillGasPrice = function (tx) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!(tx.feeCurrency && tx.gasPrice === '0')) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.updateGasPriceInConnectionLayer(tx.feeCurrency)];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2: return [2 /*return*/, this.connection.fillGasPrice(tx)];\n                }\n            });\n        });\n    };\n    ContractKit.prototype.sendTransaction = function (tx) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.connection.sendTransaction(tx)];\n            });\n        });\n    };\n    ContractKit.prototype.sendTransactionObject = function (txObj, tx) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.connection.sendTransactionObject(txObj, tx)];\n            });\n        });\n    };\n    ContractKit.prototype.signTypedData = function (signer, typedData) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.connection.signTypedData(signer, typedData)];\n            });\n        });\n    };\n    ContractKit.prototype.stop = function () {\n        this.connection.stop();\n    };\n    Object.defineProperty(ContractKit.prototype, \"web3\", {\n        get: function () {\n            return this.connection.web3;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ContractKit;\n}());\nexports.ContractKit = ContractKit;\n//# sourceMappingURL=kit.js.map"]},"metadata":{},"sourceType":"script"}