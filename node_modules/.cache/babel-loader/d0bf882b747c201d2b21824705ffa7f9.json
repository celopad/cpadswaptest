{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar address_1 = require(\"@celo/base/lib/address\");\n\nvar address_2 = require(\"@celo/utils/lib/address\");\n\nvar solidity_1 = require(\"@celo/utils/lib/solidity\");\n\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nvar utf8_1 = require(\"utf8\");\n/**\n * Formats the input of a transaction and converts all values to HEX\n */\n\n\nfunction inputCeloTxFormatter(tx) {\n  var _a, _b, _c, _d;\n\n  tx.from = inputAddressFormatter((_a = tx.from) === null || _a === void 0 ? void 0 : _a.toString());\n  tx.to = inputAddressFormatter(tx.to);\n  tx.feeCurrency = inputAddressFormatter(tx.feeCurrency);\n  tx.gatewayFeeRecipient = inputAddressFormatter(tx.gatewayFeeRecipient);\n\n  if (tx.data) {\n    tx.data = address_1.ensureLeading0x(tx.data);\n  }\n\n  if (tx.data && !isHex(tx.data)) {\n    throw new Error('The data field must be HEX encoded data.');\n  }\n\n  tx.gas = numberToHex(tx.gas);\n  tx.gasPrice = numberToHex((_b = tx.gasPrice) === null || _b === void 0 ? void 0 : _b.toString());\n  tx.value = numberToHex((_c = tx.value) === null || _c === void 0 ? void 0 : _c.toString()); // @ts-ignore - nonce is defined as number, but uses as string (web3)\n\n  tx.nonce = numberToHex((_d = tx.nonce) === null || _d === void 0 ? void 0 : _d.toString());\n  tx.gatewayFee = numberToHex(tx.gatewayFee); // @ts-ignore - prune undefines\n\n  Object.keys(tx).forEach(function (key) {\n    return tx[key] === undefined && delete tx[key];\n  });\n  return tx;\n}\n\nexports.inputCeloTxFormatter = inputCeloTxFormatter;\n\nfunction outputCeloTxFormatter(tx) {\n  if (tx.blockNumber !== null) {\n    tx.blockNumber = hexToNumber(tx.blockNumber);\n  }\n\n  if (tx.transactionIndex !== null) {\n    tx.transactionIndex = hexToNumber(tx.transactionIndex);\n  }\n\n  tx.nonce = hexToNumber(tx.nonce);\n  tx.gas = hexToNumber(tx.gas);\n  tx.gasPrice = outputBigNumberFormatter(tx.gasPrice);\n  tx.value = outputBigNumberFormatter(tx.value);\n  tx.gatewayFee = outputBigNumberFormatter(tx.gatewayFee);\n  tx.to = tx.to && address_2.isValidAddress(tx.to) ? // tx.to could be `0x0` or `null` while contract creation\n  tx.to = address_2.toChecksumAddress(tx.to) : null; // set to `null` if invalid address\n\n  if (tx.from) {\n    tx.from = address_2.toChecksumAddress(tx.from);\n  }\n\n  if (tx.feeCurrency) {\n    tx.feeCurrency = address_2.toChecksumAddress(tx.feeCurrency);\n  }\n\n  if (tx.gatewayFeeRecipient) {\n    tx.gatewayFeeRecipient = address_2.toChecksumAddress(tx.gatewayFeeRecipient);\n  }\n\n  return tx;\n}\n\nexports.outputCeloTxFormatter = outputCeloTxFormatter;\n\nfunction outputCeloTxReceiptFormatter(receipt) {\n  if (typeof receipt !== 'object') {\n    throw new Error('Received receipt is invalid: ' + receipt);\n  }\n\n  if (receipt.blockNumber !== null) {\n    receipt.blockNumber = hexToNumber(receipt.blockNumber);\n  }\n\n  if (receipt.transactionIndex !== null) {\n    receipt.transactionIndex = hexToNumber(receipt.transactionIndex);\n  }\n\n  receipt.cumulativeGasUsed = hexToNumber(receipt.cumulativeGasUsed);\n  receipt.gasUsed = hexToNumber(receipt.gasUsed);\n\n  if (Array.isArray(receipt.logs)) {\n    receipt.logs = receipt.logs.map(outputLogFormatter);\n  }\n\n  if (receipt.contractAddress) {\n    receipt.contractAddress = address_2.toChecksumAddress(receipt.contractAddress);\n  }\n\n  if (typeof receipt.status !== 'undefined' && receipt.status !== null) {\n    receipt.status = Boolean(parseInt(address_1.trimLeading0x(receipt.status), 10));\n  }\n\n  return receipt;\n}\n\nexports.outputCeloTxReceiptFormatter = outputCeloTxReceiptFormatter;\n\nfunction inputDefaultBlockNumberFormatter(blockNumber) {\n  if (blockNumber == null) {\n    blockNumber = 'latest';\n  }\n\n  return inputBlockNumberFormatter(blockNumber);\n}\n\nexports.inputDefaultBlockNumberFormatter = inputDefaultBlockNumberFormatter;\n\nfunction inputBlockNumberFormatter(blockNumber) {\n  if (blockNumber == null) {\n    return undefined;\n  }\n\n  if (isPredefinedBlockNumber(blockNumber)) {\n    return blockNumber;\n  }\n\n  if (blockNumber === 'genesis') {\n    return '0x0';\n  }\n\n  return isHexStrict(blockNumber.toString()) ? blockNumber.toString().toLocaleLowerCase() : numberToHex(blockNumber.toString());\n}\n\nexports.inputBlockNumberFormatter = inputBlockNumberFormatter;\n\nfunction outputBlockFormatter(block) {\n  // transform to number\n  block.gasLimit = hexToNumber(block.gasLimit);\n  block.gasUsed = hexToNumber(block.gasUsed);\n  block.size = hexToNumber(block.size);\n  block.timestamp = hexToNumber(block.timestamp);\n\n  if (block.number !== null) {\n    block.number = hexToNumber(block.number);\n  }\n\n  if (block.difficulty) {\n    block.difficulty = outputBigNumberFormatter(block.difficulty);\n  }\n\n  if (block.totalDifficulty) {\n    block.totalDifficulty = outputBigNumberFormatter(block.totalDifficulty);\n  }\n\n  if (Array.isArray(block.transactions)) {\n    block.transactions.forEach(function (item) {\n      if (typeof item !== 'string' && !(item instanceof String)) {\n        return outputCeloTxFormatter(item);\n      }\n    });\n  }\n\n  if (block.miner) {\n    block.miner = address_2.toChecksumAddress(block.miner);\n  }\n\n  return block;\n}\n\nexports.outputBlockFormatter = outputBlockFormatter;\n\nfunction hexToNumber(hex) {\n  if (hex) {\n    return new bignumber_js_1.default(hex).toNumber();\n  }\n\n  return undefined;\n}\n\nexports.hexToNumber = hexToNumber;\n\nfunction outputLogFormatter(log) {\n  // generate a custom log id\n  if (typeof log.blockHash === 'string' && typeof log.transactionHash === 'string' && typeof log.logIndex === 'string') {\n    var shaId = solidity_1.sha3(address_1.trimLeading0x(log.blockHash) + address_1.trimLeading0x(log.transactionHash) + address_1.trimLeading0x(log.logIndex));\n    log.id = 'log_' + address_1.trimLeading0x(shaId).substr(0, 8);\n  } else if (!log.id) {\n    log.id = null;\n  }\n\n  if (log.blockNumber !== null) {\n    log.blockNumber = hexToNumber(log.blockNumber);\n  }\n\n  if (log.transactionIndex !== null) {\n    log.transactionIndex = hexToNumber(log.transactionIndex);\n  }\n\n  if (log.logIndex !== null) {\n    log.logIndex = hexToNumber(log.logIndex);\n  }\n\n  if (log.address) {\n    log.address = address_2.toChecksumAddress(log.address);\n  }\n\n  return log;\n}\n\nexports.outputLogFormatter = outputLogFormatter;\n\nfunction outputBigNumberFormatter(hex) {\n  return new bignumber_js_1.default(hex).toString(10);\n}\n\nexports.outputBigNumberFormatter = outputBigNumberFormatter;\n\nfunction inputAddressFormatter(address) {\n  if (!address || address === '0x') {\n    return undefined;\n  }\n\n  if (address_2.isValidAddress(address)) {\n    return address_1.ensureLeading0x(address).toLocaleLowerCase();\n  }\n\n  throw new Error(\"Provided address \" + address + \" is invalid, the capitalization checksum test failed\");\n}\n\nexports.inputAddressFormatter = inputAddressFormatter;\n\nfunction inputSignFormatter(data) {\n  return isHexStrict(data) ? data : utf8ToHex(data);\n}\n\nexports.inputSignFormatter = inputSignFormatter;\n\nfunction utf8ToHex(str) {\n  str = utf8_1.encode(str);\n  var hex = ''; // remove \\u0000 padding from either side\n\n  str = str.replace(/^(?:\\u0000)*/, '');\n  str = str.split('').reverse().join('');\n  str = str.replace(/^(?:\\u0000)*/, '');\n  str = str.split('').reverse().join('');\n\n  for (var i = 0; i < str.length; i++) {\n    var code = str.charCodeAt(i); // if (code !== 0) {\n\n    var n = code.toString(16);\n    hex += n.length < 2 ? '0' + n : n; // }\n  }\n\n  return address_1.ensureLeading0x(hex);\n}\n\nfunction isHex(hex) {\n  return /^(-0x|0x)?[0-9a-f]*$/i.test(hex);\n}\n\nfunction isHexStrict(hex) {\n  return /^(-)?0x[0-9a-f]*$/i.test(hex);\n}\n\nfunction numberToHex(value) {\n  if (value) {\n    var numberValue = new bignumber_js_1.default(value);\n    var result = address_1.ensureLeading0x(new bignumber_js_1.default(value).toString(16)); // Seen in web3, copied just in case\n\n    return numberValue.lt(new bignumber_js_1.default(0)) ? \"-\" + result : result;\n  }\n\n  return undefined;\n}\n\nfunction isPredefinedBlockNumber(blockNumber) {\n  return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';\n}","map":{"version":3,"sources":["../../src/utils/formatter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar address_1 = require(\"@celo/base/lib/address\");\nvar address_2 = require(\"@celo/utils/lib/address\");\nvar solidity_1 = require(\"@celo/utils/lib/solidity\");\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nvar utf8_1 = require(\"utf8\");\n/**\n * Formats the input of a transaction and converts all values to HEX\n */\nfunction inputCeloTxFormatter(tx) {\n    var _a, _b, _c, _d;\n    tx.from = inputAddressFormatter((_a = tx.from) === null || _a === void 0 ? void 0 : _a.toString());\n    tx.to = inputAddressFormatter(tx.to);\n    tx.feeCurrency = inputAddressFormatter(tx.feeCurrency);\n    tx.gatewayFeeRecipient = inputAddressFormatter(tx.gatewayFeeRecipient);\n    if (tx.data) {\n        tx.data = address_1.ensureLeading0x(tx.data);\n    }\n    if (tx.data && !isHex(tx.data)) {\n        throw new Error('The data field must be HEX encoded data.');\n    }\n    tx.gas = numberToHex(tx.gas);\n    tx.gasPrice = numberToHex((_b = tx.gasPrice) === null || _b === void 0 ? void 0 : _b.toString());\n    tx.value = numberToHex((_c = tx.value) === null || _c === void 0 ? void 0 : _c.toString());\n    // @ts-ignore - nonce is defined as number, but uses as string (web3)\n    tx.nonce = numberToHex((_d = tx.nonce) === null || _d === void 0 ? void 0 : _d.toString());\n    tx.gatewayFee = numberToHex(tx.gatewayFee);\n    // @ts-ignore - prune undefines\n    Object.keys(tx).forEach(function (key) { return tx[key] === undefined && delete tx[key]; });\n    return tx;\n}\nexports.inputCeloTxFormatter = inputCeloTxFormatter;\nfunction outputCeloTxFormatter(tx) {\n    if (tx.blockNumber !== null) {\n        tx.blockNumber = hexToNumber(tx.blockNumber);\n    }\n    if (tx.transactionIndex !== null) {\n        tx.transactionIndex = hexToNumber(tx.transactionIndex);\n    }\n    tx.nonce = hexToNumber(tx.nonce);\n    tx.gas = hexToNumber(tx.gas);\n    tx.gasPrice = outputBigNumberFormatter(tx.gasPrice);\n    tx.value = outputBigNumberFormatter(tx.value);\n    tx.gatewayFee = outputBigNumberFormatter(tx.gatewayFee);\n    tx.to =\n        tx.to && address_2.isValidAddress(tx.to)\n            ? // tx.to could be `0x0` or `null` while contract creation\n                (tx.to = address_2.toChecksumAddress(tx.to))\n            : null; // set to `null` if invalid address\n    if (tx.from) {\n        tx.from = address_2.toChecksumAddress(tx.from);\n    }\n    if (tx.feeCurrency) {\n        tx.feeCurrency = address_2.toChecksumAddress(tx.feeCurrency);\n    }\n    if (tx.gatewayFeeRecipient) {\n        tx.gatewayFeeRecipient = address_2.toChecksumAddress(tx.gatewayFeeRecipient);\n    }\n    return tx;\n}\nexports.outputCeloTxFormatter = outputCeloTxFormatter;\nfunction outputCeloTxReceiptFormatter(receipt) {\n    if (typeof receipt !== 'object') {\n        throw new Error('Received receipt is invalid: ' + receipt);\n    }\n    if (receipt.blockNumber !== null) {\n        receipt.blockNumber = hexToNumber(receipt.blockNumber);\n    }\n    if (receipt.transactionIndex !== null) {\n        receipt.transactionIndex = hexToNumber(receipt.transactionIndex);\n    }\n    receipt.cumulativeGasUsed = hexToNumber(receipt.cumulativeGasUsed);\n    receipt.gasUsed = hexToNumber(receipt.gasUsed);\n    if (Array.isArray(receipt.logs)) {\n        receipt.logs = receipt.logs.map(outputLogFormatter);\n    }\n    if (receipt.contractAddress) {\n        receipt.contractAddress = address_2.toChecksumAddress(receipt.contractAddress);\n    }\n    if (typeof receipt.status !== 'undefined' && receipt.status !== null) {\n        receipt.status = Boolean(parseInt(address_1.trimLeading0x(receipt.status), 10));\n    }\n    return receipt;\n}\nexports.outputCeloTxReceiptFormatter = outputCeloTxReceiptFormatter;\nfunction inputDefaultBlockNumberFormatter(blockNumber) {\n    if (blockNumber == null) {\n        blockNumber = 'latest';\n    }\n    return inputBlockNumberFormatter(blockNumber);\n}\nexports.inputDefaultBlockNumberFormatter = inputDefaultBlockNumberFormatter;\nfunction inputBlockNumberFormatter(blockNumber) {\n    if (blockNumber == null) {\n        return undefined;\n    }\n    if (isPredefinedBlockNumber(blockNumber)) {\n        return blockNumber;\n    }\n    if (blockNumber === 'genesis') {\n        return '0x0';\n    }\n    return isHexStrict(blockNumber.toString())\n        ? blockNumber.toString().toLocaleLowerCase()\n        : numberToHex(blockNumber.toString());\n}\nexports.inputBlockNumberFormatter = inputBlockNumberFormatter;\nfunction outputBlockFormatter(block) {\n    // transform to number\n    block.gasLimit = hexToNumber(block.gasLimit);\n    block.gasUsed = hexToNumber(block.gasUsed);\n    block.size = hexToNumber(block.size);\n    block.timestamp = hexToNumber(block.timestamp);\n    if (block.number !== null) {\n        block.number = hexToNumber(block.number);\n    }\n    if (block.difficulty) {\n        block.difficulty = outputBigNumberFormatter(block.difficulty);\n    }\n    if (block.totalDifficulty) {\n        block.totalDifficulty = outputBigNumberFormatter(block.totalDifficulty);\n    }\n    if (Array.isArray(block.transactions)) {\n        block.transactions.forEach(function (item) {\n            if (typeof item !== 'string' && !(item instanceof String)) {\n                return outputCeloTxFormatter(item);\n            }\n        });\n    }\n    if (block.miner) {\n        block.miner = address_2.toChecksumAddress(block.miner);\n    }\n    return block;\n}\nexports.outputBlockFormatter = outputBlockFormatter;\nfunction hexToNumber(hex) {\n    if (hex) {\n        return new bignumber_js_1.default(hex).toNumber();\n    }\n    return undefined;\n}\nexports.hexToNumber = hexToNumber;\nfunction outputLogFormatter(log) {\n    // generate a custom log id\n    if (typeof log.blockHash === 'string' &&\n        typeof log.transactionHash === 'string' &&\n        typeof log.logIndex === 'string') {\n        var shaId = solidity_1.sha3(address_1.trimLeading0x(log.blockHash) +\n            address_1.trimLeading0x(log.transactionHash) +\n            address_1.trimLeading0x(log.logIndex));\n        log.id = 'log_' + address_1.trimLeading0x(shaId).substr(0, 8);\n    }\n    else if (!log.id) {\n        log.id = null;\n    }\n    if (log.blockNumber !== null) {\n        log.blockNumber = hexToNumber(log.blockNumber);\n    }\n    if (log.transactionIndex !== null) {\n        log.transactionIndex = hexToNumber(log.transactionIndex);\n    }\n    if (log.logIndex !== null) {\n        log.logIndex = hexToNumber(log.logIndex);\n    }\n    if (log.address) {\n        log.address = address_2.toChecksumAddress(log.address);\n    }\n    return log;\n}\nexports.outputLogFormatter = outputLogFormatter;\nfunction outputBigNumberFormatter(hex) {\n    return new bignumber_js_1.default(hex).toString(10);\n}\nexports.outputBigNumberFormatter = outputBigNumberFormatter;\nfunction inputAddressFormatter(address) {\n    if (!address || address === '0x') {\n        return undefined;\n    }\n    if (address_2.isValidAddress(address)) {\n        return address_1.ensureLeading0x(address).toLocaleLowerCase();\n    }\n    throw new Error(\"Provided address \" + address + \" is invalid, the capitalization checksum test failed\");\n}\nexports.inputAddressFormatter = inputAddressFormatter;\nfunction inputSignFormatter(data) {\n    return isHexStrict(data) ? data : utf8ToHex(data);\n}\nexports.inputSignFormatter = inputSignFormatter;\nfunction utf8ToHex(str) {\n    str = utf8_1.encode(str);\n    var hex = '';\n    // remove \\u0000 padding from either side\n    str = str.replace(/^(?:\\u0000)*/, '');\n    str = str\n        .split('')\n        .reverse()\n        .join('');\n    str = str.replace(/^(?:\\u0000)*/, '');\n    str = str\n        .split('')\n        .reverse()\n        .join('');\n    for (var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        // if (code !== 0) {\n        var n = code.toString(16);\n        hex += n.length < 2 ? '0' + n : n;\n        // }\n    }\n    return address_1.ensureLeading0x(hex);\n}\nfunction isHex(hex) {\n    return /^(-0x|0x)?[0-9a-f]*$/i.test(hex);\n}\nfunction isHexStrict(hex) {\n    return /^(-)?0x[0-9a-f]*$/i.test(hex);\n}\nfunction numberToHex(value) {\n    if (value) {\n        var numberValue = new bignumber_js_1.default(value);\n        var result = address_1.ensureLeading0x(new bignumber_js_1.default(value).toString(16));\n        // Seen in web3, copied just in case\n        return numberValue.lt(new bignumber_js_1.default(0)) ? \"-\" + result : result;\n    }\n    return undefined;\n}\nfunction isPredefinedBlockNumber(blockNumber) {\n    return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';\n}\n//# sourceMappingURL=formatter.js.map"]},"metadata":{},"sourceType":"script"}