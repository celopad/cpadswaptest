{"version":3,"file":"sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/utils.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/percent.ts","../src/entities/token.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/errors.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/fetcher.ts","../src/router.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 42220,\n  ALFAJORES = 44787,\n  BAKLAVA = 62320\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS = '0xce7Cc57249875f1552898144B68F0Cef73f16bE3'\n\nexport const INIT_CODE_HASH = '0xd07c2f90eed8eaedba2183247bf83e80908da356a2ca10383e2113daad39db4f'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n\ninterface ChainInfo {\n  name: string\n  fornoURL: string\n  blockscoutURL: string\n}\n\nexport const CHAIN_INFO: { [K in ChainId]: ChainInfo } = {\n  [ChainId.ALFAJORES]: {\n    name: 'Alfajores',\n    fornoURL: 'https://alfajores-forno.celo-testnet.org',\n    blockscoutURL: 'https://alfajores-blockscout.celo-testnet.org'\n  },\n  [ChainId.BAKLAVA]: {\n    name: 'Baklava',\n    fornoURL: 'https://baklava-forno.celo-testnet.org',\n    blockscoutURL: 'https://baklava-blockscout.celo-testnet.org'\n  },\n  [ChainId.MAINNET]: {\n    name: 'Mainnet',\n    fornoURL: 'https://forno.celo.org',\n    blockscoutURL: 'https://explorer.celo.org'\n  }\n}\n","import { getAddress } from '@ethersproject/address'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport { BigintIsh, ChainId, CHAIN_INFO, ONE, SolidityType, SOLIDITY_TYPE_MAXIMA, THREE, TWO, ZERO } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n\n/**\n * Parses a Celo chain ID number into a ChainId enum instance.\n * @param chainId The chain ID as a number.\n */\nexport const parseNetwork = (chainId: number): ChainId => {\n  if (!Object.values(ChainId).includes(chainId)) {\n    throw new Error(`Unknown Celo chain ID: ${chainId}`)\n  }\n  return chainId as ChainId\n}\n\nexport function getBlockscoutLink(\n  chainId: ChainId,\n  data: string,\n  type: 'transaction' | 'token' | 'address' | 'block'\n): string {\n  const prefix = CHAIN_INFO[chainId].blockscoutURL\n\n  switch (type) {\n    case 'transaction': {\n      return `${prefix}/tx/${data}`\n    }\n    case 'token': {\n      return `${prefix}/tokens/${data}`\n    }\n    case 'block': {\n      return `${prefix}/blocks/${data}`\n    }\n    case 'address':\n    default: {\n      return `${prefix}/address/${data}`\n    }\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { ChainId, SolidityType } from '../constants'\nimport { validateAndParseAddress, validateSolidityTypeInstance } from '../utils'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  /**\n   * Constructs an instance of the base class `Currency`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Token, currencyB: Token): boolean {\n  return currencyA.equals(currencyB)\n}\n\nexport const CELO = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0x471EcE3750Da237f93B8E339c536989b8978a438', 18, 'CELO', 'Celo'),\n  [ChainId.ALFAJORES]: new Token(ChainId.ALFAJORES, '0xf194afdf50b03e69bd7d057c1aa9e10c9954e4c9', 18, 'CELO', 'Celo'),\n  [ChainId.BAKLAVA]: new Token(ChainId.BAKLAVA, '0x765DE816845861e75A25fCA122bb6898B8B1282a', 18, 'CELO', 'Celo')\n}\n\nexport const cUSD = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0x765DE816845861e75A25fCA122bb6898B8B1282a',\n    18,\n    'cUSD',\n    'Celo Dollar'\n  ),\n  [ChainId.ALFAJORES]: new Token(\n    ChainId.ALFAJORES,\n    '0x874069fa1eb16d44d622f2e0ca25eea172369bc1',\n    18,\n    'cUSD',\n    'Celo Dollar'\n  ),\n  [ChainId.BAKLAVA]: new Token(\n    ChainId.ALFAJORES,\n    '0x765DE816845861e75A25fCA122bb6898B8B1282a',\n    18,\n    'cUSD',\n    'Celo Dollar'\n  )\n}\n","import _Big from 'big.js'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport toFormat from 'toformat'\nimport { BigintIsh, ChainId, Rounding, SolidityType, TEN } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { CELO, Token } from '../token'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nclass CurrencyAmount extends Fraction {\n  public readonly currency: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Token, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n\n  /**\n   * Helper that calls the constructor with the CELO_CURRENCY currency\n   * @param amount celo amount in wei\n   */\n  public static celo(amount: BigintIsh): TokenAmount {\n    return new TokenAmount(CELO[ChainId.MAINNET], amount)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Route } from '../route'\nimport { currencyEquals, Token } from '../token'\nimport { Fraction } from './fraction'\nimport { TokenAmount } from './tokenAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Token // input i.e. denominator\n  public readonly quoteCurrency: Token // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Token, quoteCurrency: Token, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: TokenAmount): TokenAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _997,\n  _1000,\n  ChainId\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS,\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH\n          )\n        }\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'UBE-V2',\n      'Ubeswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { Price } from './fractions/price'\nimport { Pair } from './pair'\nimport { CELO, Token } from './token'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Token\n  public readonly output: Token\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Token, output?: Token) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(input instanceof Token && pairs[0].involvesToken(input), 'INPUT')\n    invariant(\n      typeof output === 'undefined' || (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : CELO[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: TokenAmount, outputAmount: TokenAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: TokenAmount\n  readonly outputAmount: TokenAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: TokenAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: TokenAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: TokenAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: TokenAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: TokenAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = amount\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = amount\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount = tradeType === TradeType.EXACT_INPUT ? amount : amounts[0]\n    this.outputAmount = tradeType === TradeType.EXACT_OUTPUT ? amount : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): TokenAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): TokenAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: TokenAmount,\n    currencyOut: Token,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: TokenAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = currencyAmountIn\n    const tokenOut = currencyOut\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Token,\n    currencyAmountOut: TokenAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: TokenAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = currencyAmountOut\n    const tokenIn = currencyIn\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { TradeType } from './constants'\nimport { Percent, TokenAmount, Trade } from './entities'\nimport { validateAndParseAddress } from './utils'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Ubeswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Ubeswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: TokenAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Ubeswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    // the router does not support both cgld in and out\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        methodName = useFeeOnTransfer\n          ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n          : 'swapExactTokensForTokens'\n        // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        args = [amountIn, amountOut, path, to, deadline]\n        value = ZERO_HEX\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        methodName = 'swapTokensForExactTokens'\n        // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        args = [amountOut, amountIn, path, to, deadline]\n        value = ZERO_HEX\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","SolidityType","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CHAIN_INFO","ALFAJORES","name","fornoURL","blockscoutURL","BAKLAVA","MAINNET","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","getAddress","error","parseBigintIsh","bigintIsh","toString","sqrt","y","x","z","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","this","other","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","_100_PERCENT","Percent","Token","chainId","decimals","symbol","equals","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","CELO","cUSD","TokenAmount","token","amount","raw","celo","currency","parsedAmount","exponentiate","toExact","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","_Fraction","adjusted","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","undefined","_PAIR_ADDRESS_CACHE2","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","Trade","tradeType","exactQuote","slippage","amounts","Array","nextPairs","EXACT_INPUT","i","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","_TOKEN_DECIMALS_CACHE2","_TOKEN_DECIMALS_CACHE3","Contract","ERC20","then","_TOKEN_DECIMALS_CACHE4","fetchPairData","IUniswapV2Pair","abi","getReserves","reserves0","reserves1","balances","toHex","Router","swapCallParameters","trade","options","ttl","methodName","args","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","data","type","prefix","values","includes"],"mappings":"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"}