{"version":3,"file":"sdk.cjs.development.js","sources":["../src/constants.ts","../src/utils.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/percent.ts","../src/entities/token.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/errors.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/fetcher.ts","../src/router.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 42220,\n  ALFAJORES = 44787,\n  BAKLAVA = 62320\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS = '0xce7Cc57249875f1552898144B68F0Cef73f16bE3'\n\nexport const INIT_CODE_HASH = '0xd07c2f90eed8eaedba2183247bf83e80908da356a2ca10383e2113daad39db4f'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n\ninterface ChainInfo {\n  name: string\n  fornoURL: string\n  blockscoutURL: string\n}\n\nexport const CHAIN_INFO: { [K in ChainId]: ChainInfo } = {\n  [ChainId.ALFAJORES]: {\n    name: 'Alfajores',\n    fornoURL: 'https://alfajores-forno.celo-testnet.org',\n    blockscoutURL: 'https://alfajores-blockscout.celo-testnet.org'\n  },\n  [ChainId.BAKLAVA]: {\n    name: 'Baklava',\n    fornoURL: 'https://baklava-forno.celo-testnet.org',\n    blockscoutURL: 'https://baklava-blockscout.celo-testnet.org'\n  },\n  [ChainId.MAINNET]: {\n    name: 'Mainnet',\n    fornoURL: 'https://forno.celo.org',\n    blockscoutURL: 'https://explorer.celo.org'\n  }\n}\n","import { getAddress } from '@ethersproject/address'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport { BigintIsh, ChainId, CHAIN_INFO, ONE, SolidityType, SOLIDITY_TYPE_MAXIMA, THREE, TWO, ZERO } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n\n/**\n * Parses a Celo chain ID number into a ChainId enum instance.\n * @param chainId The chain ID as a number.\n */\nexport const parseNetwork = (chainId: number): ChainId => {\n  if (!Object.values(ChainId).includes(chainId)) {\n    throw new Error(`Unknown Celo chain ID: ${chainId}`)\n  }\n  return chainId as ChainId\n}\n\nexport function getBlockscoutLink(\n  chainId: ChainId,\n  data: string,\n  type: 'transaction' | 'token' | 'address' | 'block'\n): string {\n  const prefix = CHAIN_INFO[chainId].blockscoutURL\n\n  switch (type) {\n    case 'transaction': {\n      return `${prefix}/tx/${data}`\n    }\n    case 'token': {\n      return `${prefix}/tokens/${data}`\n    }\n    case 'block': {\n      return `${prefix}/blocks/${data}`\n    }\n    case 'address':\n    default: {\n      return `${prefix}/address/${data}`\n    }\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { ChainId, SolidityType } from '../constants'\nimport { validateAndParseAddress, validateSolidityTypeInstance } from '../utils'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  /**\n   * Constructs an instance of the base class `Currency`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Token, currencyB: Token): boolean {\n  return currencyA.equals(currencyB)\n}\n\nexport const CELO = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0x471EcE3750Da237f93B8E339c536989b8978a438', 18, 'CELO', 'Celo'),\n  [ChainId.ALFAJORES]: new Token(ChainId.ALFAJORES, '0xf194afdf50b03e69bd7d057c1aa9e10c9954e4c9', 18, 'CELO', 'Celo'),\n  [ChainId.BAKLAVA]: new Token(ChainId.BAKLAVA, '0x765DE816845861e75A25fCA122bb6898B8B1282a', 18, 'CELO', 'Celo')\n}\n\nexport const cUSD = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0x765DE816845861e75A25fCA122bb6898B8B1282a',\n    18,\n    'cUSD',\n    'Celo Dollar'\n  ),\n  [ChainId.ALFAJORES]: new Token(\n    ChainId.ALFAJORES,\n    '0x874069fa1eb16d44d622f2e0ca25eea172369bc1',\n    18,\n    'cUSD',\n    'Celo Dollar'\n  ),\n  [ChainId.BAKLAVA]: new Token(\n    ChainId.ALFAJORES,\n    '0x765DE816845861e75A25fCA122bb6898B8B1282a',\n    18,\n    'cUSD',\n    'Celo Dollar'\n  )\n}\n","import _Big from 'big.js'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport toFormat from 'toformat'\nimport { BigintIsh, ChainId, Rounding, SolidityType, TEN } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { CELO, Token } from '../token'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nclass CurrencyAmount extends Fraction {\n  public readonly currency: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Token, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n\n  /**\n   * Helper that calls the constructor with the CELO_CURRENCY currency\n   * @param amount celo amount in wei\n   */\n  public static celo(amount: BigintIsh): TokenAmount {\n    return new TokenAmount(CELO[ChainId.MAINNET], amount)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Route } from '../route'\nimport { currencyEquals, Token } from '../token'\nimport { Fraction } from './fraction'\nimport { TokenAmount } from './tokenAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Token // input i.e. denominator\n  public readonly quoteCurrency: Token // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Token, quoteCurrency: Token, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: TokenAmount): TokenAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _997,\n  _1000,\n  ChainId\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS,\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH\n          )\n        }\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'UBE-V2',\n      'Ubeswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { Price } from './fractions/price'\nimport { Pair } from './pair'\nimport { CELO, Token } from './token'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Token\n  public readonly output: Token\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Token, output?: Token) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(input instanceof Token && pairs[0].involvesToken(input), 'INPUT')\n    invariant(\n      typeof output === 'undefined' || (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : CELO[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: TokenAmount, outputAmount: TokenAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: TokenAmount\n  readonly outputAmount: TokenAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: TokenAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: TokenAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: TokenAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: TokenAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: TokenAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = amount\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = amount\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount = tradeType === TradeType.EXACT_INPUT ? amount : amounts[0]\n    this.outputAmount = tradeType === TradeType.EXACT_OUTPUT ? amount : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): TokenAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): TokenAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: TokenAmount,\n    currencyOut: Token,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: TokenAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = currencyAmountIn\n    const tokenOut = currencyOut\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Token,\n    currencyAmountOut: TokenAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: TokenAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = currencyAmountOut\n    const tokenIn = currencyIn\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { TradeType } from './constants'\nimport { Percent, TokenAmount, Trade } from './entities'\nimport { validateAndParseAddress } from './utils'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Ubeswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Ubeswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: TokenAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Ubeswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    // the router does not support both cgld in and out\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        methodName = useFeeOnTransfer\n          ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n          : 'swapExactTokensForTokens'\n        // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        args = [amountIn, amountOut, path, to, deadline]\n        value = ZERO_HEX\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        methodName = 'swapTokensForExactTokens'\n        // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        args = [amountOut, amountIn, path, to, deadline]\n        value = ZERO_HEX\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","FACTORY_ADDRESS","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CHAIN_INFO","ALFAJORES","name","fornoURL","blockscoutURL","BAKLAVA","MAINNET","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","parseBigintIsh","bigintIsh","toString","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","parseNetwork","chainId","Object","values","includes","Error","getBlockscoutLink","data","type","prefix","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","other","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","_100_PERCENT","Percent","Token","decimals","symbol","equals","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","CELO","cUSD","CurrencyAmount","currency","amount","parsedAmount","exponentiate","toExact","TokenAmount","token","raw","celo","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","i","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","adjusted","CAN_SET_PROTOTYPE","InsufficientReservesError","constructor","setPrototypeOf","prototype","InsufficientInputAmountError","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","undefined","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","computePriceImpact","exactQuote","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","Trade","tradeType","amounts","Array","nextPairs","EXACT_INPUT","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","Contract","ERC20","then","fetchPairData","IUniswapV2Pair","abi","getReserves","reserves0","reserves1","balances","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","ttl","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAKA,WAAYA;AACVA,EAAAA,mCAAA,YAAA;AACAA,EAAAA,qCAAA,cAAA;AACAA,EAAAA,mCAAA,YAAA;AACD,CAJD,EAAYA,eAAO,KAAPA,eAAO,KAAA,CAAnB;;AAMA,WAAYC;AACVA,EAAAA,uCAAA,gBAAA;AACAA,EAAAA,wCAAA,iBAAA;AACD,CAHD,EAAYA,iBAAS,KAATA,iBAAS,KAAA,CAArB;;AAKA,WAAYC;AACVA,EAAAA,oCAAA,eAAA;AACAA,EAAAA,uCAAA,kBAAA;AACAA,EAAAA,kCAAA,aAAA;AACD,CAJD,EAAYA,gBAAQ,KAARA,gBAAQ,KAAA,CAApB;;IAMaC,eAAe,GAAG;IAElBC,cAAc,GAAG;IAEjBC,iBAAiB,gBAAGC,IAAI,CAACC,MAAL,CAAY,IAAZ;;AAG1B,IAAMC,IAAI,gBAAGF,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAb;AACA,IAAME,GAAG,gBAAGH,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAZ;AACA,IAAMG,GAAG,gBAAGJ,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAZ;AACA,IAAMI,KAAK,gBAAGL,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAd;AACA,IAAMK,IAAI,gBAAGN,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAb;AACA,IAAMM,GAAG,gBAAGP,IAAI,CAACC,MAAL,CAAY,EAAZ,CAAZ;AACA,IAAMO,IAAI,gBAAGR,IAAI,CAACC,MAAL,CAAY,GAAZ,CAAb;AACA,IAAMQ,IAAI,gBAAGT,IAAI,CAACC,MAAL,CAAY,GAAZ,CAAb;AACA,IAAMS,KAAK,gBAAGV,IAAI,CAACC,MAAL,CAAY,IAAZ,CAAd;AAEP,IAAYU,YAAZ;;AAAA,WAAYA;AACVA,EAAAA,qBAAA,UAAA;AACAA,EAAAA,uBAAA,YAAA;AACD,CAHD,EAAYA,YAAY,KAAZA,YAAY,KAAA,CAAxB;;AAKO,IAAMC,oBAAoB,sDAC9BD,YAAY,CAACE,KADiB,iBACTb,IAAI,CAACC,MAAL,CAAY,MAAZ,CADS,wBAE9BU,YAAY,CAACG,OAFiB,iBAEPd,IAAI,CAACC,MAAL,CAAY,oEAAZ,CAFO,wBAA1B;IAWMc,UAAU,kCACpBrB,eAAO,CAACsB,SADY,IACA;AACnBC,EAAAA,IAAI,EAAE,WADa;AAEnBC,EAAAA,QAAQ,EAAE,0CAFS;AAGnBC,EAAAA,aAAa,EAAE;AAHI,CADA,cAMpBzB,eAAO,CAAC0B,OANY,IAMF;AACjBH,EAAAA,IAAI,EAAE,SADW;AAEjBC,EAAAA,QAAQ,EAAE,wCAFO;AAGjBC,EAAAA,aAAa,EAAE;AAHE,CANE,cAWpBzB,eAAO,CAAC2B,OAXY,IAWF;AACjBJ,EAAAA,IAAI,EAAE,SADW;AAEjBC,EAAAA,QAAQ,EAAE,wBAFO;AAGjBC,EAAAA,aAAa,EAAE;AAHE,CAXE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SCjDPG,6BAA6BC,OAAaC;AACxD,GAAUxB,IAAI,CAACyB,kBAAL,CAAwBF,KAAxB,EAA+BrB,IAA/B,CAAV,IAAAwB,SAAS,QAA0CH,KAA1C,kBAA4DC,YAA5D,OAAT,CAAA;AACA,GAAUxB,IAAI,CAAC2B,eAAL,CAAqBJ,KAArB,EAA4BX,oBAAoB,CAACY,YAAD,CAAhD,CAAV,IAAAE,SAAS,QAAqEH,KAArE,kBAAuFC,YAAvF,OAAT,CAAA;AACD;;AAGD,SAAgBI,wBAAwBC;AACtC,MAAI;AACF,QAAMC,kBAAkB,GAAGC,kBAAU,CAACF,SAAD,CAArC;AACA,qCAAAG,OAAO,CAACH,SAAO,KAAKC,kBAAb,EAAoCD,SAApC,0BAAP;AACA,WAAOC,kBAAP;AACD,GAJD,CAIE,OAAOG,KAAP,EAAc;AACd,MAAAP,SAAS,QAAWG,SAAX,8BAAT,CAAA;AACD;AACF;AAED,SAAgBK,eAAeC;AAC7B,SAAOA,SAAS,YAAYnC,IAArB,GACHmC,SADG,GAEH,OAAOA,SAAP,KAAqB,QAArB,GACAnC,IAAI,CAACC,MAAL,CAAYkC,SAAS,CAACC,QAAV,EAAZ,CADA,GAEApC,IAAI,CAACC,MAAL,CAAYkC,SAAZ,CAJJ;AAKD;;AAGD,SAAgBE,KAAKC;AACnBhB,EAAAA,4BAA4B,CAACgB,CAAD,EAAI3B,YAAY,CAACG,OAAjB,CAA5B;AACA,MAAIyB,CAAC,GAASrC,IAAd;AACA,MAAIsC,CAAJ;;AACA,MAAIxC,IAAI,CAACyC,WAAL,CAAiBH,CAAjB,EAAoBjC,KAApB,CAAJ,EAAgC;AAC9BkC,IAAAA,CAAC,GAAGD,CAAJ;AACAE,IAAAA,CAAC,GAAGxC,IAAI,CAAC0C,GAAL,CAAS1C,IAAI,CAAC2C,MAAL,CAAYL,CAAZ,EAAelC,GAAf,CAAT,EAA8BD,GAA9B,CAAJ;;AACA,WAAOH,IAAI,CAAC4C,QAAL,CAAcJ,CAAd,EAAiBD,CAAjB,CAAP,EAA4B;AAC1BA,MAAAA,CAAC,GAAGC,CAAJ;AACAA,MAAAA,CAAC,GAAGxC,IAAI,CAAC2C,MAAL,CAAY3C,IAAI,CAAC0C,GAAL,CAAS1C,IAAI,CAAC2C,MAAL,CAAYL,CAAZ,EAAeE,CAAf,CAAT,EAA4BA,CAA5B,CAAZ,EAA4CpC,GAA5C,CAAJ;AACD;AACF,GAPD,MAOO,IAAIJ,IAAI,CAAC6C,QAAL,CAAcP,CAAd,EAAiBpC,IAAjB,CAAJ,EAA4B;AACjCqC,IAAAA,CAAC,GAAGpC,GAAJ;AACD;;AACD,SAAOoC,CAAP;AACD;AAGD;;AACA,SAAgBO,aAAgBC,OAAYL,KAAQM,SAAiBC;AACnE,IAAUD,OAAO,GAAG,CAApB,KAAAtB,SAAS,QAAc,eAAd,CAAT,CAAA;;AAEA,IAAUqB,KAAK,CAACG,MAAN,IAAgBF,OAA1B,KAAAtB,SAAS,QAA0B,YAA1B,CAAT,CAAA;;AAGA,MAAIqB,KAAK,CAACG,MAAN,KAAiB,CAArB,EAAwB;AACtBH,IAAAA,KAAK,CAACI,IAAN,CAAWT,GAAX;AACA,WAAO,IAAP;AACD,GAHD,MAGO;AACL,QAAMU,MAAM,GAAGL,KAAK,CAACG,MAAN,KAAiBF,OAAhC,CADK;;AAGL,QAAII,MAAM,IAAIH,UAAU,CAACF,KAAK,CAACA,KAAK,CAACG,MAAN,GAAe,CAAhB,CAAN,EAA0BR,GAA1B,CAAV,IAA4C,CAA1D,EAA6D;AAC3D,aAAOA,GAAP;AACD;;AAED,QAAIW,EAAE,GAAG,CAAT;AAAA,QACEC,EAAE,GAAGP,KAAK,CAACG,MADb;;AAGA,WAAOG,EAAE,GAAGC,EAAZ,EAAgB;AACd,UAAMC,GAAG,GAAIF,EAAE,GAAGC,EAAN,KAAc,CAA1B;;AACA,UAAIL,UAAU,CAACF,KAAK,CAACQ,GAAD,CAAN,EAAab,GAAb,CAAV,IAA+B,CAAnC,EAAsC;AACpCW,QAAAA,EAAE,GAAGE,GAAG,GAAG,CAAX;AACD,OAFD,MAEO;AACLD,QAAAA,EAAE,GAAGC,GAAL;AACD;AACF;;AACDR,IAAAA,KAAK,CAACS,MAAN,CAAaH,EAAb,EAAiB,CAAjB,EAAoBX,GAApB;AACA,WAAOU,MAAM,GAAGL,KAAK,CAACU,GAAN,EAAH,GAAkB,IAA/B;AACD;AACF;AAED;;;;;AAIA,IAAaC,YAAY,GAAG,SAAfA,YAAe,CAACC,OAAD;AAC1B,MAAI,CAACC,MAAM,CAACC,MAAP,CAAcnE,eAAd,EAAuBoE,QAAvB,CAAgCH,OAAhC,CAAL,EAA+C;AAC7C,UAAM,IAAII,KAAJ,6BAAoCJ,OAApC,CAAN;AACD;;AACD,SAAOA,OAAP;AACD,CALM;AAOP,SAAgBK,kBACdL,SACAM,MACAC;AAEA,MAAMC,MAAM,GAAGpD,UAAU,CAAC4C,OAAD,CAAV,CAAoBxC,aAAnC;;AAEA,UAAQ+C,IAAR;AACE,SAAK,aAAL;AAAoB;AAClB,eAAUC,MAAV,YAAuBF,IAAvB;AACD;;AACD,SAAK,OAAL;AAAc;AACZ,eAAUE,MAAV,gBAA2BF,IAA3B;AACD;;AACD,SAAK,OAAL;AAAc;AACZ,eAAUE,MAAV,gBAA2BF,IAA3B;AACD;;AACD,SAAK,SAAL;AACA;AAAS;AACP,eAAUE,MAAV,iBAA4BF,IAA5B;AACD;AAbH;AAeD;;;ACzGD,IAAMG,OAAO,gBAAGC,QAAQ,CAACC,QAAD,CAAxB;AACA,IAAMC,GAAG,gBAAGF,QAAQ,CAACG,IAAD,CAApB;AAEA,IAAMC,qBAAqB,sDACxB7E,gBAAQ,CAAC8E,UADe,IACFN,OAAO,CAACM,UADN,wBAExB9E,gBAAQ,CAAC+E,aAFe,IAECP,OAAO,CAACO,aAFT,wBAGxB/E,gBAAQ,CAACgF,QAHe,IAGJR,OAAO,CAACQ,QAHJ,wBAA3B;AAMA,IAAMC,eAAe,4CAClBjF,gBAAQ,CAAC8E,UADS,KAAA,mBAElB9E,gBAAQ,CAAC+E,aAFS,KAAA,mBAGlB/E,gBAAQ,CAACgF,QAHS,KAAA,mBAArB;AAMA,IAAaE,QAAb;AAIE,oBAAmBC,SAAnB,EAAyCC,WAAzC;QAAyCA;AAAAA,MAAAA,cAAyB7E;;;AAChE,SAAK4E,SAAL,GAAiB7C,cAAc,CAAC6C,SAAD,CAA/B;AACA,SAAKC,WAAL,GAAmB9C,cAAc,CAAC8C,WAAD,CAAjC;AACD,GAPH;;;AAAA;;AAAA,SAmBSC,MAnBT,GAmBS;AACL,WAAO,IAAIH,QAAJ,CAAa,KAAKE,WAAlB,EAA+B,KAAKD,SAApC,CAAP;AACD,GArBH;;AAAA,SAuBSrC,GAvBT,GAuBS,aAAIwC,KAAJ;AACL,QAAMC,WAAW,GAAGD,KAAK,YAAYJ,QAAjB,GAA4BI,KAA5B,GAAoC,IAAIJ,QAAJ,CAAa5C,cAAc,CAACgD,KAAD,CAA3B,CAAxD;;AACA,QAAIlF,IAAI,CAACoF,KAAL,CAAW,KAAKJ,WAAhB,EAA6BG,WAAW,CAACH,WAAzC,CAAJ,EAA2D;AACzD,aAAO,IAAIF,QAAJ,CAAa9E,IAAI,CAAC0C,GAAL,CAAS,KAAKqC,SAAd,EAAyBI,WAAW,CAACJ,SAArC,CAAb,EAA8D,KAAKC,WAAnE,CAAP;AACD;;AACD,WAAO,IAAIF,QAAJ,CACL9E,IAAI,CAAC0C,GAAL,CACE1C,IAAI,CAACqF,QAAL,CAAc,KAAKN,SAAnB,EAA8BI,WAAW,CAACH,WAA1C,CADF,EAEEhF,IAAI,CAACqF,QAAL,CAAcF,WAAW,CAACJ,SAA1B,EAAqC,KAAKC,WAA1C,CAFF,CADK,EAKLhF,IAAI,CAACqF,QAAL,CAAc,KAAKL,WAAnB,EAAgCG,WAAW,CAACH,WAA5C,CALK,CAAP;AAOD,GAnCH;;AAAA,SAqCSM,QArCT,GAqCS,kBAASJ,KAAT;AACL,QAAMC,WAAW,GAAGD,KAAK,YAAYJ,QAAjB,GAA4BI,KAA5B,GAAoC,IAAIJ,QAAJ,CAAa5C,cAAc,CAACgD,KAAD,CAA3B,CAAxD;;AACA,QAAIlF,IAAI,CAACoF,KAAL,CAAW,KAAKJ,WAAhB,EAA6BG,WAAW,CAACH,WAAzC,CAAJ,EAA2D;AACzD,aAAO,IAAIF,QAAJ,CAAa9E,IAAI,CAACsF,QAAL,CAAc,KAAKP,SAAnB,EAA8BI,WAAW,CAACJ,SAA1C,CAAb,EAAmE,KAAKC,WAAxE,CAAP;AACD;;AACD,WAAO,IAAIF,QAAJ,CACL9E,IAAI,CAACsF,QAAL,CACEtF,IAAI,CAACqF,QAAL,CAAc,KAAKN,SAAnB,EAA8BI,WAAW,CAACH,WAA1C,CADF,EAEEhF,IAAI,CAACqF,QAAL,CAAcF,WAAW,CAACJ,SAA1B,EAAqC,KAAKC,WAA1C,CAFF,CADK,EAKLhF,IAAI,CAACqF,QAAL,CAAc,KAAKL,WAAnB,EAAgCG,WAAW,CAACH,WAA5C,CALK,CAAP;AAOD,GAjDH;;AAAA,SAmDSpC,QAnDT,GAmDS,kBAASsC,KAAT;AACL,QAAMC,WAAW,GAAGD,KAAK,YAAYJ,QAAjB,GAA4BI,KAA5B,GAAoC,IAAIJ,QAAJ,CAAa5C,cAAc,CAACgD,KAAD,CAA3B,CAAxD;AACA,WAAOlF,IAAI,CAAC4C,QAAL,CACL5C,IAAI,CAACqF,QAAL,CAAc,KAAKN,SAAnB,EAA8BI,WAAW,CAACH,WAA1C,CADK,EAELhF,IAAI,CAACqF,QAAL,CAAcF,WAAW,CAACJ,SAA1B,EAAqC,KAAKC,WAA1C,CAFK,CAAP;AAID,GAzDH;;AAAA,SA2DSO,OA3DT,GA2DS,iBAAQL,KAAR;AACL,QAAMC,WAAW,GAAGD,KAAK,YAAYJ,QAAjB,GAA4BI,KAA5B,GAAoC,IAAIJ,QAAJ,CAAa5C,cAAc,CAACgD,KAAD,CAA3B,CAAxD;AACA,WAAOlF,IAAI,CAACoF,KAAL,CACLpF,IAAI,CAACqF,QAAL,CAAc,KAAKN,SAAnB,EAA8BI,WAAW,CAACH,WAA1C,CADK,EAELhF,IAAI,CAACqF,QAAL,CAAcF,WAAW,CAACJ,SAA1B,EAAqC,KAAKC,WAA1C,CAFK,CAAP;AAID,GAjEH;;AAAA,SAmESvC,WAnET,GAmES,qBAAYyC,KAAZ;AACL,QAAMC,WAAW,GAAGD,KAAK,YAAYJ,QAAjB,GAA4BI,KAA5B,GAAoC,IAAIJ,QAAJ,CAAa5C,cAAc,CAACgD,KAAD,CAA3B,CAAxD;AACA,WAAOlF,IAAI,CAACyC,WAAL,CACLzC,IAAI,CAACqF,QAAL,CAAc,KAAKN,SAAnB,EAA8BI,WAAW,CAACH,WAA1C,CADK,EAELhF,IAAI,CAACqF,QAAL,CAAcF,WAAW,CAACJ,SAA1B,EAAqC,KAAKC,WAA1C,CAFK,CAAP;AAID,GAzEH;;AAAA,SA2ESK,QA3ET,GA2ES,kBAASH,KAAT;AACL,QAAMC,WAAW,GAAGD,KAAK,YAAYJ,QAAjB,GAA4BI,KAA5B,GAAoC,IAAIJ,QAAJ,CAAa5C,cAAc,CAACgD,KAAD,CAA3B,CAAxD;AACA,WAAO,IAAIJ,QAAJ,CACL9E,IAAI,CAACqF,QAAL,CAAc,KAAKN,SAAnB,EAA8BI,WAAW,CAACJ,SAA1C,CADK,EAEL/E,IAAI,CAACqF,QAAL,CAAc,KAAKL,WAAnB,EAAgCG,WAAW,CAACH,WAA5C,CAFK,CAAP;AAID,GAjFH;;AAAA,SAmFSrC,MAnFT,GAmFS,gBAAOuC,KAAP;AACL,QAAMC,WAAW,GAAGD,KAAK,YAAYJ,QAAjB,GAA4BI,KAA5B,GAAoC,IAAIJ,QAAJ,CAAa5C,cAAc,CAACgD,KAAD,CAA3B,CAAxD;AACA,WAAO,IAAIJ,QAAJ,CACL9E,IAAI,CAACqF,QAAL,CAAc,KAAKN,SAAnB,EAA8BI,WAAW,CAACH,WAA1C,CADK,EAELhF,IAAI,CAACqF,QAAL,CAAc,KAAKL,WAAnB,EAAgCG,WAAW,CAACJ,SAA5C,CAFK,CAAP;AAID,GAzFH;;AAAA,SA2FSS,aA3FT,GA2FS,uBACLC,iBADK,EAELC,MAFK,EAGLC,QAHK;QAELD;AAAAA,MAAAA,SAAiB;AAAEE,QAAAA,cAAc,EAAE;AAAlB;;;QACjBD;AAAAA,MAAAA,WAAqB/F,gBAAQ,CAAC+E;;;AAE9B,KAAUkB,MAAM,CAACC,SAAP,CAAiBL,iBAAjB,CAAV,IAAA/D,SAAS,QAAyC+D,iBAAzC,yBAAT,CAAA;AACA,MAAUA,iBAAiB,GAAG,CAA9B,KAAA/D,SAAS,QAA2B+D,iBAA3B,uBAAT,CAAA;AAEArB,IAAAA,OAAO,CAAC2B,GAAR,CAAY;AAAEC,MAAAA,SAAS,EAAEP,iBAAiB,GAAG,CAAjC;AAAoCE,MAAAA,QAAQ,EAAElB,qBAAqB,CAACkB,QAAD;AAAnE,KAAZ;AACA,QAAMM,QAAQ,GAAG,IAAI7B,OAAJ,CAAY,KAAKW,SAAL,CAAe3C,QAAf,EAAZ,EACd8D,GADc,CACV,KAAKlB,WAAL,CAAiB5C,QAAjB,EADU,EAEd+D,mBAFc,CAEMV,iBAFN,CAAjB;AAGA,WAAOQ,QAAQ,CAAC5B,QAAT,CAAkB4B,QAAQ,CAACG,aAAT,EAAlB,EAA4CV,MAA5C,CAAP;AACD,GAxGH;;AAAA,SA0GSW,OA1GT,GA0GS,iBACLD,aADK,EAELV,MAFK,EAGLC,QAHK;QAELD;AAAAA,MAAAA,SAAiB;AAAEE,QAAAA,cAAc,EAAE;AAAlB;;;QACjBD;AAAAA,MAAAA,WAAqB/F,gBAAQ,CAAC+E;;;AAE9B,KAAUkB,MAAM,CAACC,SAAP,CAAiBM,aAAjB,CAAV,IAAA1E,SAAS,QAAqC0E,aAArC,yBAAT,CAAA;AACA,MAAUA,aAAa,IAAI,CAA3B,KAAA1E,SAAS,QAAwB0E,aAAxB,mBAAT,CAAA;AAEA7B,IAAAA,GAAG,CAAC+B,EAAJ,GAASF,aAAT;AACA7B,IAAAA,GAAG,CAACgC,EAAJ,GAAS1B,eAAe,CAACc,QAAD,CAAxB;AACA,WAAO,IAAIpB,GAAJ,CAAQ,KAAKQ,SAAL,CAAe3C,QAAf,EAAR,EAAmC8D,GAAnC,CAAuC,KAAKlB,WAAL,CAAiB5C,QAAjB,EAAvC,EAAoEiC,QAApE,CAA6E+B,aAA7E,EAA4FV,MAA5F,CAAP;AACD,GArHH;;AAAA;AAAA;AAAA;AAWI,aAAO1F,IAAI,CAAC2C,MAAL,CAAY,KAAKoC,SAAjB,EAA4B,KAAKC,WAAjC,CAAP;AACD,KAZH;;AAAA;AAAA;AAAA;AAgBI,aAAO,IAAIF,QAAJ,CAAa9E,IAAI,CAACwG,SAAL,CAAe,KAAKzB,SAApB,EAA+B,KAAKC,WAApC,CAAb,EAA+D,KAAKA,WAApE,CAAP;AACD;AAjBH;;AAAA;AAAA;;ACtBA,IAAMyB,YAAY,gBAAG,IAAI3B,QAAJ,CAAatE,IAAb,CAArB;;AAEA,IAAakG,OAAb;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,SACSlB,aADT,GACS,uBAAcC,iBAAd,EAA6CC,MAA7C,EAA8DC,QAA9D;QAAcF;AAAAA,MAAAA,oBAA4B;;;AAC/C,WAAO,KAAKJ,QAAL,CAAcoB,YAAd,EAA4BjB,aAA5B,CAA0CC,iBAA1C,EAA6DC,MAA7D,EAAqEC,QAArE,CAAP;AACD,GAHH;;AAAA,SAKSU,OALT,GAKS,iBAAQD,aAAR,EAAmCV,MAAnC,EAAoDC,QAApD;QAAQS;AAAAA,MAAAA,gBAAwB;;;AACrC,WAAO,KAAKf,QAAL,CAAcoB,YAAd,EAA4BJ,OAA5B,CAAoCD,aAApC,EAAmDV,MAAnD,EAA2DC,QAA3D,CAAP;AACD,GAPH;;AAAA;AAAA,EAA6Bb,QAA7B;;;ACAA;;;;AAGA,IAAa6B,KAAb;AAQE;;;;;;AAMA,iBAAmBhD,OAAnB,EAAqC9B,OAArC,EAAsD+E,QAAtD,EAAwEC,MAAxE,EAAyF5F,IAAzF;AACEK,IAAAA,4BAA4B,CAACtB,IAAI,CAACC,MAAL,CAAY2G,QAAZ,CAAD,EAAwBjG,YAAY,CAACE,KAArC,CAA5B;AACA,SAAK+F,QAAL,GAAgBA,QAAhB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAK5F,IAAL,GAAYA,IAAZ;AAEA,SAAK0C,OAAL,GAAeA,OAAf;AACA,SAAK9B,OAAL,GAAeD,uBAAuB,CAACC,OAAD,CAAtC;AACD;AAED;;;;;;AAxBF;;AAAA,SA4BSiF,MA5BT,GA4BS,gBAAO5B,KAAP;AACL;AACA,QAAI,SAASA,KAAb,EAAoB;AAClB,aAAO,IAAP;AACD;;AACD,WAAO,KAAKvB,OAAL,KAAiBuB,KAAK,CAACvB,OAAvB,IAAkC,KAAK9B,OAAL,KAAiBqD,KAAK,CAACrD,OAAhE;AACD;AAED;;;;;;AApCF;;AAAA,SA0CSkF,WA1CT,GA0CS,qBAAY7B,KAAZ;AACL,MAAU,KAAKvB,OAAL,KAAiBuB,KAAK,CAACvB,OAAjC,KAAAjC,SAAS,QAAiC,WAAjC,CAAT,CAAA;AACA,MAAU,KAAKG,OAAL,KAAiBqD,KAAK,CAACrD,OAAjC,KAAAH,SAAS,QAAiC,WAAjC,CAAT,CAAA;AACA,WAAO,KAAKG,OAAL,CAAamF,WAAb,KAA6B9B,KAAK,CAACrD,OAAN,CAAcmF,WAAd,EAApC;AACD,GA9CH;;AAAA;AAAA;AAiDA;;;;AAGA,SAAgBC,eAAeC,WAAkBC;AAC/C,SAAOD,SAAS,CAACJ,MAAV,CAAiBK,SAAjB,CAAP;AACD;AAED,IAAaC,IAAI,sBACd1H,eAAO,CAAC2B,OADM,iBACI,IAAIsF,KAAJ,CAAUjH,eAAO,CAAC2B,OAAlB,EAA2B,4CAA3B,EAAyE,EAAzE,EAA6E,MAA7E,EAAqF,MAArF,CADJ,QAEd3B,eAAO,CAACsB,SAFM,iBAEM,IAAI2F,KAAJ,CAAUjH,eAAO,CAACsB,SAAlB,EAA6B,4CAA7B,EAA2E,EAA3E,EAA+E,MAA/E,EAAuF,MAAvF,CAFN,QAGdtB,eAAO,CAAC0B,OAHM,iBAGI,IAAIuF,KAAJ,CAAUjH,eAAO,CAAC0B,OAAlB,EAA2B,4CAA3B,EAAyE,EAAzE,EAA6E,MAA7E,EAAqF,MAArF,CAHJ,QAAV;AAMP,IAAaiG,IAAI,sBACd3H,eAAO,CAAC2B,OADM,iBACI,IAAIsF,KAAJ,CACjBjH,eAAO,CAAC2B,OADS,EAEjB,4CAFiB,EAGjB,EAHiB,EAIjB,MAJiB,EAKjB,aALiB,CADJ,QAQd3B,eAAO,CAACsB,SARM,iBAQM,IAAI2F,KAAJ,CACnBjH,eAAO,CAACsB,SADW,EAEnB,4CAFmB,EAGnB,EAHmB,EAInB,MAJmB,EAKnB,aALmB,CARN,QAedtB,eAAO,CAAC0B,OAfM,iBAeI,IAAIuF,KAAJ,CACjBjH,eAAO,CAACsB,SADS,EAEjB,4CAFiB,EAGjB,EAHiB,EAIjB,MAJiB,EAKjB,aALiB,CAfJ,QAAV;;AC7DP,IAAMuD,KAAG,gBAAGF,QAAQ,CAACG,IAAD,CAApB;;IAEM8C;;;AAGJ;AACA,0BAAsBC,QAAtB,EAAuCC,MAAvC;;;AACE,QAAMC,YAAY,GAAGvF,cAAc,CAACsF,MAAD,CAAnC;AACAlG,IAAAA,4BAA4B,CAACmG,YAAD,EAAe9G,YAAY,CAACG,OAA5B,CAA5B;AAEA,iCAAM2G,YAAN,EAAoBzH,IAAI,CAAC0H,YAAL,CAAkBnH,GAAlB,EAAuBP,IAAI,CAACC,MAAL,CAAYsH,QAAQ,CAACX,QAArB,CAAvB,CAApB;AACA,UAAKW,QAAL,GAAgBA,QAAhB;;AACD;;;;SAMM/B,gBAAA,uBACLC,iBADK,EAELC,MAFK,EAGLC,QAHK;QACLF;AAAAA,MAAAA,oBAA4B;;;QAE5BE;AAAAA,MAAAA,WAAqB/F,gBAAQ,CAAC8E;;;AAE9B,+BAAac,aAAb,YAA2BC,iBAA3B,EAA8CC,MAA9C,EAAsDC,QAAtD;AACD;;SAEMU,UAAA,iBACLD,aADK,EAELV,MAFK,EAGLC,QAHK;QACLS;AAAAA,MAAAA,gBAAwB,KAAKmB,QAAL,CAAcX;;;QAEtCjB;AAAAA,MAAAA,WAAqB/F,gBAAQ,CAAC8E;;;AAE9B,MAAU0B,aAAa,IAAI,KAAKmB,QAAL,CAAcX,QAAzC,KAAAlF,SAAS,QAA0C,UAA1C,CAAT,CAAA;AACA,+BAAa2E,OAAb,YAAqBD,aAArB,EAAoCV,MAApC,EAA4CC,QAA5C;AACD;;SAEMgC,UAAA,iBAAQjC,MAAR;QAAQA;AAAAA,MAAAA,SAAiB;AAAEE,QAAAA,cAAc,EAAE;AAAlB;;;AAC9BrB,IAAAA,KAAG,CAAC+B,EAAJ,GAAS,KAAKiB,QAAL,CAAcX,QAAvB;AACA,WAAO,IAAIrC,KAAJ,CAAQ,KAAKQ,SAAL,CAAe3C,QAAf,EAAR,EAAmC8D,GAAnC,CAAuC,KAAKlB,WAAL,CAAiB5C,QAAjB,EAAvC,EAAoEiC,QAApE,CAA6EqB,MAA7E,CAAP;AACD;;;;;AAvBC,aAAO,KAAKX,SAAZ;AACD;;;;EAd0BD;;AAuC7B,IAAa8C,WAAb;AAAA;;AAGE;AACA,uBAAmBC,KAAnB,EAAiCL,MAAjC;;;AACE,wCAAMK,KAAN,EAAaL,MAAb;AACA,WAAKK,KAAL,GAAaA,KAAb;;AACD;;AAPH;;AAAA,UASSnF,GATT,GASS,aAAIwC,KAAJ;AACL,KAAU,KAAK2C,KAAL,CAAWf,MAAX,CAAkB5B,KAAK,CAAC2C,KAAxB,CAAV,IAAAnG,SAAS,QAAiC,OAAjC,CAAT,CAAA;AACA,WAAO,IAAIkG,WAAJ,CAAgB,KAAKC,KAArB,EAA4B7H,IAAI,CAAC0C,GAAL,CAAS,KAAKoF,GAAd,EAAmB5C,KAAK,CAAC4C,GAAzB,CAA5B,CAAP;AACD,GAZH;;AAAA,UAcSxC,QAdT,GAcS,kBAASJ,KAAT;AACL,KAAU,KAAK2C,KAAL,CAAWf,MAAX,CAAkB5B,KAAK,CAAC2C,KAAxB,CAAV,IAAAnG,SAAS,QAAiC,OAAjC,CAAT,CAAA;AACA,WAAO,IAAIkG,WAAJ,CAAgB,KAAKC,KAArB,EAA4B7H,IAAI,CAACsF,QAAL,CAAc,KAAKwC,GAAnB,EAAwB5C,KAAK,CAAC4C,GAA9B,CAA5B,CAAP;AACD;AAED;;;;AAnBF;;AAAA,cAuBgBC,IAvBhB,GAuBS,cAAYP,MAAZ;AACL,WAAO,IAAII,WAAJ,CAAgBR,IAAI,CAAC1H,eAAO,CAAC2B,OAAT,CAApB,EAAuCmG,MAAvC,CAAP;AACD,GAzBH;;AAAA;AAAA,EAAiCF,cAAjC;;IC1CaU,KAAb;AAAA;;AAiBE;AACA,iBAAmBC,YAAnB,EAAwCC,aAAxC,EAA8DlD,WAA9D,EAAsFD,SAAtF;;;AACE,iCAAMA,SAAN,EAAiBC,WAAjB;AAEA,UAAKiD,YAAL,GAAoBA,YAApB;AACA,UAAKC,aAAL,GAAqBA,aAArB;AACA,UAAKC,MAAL,GAAc,IAAIrD,QAAJ,CACZ9E,IAAI,CAAC0H,YAAL,CAAkBnH,GAAlB,EAAuBP,IAAI,CAACC,MAAL,CAAYgI,YAAY,CAACrB,QAAzB,CAAvB,CADY,EAEZ5G,IAAI,CAAC0H,YAAL,CAAkBnH,GAAlB,EAAuBP,IAAI,CAACC,MAAL,CAAYiI,aAAa,CAACtB,QAA1B,CAAvB,CAFY,CAAd;;AAID;;AA3BH,QAKgBwB,SALhB,GAKS,mBAAiBC,KAAjB;AACL,QAAMC,MAAM,GAAY,EAAxB;;AACA,yDAAwBD,KAAK,CAACE,KAAN,CAAYC,OAAZ,EAAxB,wCAA+C;AAAA;AAAA,UAAnCC,CAAmC;AAAA,UAAhCC,IAAgC;AAC7CJ,MAAAA,MAAM,CAACnF,IAAP,CACEkF,KAAK,CAACM,IAAN,CAAWF,CAAX,EAAc3B,MAAd,CAAqB4B,IAAI,CAACE,MAA1B,IACI,IAAIZ,KAAJ,CAAUU,IAAI,CAACG,QAAL,CAActB,QAAxB,EAAkCmB,IAAI,CAACI,QAAL,CAAcvB,QAAhD,EAA0DmB,IAAI,CAACG,QAAL,CAAcf,GAAxE,EAA6EY,IAAI,CAACI,QAAL,CAAchB,GAA3F,CADJ,GAEI,IAAIE,KAAJ,CAAUU,IAAI,CAACI,QAAL,CAAcvB,QAAxB,EAAkCmB,IAAI,CAACG,QAAL,CAActB,QAAhD,EAA0DmB,IAAI,CAACI,QAAL,CAAchB,GAAxE,EAA6EY,IAAI,CAACG,QAAL,CAAcf,GAA3F,CAHN;AAKD;;AACD,WAAOQ,MAAM,CAACS,KAAP,CAAa,CAAb,EAAgBC,MAAhB,CAAuB,UAACC,WAAD,EAAcC,YAAd;AAAA,aAA+BD,WAAW,CAAC5D,QAAZ,CAAqB6D,YAArB,CAA/B;AAAA,KAAvB,EAA0FZ,MAAM,CAAC,CAAD,CAAhG,CAAP;AACD,GAfH;;AAAA;;AAAA,SAqCSrD,MArCT,GAqCS;AACL,WAAO,IAAI+C,KAAJ,CAAU,KAAKE,aAAf,EAA8B,KAAKD,YAAnC,EAAiD,KAAKlD,SAAtD,EAAiE,KAAKC,WAAtE,CAAP;AACD,GAvCH;;AAAA,SAyCSK,QAzCT,GAyCS,kBAASH,KAAT;AACL,KAAU+B,cAAc,CAAC,KAAKiB,aAAN,EAAqBhD,KAAK,CAAC+C,YAA3B,CAAxB,IAAAvG,SAAS,QAAyD,OAAzD,CAAT,CAAA;;AACA,QAAMyH,QAAQ,uBAAS9D,QAAT,YAAkBH,KAAlB,CAAd;;AACA,WAAO,IAAI8C,KAAJ,CAAU,KAAKC,YAAf,EAA6B/C,KAAK,CAACgD,aAAnC,EAAkDiB,QAAQ,CAACnE,WAA3D,EAAwEmE,QAAQ,CAACpE,SAAjF,CAAP;AACD,GA7CH;AAAA;;AAAA,SAgDSqE,KAhDT,GAgDS,eAAMC,cAAN;AACL,KAAUpC,cAAc,CAACoC,cAAc,CAAC9B,QAAhB,EAA0B,KAAKU,YAA/B,CAAxB,IAAAvG,SAAS,QAA6D,OAA7D,CAAT,CAAA;AACA,WAAO,IAAIkG,WAAJ,CAAgB,KAAKM,aAArB,EAAoC,oBAAM7C,QAAN,YAAegE,cAAc,CAACvB,GAA9B,EAAmC7B,QAAvE,CAAP;AACD,GAnDH;;AAAA,SAqDST,aArDT,GAqDS,uBAAcC,iBAAd,EAA6CC,MAA7C,EAA8DC,QAA9D;QAAcF;AAAAA,MAAAA,oBAA4B;;;AAC/C,WAAO,KAAK6D,QAAL,CAAc9D,aAAd,CAA4BC,iBAA5B,EAA+CC,MAA/C,EAAuDC,QAAvD,CAAP;AACD,GAvDH;;AAAA,SAyDSU,OAzDT,GAyDS,iBAAQD,aAAR,EAAmCV,MAAnC,EAAoDC,QAApD;QAAQS;AAAAA,MAAAA,gBAAwB;;;AACrC,WAAO,KAAKkD,QAAL,CAAcjD,OAAd,CAAsBD,aAAtB,EAAqCV,MAArC,EAA6CC,QAA7C,CAAP;AACD,GA3DH;;AAAA;AAAA;AAAA;AA8BI,aAAO,IAAIb,QAAJ,CAAa,KAAKC,SAAlB,EAA6B,KAAKC,WAAlC,CAAP;AACD;AA/BH;AAAA;AAAA;AAkCI,iCAAaK,QAAb,YAAsB,KAAK8C,MAA3B;AACD;AAnCH;;AAAA;AAAA,EAA2BrD,QAA3B;;ACRA;AACA,IAAMyE,iBAAiB,IAAG,oBAAoB3F,MAAvB,CAAvB;AAEA;;;;;AAIA,IAAa4F,yBAAb;AAAA;;AAGE;;;AACE;AAHc,qCAAA,GAAoC,IAApC;AAId,UAAKvI,IAAL,GAAY,MAAKwI,WAAL,CAAiBxI,IAA7B;AACA,QAAIsI,iBAAJ,EAAuB3F,MAAM,CAAC8F,cAAP,gCAA4B,wEAAWC,SAAvC;;AACxB;;AAPH;AAAA,iCAA+C5F,KAA/C;AAUA;;;;;AAIA,IAAa6F,4BAAb;AAAA;;AAGE;;;AACE;AAHc,yCAAA,GAAuC,IAAvC;AAId,WAAK3I,IAAL,GAAY,OAAKwI,WAAL,CAAiBxI,IAA7B;AACA,QAAIsI,iBAAJ,EAAuB3F,MAAM,CAAC8F,cAAP,iCAA4B,2EAAWC,SAAvC;;AACxB;;AAPH;AAAA,iCAAkD5F,KAAlD;;ACEA,IAAI8F,kBAAkB,GAAqE,EAA3F;AAEA,IAAaC,IAAb;AAwBE,gBAAmBC,YAAnB,EAA8CC,YAA9C;AACE,QAAMC,YAAY,GAAGF,YAAY,CAAClC,KAAb,CAAmBd,WAAnB,CAA+BiD,YAAY,CAACnC,KAA5C;AAAA,MACjB,CAACkC,YAAD,EAAeC,YAAf,CADiB,GAEjB,CAACA,YAAD,EAAeD,YAAf,CAFJ;AAGA,SAAKG,cAAL,GAAsB,IAAIvD,KAAJ,CACpBsD,YAAY,CAAC,CAAD,CAAZ,CAAgBpC,KAAhB,CAAsBlE,OADF,EAEpBmG,IAAI,CAAC/H,UAAL,CAAgBkI,YAAY,CAAC,CAAD,CAAZ,CAAgBpC,KAAhC,EAAuCoC,YAAY,CAAC,CAAD,CAAZ,CAAgBpC,KAAvD,CAFoB,EAGpB,EAHoB,EAIpB,QAJoB,EAKpB,YALoB,CAAtB;AAOA,SAAKoC,YAAL,GAAoBA,YAApB;AACD;;AApCH,OAIgBlI,UAJhB,GAIS,oBAAkBoI,MAAlB,EAAiCC,MAAjC;;;AACL,QAAMC,MAAM,GAAGF,MAAM,CAACpD,WAAP,CAAmBqD,MAAnB,IAA6B,CAACD,MAAD,EAASC,MAAT,CAA7B,GAAgD,CAACA,MAAD,EAASD,MAAT,CAA/D;;AAEA,QAAI,wBAAAN,kBAAkB,UAAlB,2FAAqBQ,MAAM,CAAC,CAAD,CAAN,CAAUxI,OAA/B,iFAA0CwI,MAAM,CAAC,CAAD,CAAN,CAAUxI,OAApD,OAAiEyI,SAArE,EAAgF;AAAA;;AAC9ET,MAAAA,kBAAkB,gBACbA,kBADa,6BAEfQ,MAAM,CAAC,CAAD,CAAN,CAAUxI,OAFK,yCAGXgI,kBAHW,yDAGX,qBAAqBQ,MAAM,CAAC,CAAD,CAAN,CAAUxI,OAA/B,CAHW,6BAIbwI,MAAM,CAAC,CAAD,CAAN,CAAUxI,OAJG,IAIO0I,yBAAiB,CACpC1K,eADoC,EAEpC2K,kBAAS,CAAC,CAAC,OAAD,CAAD,EAAY,CAACC,aAAI,CAAC,CAAC,SAAD,EAAY,SAAZ,CAAD,EAAyB,CAACJ,MAAM,CAAC,CAAD,CAAN,CAAUxI,OAAX,EAAoBwI,MAAM,CAAC,CAAD,CAAN,CAAUxI,OAA9B,CAAzB,CAAL,CAAZ,CAF2B,EAGpC/B,cAHoC,CAJxB,0BAAlB;AAWD;;AAED,WAAO+J,kBAAkB,CAACQ,MAAM,CAAC,CAAD,CAAN,CAAUxI,OAAX,CAAlB,CAAsCwI,MAAM,CAAC,CAAD,CAAN,CAAUxI,OAAhD,CAAP;AACD;AAgBD;;;;AAtCF;;AAAA;;AAAA,SA0CS6I,aA1CT,GA0CS,uBAAc7C,KAAd;AACL,WAAOA,KAAK,CAACf,MAAN,CAAa,KAAK8B,MAAlB,KAA6Bf,KAAK,CAACf,MAAN,CAAa,KAAK6D,MAAlB,CAApC;AACD;AAED;;;AA9CF;;AA4DE;;;;AA5DF,SAgESC,OAhET,GAgES,iBAAQ/C,KAAR;AACL,KAAU,KAAK6C,aAAL,CAAmB7C,KAAnB,CAAV,IAAAnG,SAAS,QAA4B,OAA5B,CAAT,CAAA;AACA,WAAOmG,KAAK,CAACf,MAAN,CAAa,KAAK8B,MAAlB,IAA4B,KAAKiC,WAAjC,GAA+C,KAAKC,WAA3D;AACD;AAED;;;AArEF;;AAAA,SA4FSC,SA5FT,GA4FS,mBAAUlD,KAAV;AACL,KAAU,KAAK6C,aAAL,CAAmB7C,KAAnB,CAAV,IAAAnG,SAAS,QAA4B,OAA5B,CAAT,CAAA;AACA,WAAOmG,KAAK,CAACf,MAAN,CAAa,KAAK8B,MAAlB,IAA4B,KAAKC,QAAjC,GAA4C,KAAKC,QAAxD;AACD,GA/FH;;AAAA,SAiGSkC,eAjGT,GAiGS,yBAAgBC,WAAhB;AACL,KAAU,KAAKP,aAAL,CAAmBO,WAAW,CAACpD,KAA/B,CAAV,IAAAnG,SAAS,QAAwC,OAAxC,CAAT,CAAA;;AACA,QAAI1B,IAAI,CAACoF,KAAL,CAAW,KAAKyD,QAAL,CAAcf,GAAzB,EAA8B5H,IAA9B,KAAuCF,IAAI,CAACoF,KAAL,CAAW,KAAK0D,QAAL,CAAchB,GAAzB,EAA8B5H,IAA9B,CAA3C,EAAgF;AAC9E,YAAM,IAAIsJ,yBAAJ,EAAN;AACD;;AACD,QAAM0B,YAAY,GAAG,KAAKH,SAAL,CAAeE,WAAW,CAACpD,KAA3B,CAArB;AACA,QAAMsD,aAAa,GAAG,KAAKJ,SAAL,CAAeE,WAAW,CAACpD,KAAZ,CAAkBf,MAAlB,CAAyB,KAAK8B,MAA9B,IAAwC,KAAK+B,MAA7C,GAAsD,KAAK/B,MAA1E,CAAtB;AACA,QAAMwC,kBAAkB,GAAGpL,IAAI,CAACqF,QAAL,CAAc4F,WAAW,CAACnD,GAA1B,EAA+BrH,IAA/B,CAA3B;AACA,QAAMsE,SAAS,GAAG/E,IAAI,CAACqF,QAAL,CAAc+F,kBAAd,EAAkCD,aAAa,CAACrD,GAAhD,CAAlB;AACA,QAAM9C,WAAW,GAAGhF,IAAI,CAAC0C,GAAL,CAAS1C,IAAI,CAACqF,QAAL,CAAc6F,YAAY,CAACpD,GAA3B,EAAgCpH,KAAhC,CAAT,EAAiD0K,kBAAjD,CAApB;AACA,QAAMC,YAAY,GAAG,IAAIzD,WAAJ,CACnBqD,WAAW,CAACpD,KAAZ,CAAkBf,MAAlB,CAAyB,KAAK8B,MAA9B,IAAwC,KAAK+B,MAA7C,GAAsD,KAAK/B,MADxC,EAEnB5I,IAAI,CAAC2C,MAAL,CAAYoC,SAAZ,EAAuBC,WAAvB,CAFmB,CAArB;;AAIA,QAAIhF,IAAI,CAACoF,KAAL,CAAWiG,YAAY,CAACvD,GAAxB,EAA6B5H,IAA7B,CAAJ,EAAwC;AACtC,YAAM,IAAI0J,4BAAJ,EAAN;AACD;;AACD,WAAO,CAACyB,YAAD,EAAe,IAAIvB,IAAJ,CAASoB,YAAY,CAACxI,GAAb,CAAiBuI,WAAjB,CAAT,EAAwCE,aAAa,CAAC7F,QAAd,CAAuB+F,YAAvB,CAAxC,CAAf,CAAP;AACD,GAnHH;;AAAA,SAqHSC,cArHT,GAqHS,wBAAeD,YAAf;AACL,KAAU,KAAKX,aAAL,CAAmBW,YAAY,CAACxD,KAAhC,CAAV,IAAAnG,SAAS,QAAyC,OAAzC,CAAT,CAAA;;AACA,QACE1B,IAAI,CAACoF,KAAL,CAAW,KAAKyD,QAAL,CAAcf,GAAzB,EAA8B5H,IAA9B,KACAF,IAAI,CAACoF,KAAL,CAAW,KAAK0D,QAAL,CAAchB,GAAzB,EAA8B5H,IAA9B,CADA,IAEAF,IAAI,CAACyB,kBAAL,CAAwB4J,YAAY,CAACvD,GAArC,EAA0C,KAAKiD,SAAL,CAAeM,YAAY,CAACxD,KAA5B,EAAmCC,GAA7E,CAHF,EAIE;AACA,YAAM,IAAI0B,yBAAJ,EAAN;AACD;;AAED,QAAM2B,aAAa,GAAG,KAAKJ,SAAL,CAAeM,YAAY,CAACxD,KAA5B,CAAtB;AACA,QAAMqD,YAAY,GAAG,KAAKH,SAAL,CAAeM,YAAY,CAACxD,KAAb,CAAmBf,MAAnB,CAA0B,KAAK8B,MAA/B,IAAyC,KAAK+B,MAA9C,GAAuD,KAAK/B,MAA3E,CAArB;AACA,QAAM7D,SAAS,GAAG/E,IAAI,CAACqF,QAAL,CAAcrF,IAAI,CAACqF,QAAL,CAAc6F,YAAY,CAACpD,GAA3B,EAAgCuD,YAAY,CAACvD,GAA7C,CAAd,EAAiEpH,KAAjE,CAAlB;AACA,QAAMsE,WAAW,GAAGhF,IAAI,CAACqF,QAAL,CAAcrF,IAAI,CAACsF,QAAL,CAAc6F,aAAa,CAACrD,GAA5B,EAAiCuD,YAAY,CAACvD,GAA9C,CAAd,EAAkErH,IAAlE,CAApB;AACA,QAAMwK,WAAW,GAAG,IAAIrD,WAAJ,CAClByD,YAAY,CAACxD,KAAb,CAAmBf,MAAnB,CAA0B,KAAK8B,MAA/B,IAAyC,KAAK+B,MAA9C,GAAuD,KAAK/B,MAD1C,EAElB5I,IAAI,CAAC0C,GAAL,CAAS1C,IAAI,CAAC2C,MAAL,CAAYoC,SAAZ,EAAuBC,WAAvB,CAAT,EAA8C7E,GAA9C,CAFkB,CAApB;AAIA,WAAO,CAAC8K,WAAD,EAAc,IAAInB,IAAJ,CAASoB,YAAY,CAACxI,GAAb,CAAiBuI,WAAjB,CAAT,EAAwCE,aAAa,CAAC7F,QAAd,CAAuB+F,YAAvB,CAAxC,CAAd,CAAP;AACD,GAxIH;;AAAA,SA0ISE,kBA1IT,GA0IS,4BACLC,WADK,EAELzB,YAFK,EAGLC,YAHK;AAKL,KAAUwB,WAAW,CAAC3D,KAAZ,CAAkBf,MAAlB,CAAyB,KAAKoD,cAA9B,CAAV,IAAAxI,SAAS,QAAgD,WAAhD,CAAT,CAAA;AACA,QAAMuI,YAAY,GAAGF,YAAY,CAAClC,KAAb,CAAmBd,WAAnB,CAA+BiD,YAAY,CAACnC,KAA5C;AAAA,MACjB,CAACkC,YAAD,EAAeC,YAAf,CADiB,GAEjB,CAACA,YAAD,EAAeD,YAAf,CAFJ;AAGA,MAAUE,YAAY,CAAC,CAAD,CAAZ,CAAgBpC,KAAhB,CAAsBf,MAAtB,CAA6B,KAAK8B,MAAlC,KAA6CqB,YAAY,CAAC,CAAD,CAAZ,CAAgBpC,KAAhB,CAAsBf,MAAtB,CAA6B,KAAK6D,MAAlC,CAAvD,KAAAjJ,SAAS,QAAyF,OAAzF,CAAT,CAAA;AAEA,QAAI+J,SAAJ;;AACA,QAAIzL,IAAI,CAACoF,KAAL,CAAWoG,WAAW,CAAC1D,GAAvB,EAA4B5H,IAA5B,CAAJ,EAAuC;AACrCuL,MAAAA,SAAS,GAAGzL,IAAI,CAACsF,QAAL,CAAcjD,IAAI,CAACrC,IAAI,CAACqF,QAAL,CAAc4E,YAAY,CAAC,CAAD,CAAZ,CAAgBnC,GAA9B,EAAmCmC,YAAY,CAAC,CAAD,CAAZ,CAAgBnC,GAAnD,CAAD,CAAlB,EAA6E/H,iBAA7E,CAAZ;AACD,KAFD,MAEO;AACL,UAAM2L,OAAO,GAAG1L,IAAI,CAAC2C,MAAL,CAAY3C,IAAI,CAACqF,QAAL,CAAc4E,YAAY,CAAC,CAAD,CAAZ,CAAgBnC,GAA9B,EAAmC0D,WAAW,CAAC1D,GAA/C,CAAZ,EAAiE,KAAKe,QAAL,CAAcf,GAA/E,CAAhB;AACA,UAAM6D,OAAO,GAAG3L,IAAI,CAAC2C,MAAL,CAAY3C,IAAI,CAACqF,QAAL,CAAc4E,YAAY,CAAC,CAAD,CAAZ,CAAgBnC,GAA9B,EAAmC0D,WAAW,CAAC1D,GAA/C,CAAZ,EAAiE,KAAKgB,QAAL,CAAchB,GAA/E,CAAhB;AACA2D,MAAAA,SAAS,GAAGzL,IAAI,CAAC2B,eAAL,CAAqB+J,OAArB,EAA8BC,OAA9B,IAAyCD,OAAzC,GAAmDC,OAA/D;AACD;;AACD,QAAI,CAAC3L,IAAI,CAACyC,WAAL,CAAiBgJ,SAAjB,EAA4BvL,IAA5B,CAAL,EAAwC;AACtC,YAAM,IAAI0J,4BAAJ,EAAN;AACD;;AACD,WAAO,IAAIhC,WAAJ,CAAgB,KAAKsC,cAArB,EAAqCuB,SAArC,CAAP;AACD,GAjKH;;AAAA,SAmKSG,iBAnKT,GAmKS,2BACL/D,KADK,EAEL2D,WAFK,EAGLC,SAHK,EAILI,KAJK,EAKLC,KALK;QAILD;AAAAA,MAAAA,QAAiB;;;AAGjB,KAAU,KAAKnB,aAAL,CAAmB7C,KAAnB,CAAV,IAAAnG,SAAS,QAA4B,OAA5B,CAAT,CAAA;AACA,KAAU8J,WAAW,CAAC3D,KAAZ,CAAkBf,MAAlB,CAAyB,KAAKoD,cAA9B,CAAV,IAAAxI,SAAS,QAAgD,cAAhD,CAAT,CAAA;AACA,KAAU+J,SAAS,CAAC5D,KAAV,CAAgBf,MAAhB,CAAuB,KAAKoD,cAA5B,CAAV,IAAAxI,SAAS,QAA8C,WAA9C,CAAT,CAAA;AACA,KAAU1B,IAAI,CAAC2B,eAAL,CAAqB8J,SAAS,CAAC3D,GAA/B,EAAoC0D,WAAW,CAAC1D,GAAhD,CAAV,IAAApG,SAAS,QAAuD,WAAvD,CAAT,CAAA;AAEA,QAAIqK,mBAAJ;;AACA,QAAI,CAACF,KAAL,EAAY;AACVE,MAAAA,mBAAmB,GAAGP,WAAtB;AACD,KAFD,MAEO;AACL,OAAU,CAAC,CAACM,KAAZ,IAAApK,SAAS,QAAU,QAAV,CAAT,CAAA;AACA,UAAMsK,WAAW,GAAG9J,cAAc,CAAC4J,KAAD,CAAlC;;AACA,UAAI,CAAC9L,IAAI,CAACoF,KAAL,CAAW4G,WAAX,EAAwB9L,IAAxB,CAAL,EAAoC;AAClC,YAAM+L,KAAK,GAAG5J,IAAI,CAACrC,IAAI,CAACqF,QAAL,CAAc,KAAKwD,QAAL,CAAcf,GAA5B,EAAiC,KAAKgB,QAAL,CAAchB,GAA/C,CAAD,CAAlB;AACA,YAAMoE,SAAS,GAAG7J,IAAI,CAAC2J,WAAD,CAAtB;;AACA,YAAIhM,IAAI,CAACyC,WAAL,CAAiBwJ,KAAjB,EAAwBC,SAAxB,CAAJ,EAAwC;AACtC,cAAMnH,SAAS,GAAG/E,IAAI,CAACqF,QAAL,CAAcmG,WAAW,CAAC1D,GAA1B,EAA+B9H,IAAI,CAACsF,QAAL,CAAc2G,KAAd,EAAqBC,SAArB,CAA/B,CAAlB;AACA,cAAMlH,WAAW,GAAGhF,IAAI,CAAC0C,GAAL,CAAS1C,IAAI,CAACqF,QAAL,CAAc4G,KAAd,EAAqB3L,IAArB,CAAT,EAAqC4L,SAArC,CAApB;AACA,cAAMC,YAAY,GAAGnM,IAAI,CAAC2C,MAAL,CAAYoC,SAAZ,EAAuBC,WAAvB,CAArB;AACA+G,UAAAA,mBAAmB,GAAGP,WAAW,CAAC9I,GAAZ,CAAgB,IAAIkF,WAAJ,CAAgB,KAAKsC,cAArB,EAAqCiC,YAArC,CAAhB,CAAtB;AACD,SALD,MAKO;AACLJ,UAAAA,mBAAmB,GAAGP,WAAtB;AACD;AACF,OAXD,MAWO;AACLO,QAAAA,mBAAmB,GAAGP,WAAtB;AACD;AACF;;AAED,WAAO,IAAI5D,WAAJ,CACLC,KADK,EAEL7H,IAAI,CAAC2C,MAAL,CAAY3C,IAAI,CAACqF,QAAL,CAAcoG,SAAS,CAAC3D,GAAxB,EAA6B,KAAKiD,SAAL,CAAelD,KAAf,EAAsBC,GAAnD,CAAZ,EAAqEiE,mBAAmB,CAACjE,GAAzF,CAFK,CAAP;AAID,GAzMH;;AAAA;AAAA;AAAA;AAkDI,aAAO,IAAIE,KAAJ,CAAU,KAAKY,MAAf,EAAuB,KAAK+B,MAA5B,EAAoC,KAAKV,YAAL,CAAkB,CAAlB,EAAqBnC,GAAzD,EAA8D,KAAKmC,YAAL,CAAkB,CAAlB,EAAqBnC,GAAnF,CAAP;AACD;AAED;;;;AArDF;AAAA;AAAA;AAyDI,aAAO,IAAIE,KAAJ,CAAU,KAAK2C,MAAf,EAAuB,KAAK/B,MAA5B,EAAoC,KAAKqB,YAAL,CAAkB,CAAlB,EAAqBnC,GAAzD,EAA8D,KAAKmC,YAAL,CAAkB,CAAlB,EAAqBnC,GAAnF,CAAP;AACD;AA1DH;AAAA;AAAA;AAyEI,aAAO,KAAKc,MAAL,CAAYjF,OAAnB;AACD;AA1EH;AAAA;AAAA;AA6EI,aAAO,KAAKsG,YAAL,CAAkB,CAAlB,EAAqBpC,KAA5B;AACD;AA9EH;AAAA;AAAA;AAiFI,aAAO,KAAKoC,YAAL,CAAkB,CAAlB,EAAqBpC,KAA5B;AACD;AAlFH;AAAA;AAAA;AAqFI,aAAO,KAAKoC,YAAL,CAAkB,CAAlB,CAAP;AACD;AAtFH;AAAA;AAAA;AAyFI,aAAO,KAAKA,YAAL,CAAkB,CAAlB,CAAP;AACD;AA1FH;;AAAA;AAAA;;ICnBamC,KAAb;AAOE,iBAAmB7D,KAAnB,EAAkC8D,KAAlC,EAAgDC,MAAhD;AACE,MAAU/D,KAAK,CAACrF,MAAN,GAAe,CAAzB,KAAAxB,SAAS,QAAmB,OAAnB,CAAT,CAAA;AACA,KACE6G,KAAK,CAACgE,KAAN,CAAY,UAAA7D,IAAI;AAAA,aAAIA,IAAI,CAAC/E,OAAL,KAAiB4E,KAAK,CAAC,CAAD,CAAL,CAAS5E,OAA9B;AAAA,KAAhB,CADF,IAAAjC,SAAS,QAEP,WAFO,CAAT,CAAA;AAIA,MAAU2K,KAAK,YAAY1F,KAAjB,IAA0B4B,KAAK,CAAC,CAAD,CAAL,CAASmC,aAAT,CAAuB2B,KAAvB,CAApC,KAAA3K,SAAS,QAA0D,OAA1D,CAAT,CAAA;AACA,MACE,OAAO4K,MAAP,KAAkB,WAAlB,IAAkCA,MAAM,YAAY3F,KAAlB,IAA2B4B,KAAK,CAACA,KAAK,CAACrF,MAAN,GAAe,CAAhB,CAAL,CAAwBwH,aAAxB,CAAsC4B,MAAtC,CAD/D,KAAA5K,SAAS,QAEP,QAFO,CAAT,CAAA;AAKA,QAAMiH,IAAI,GAAY,CAAC0D,KAAK,YAAY1F,KAAjB,GAAyB0F,KAAzB,GAAiCjF,IAAI,CAACmB,KAAK,CAAC,CAAD,CAAL,CAAS5E,OAAV,CAAtC,CAAtB;;AACA,yDAAwB4E,KAAK,CAACC,OAAN,EAAxB,wCAAyC;AAAA;AAAA,UAA7BC,CAA6B;AAAA,UAA1BC,IAA0B;AACvC,UAAM8D,YAAY,GAAG7D,IAAI,CAACF,CAAD,CAAzB;AACA,QAAU+D,YAAY,CAAC1F,MAAb,CAAoB4B,IAAI,CAACE,MAAzB,KAAoC4D,YAAY,CAAC1F,MAAb,CAAoB4B,IAAI,CAACiC,MAAzB,CAA9C,KAAAjJ,SAAS,QAAuE,MAAvE,CAAT,CAAA;;AACA,UAAM4K,OAAM,GAAGE,YAAY,CAAC1F,MAAb,CAAoB4B,IAAI,CAACE,MAAzB,IAAmCF,IAAI,CAACiC,MAAxC,GAAiDjC,IAAI,CAACE,MAArE;;AACAD,MAAAA,IAAI,CAACxF,IAAL,CAAUmJ,OAAV;AACD;;AAED,SAAK/D,KAAL,GAAaA,KAAb;AACA,SAAKI,IAAL,GAAYA,IAAZ;AACA,SAAK8D,QAAL,GAAgBzE,KAAK,CAACI,SAAN,CAAgB,IAAhB,CAAhB;AACA,SAAKiE,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcA,MAAd,aAAcA,MAAd,cAAcA,MAAd,GAAwB3D,IAAI,CAACA,IAAI,CAACzF,MAAL,GAAc,CAAf,CAA5B;AACD;;AAhCH;AAAA;AAAA;AAmCI,aAAO,KAAKqF,KAAL,CAAW,CAAX,EAAc5E,OAArB;AACD;AApCH;;AAAA;AAAA;;ACKA;;;;;;;AAMA,SAAS+I,kBAAT,CAA4BD,QAA5B,EAA6CxB,WAA7C,EAAuEI,YAAvE;AACE,MAAMsB,UAAU,GAAGF,QAAQ,CAAC3E,GAAT,CAAazC,QAAb,CAAsB4F,WAAW,CAACnD,GAAlC,CAAnB;;AAEA,MAAM8E,QAAQ,GAAGD,UAAU,CAACrH,QAAX,CAAoB+F,YAAY,CAACvD,GAAjC,EAAsCnF,MAAtC,CAA6CgK,UAA7C,CAAjB;AACA,SAAO,IAAIjG,OAAJ,CAAYkG,QAAQ,CAAC7H,SAArB,EAAgC6H,QAAQ,CAAC5H,WAAzC,CAAP;AACD;AASD;;;AACA,SAAgB6H,sBAAsBC,GAAgBC;AACpD;AACA,GAAU9F,cAAc,CAAC6F,CAAC,CAAC7B,WAAF,CAAc1D,QAAf,EAAyBwF,CAAC,CAAC9B,WAAF,CAAc1D,QAAvC,CAAxB,IAAA7F,SAAS,QAAiE,gBAAjE,CAAT,CAAA;AACA,GAAUuF,cAAc,CAAC6F,CAAC,CAACzB,YAAF,CAAe9D,QAAhB,EAA0BwF,CAAC,CAAC1B,YAAF,CAAe9D,QAAzC,CAAxB,IAAA7F,SAAS,QAAmE,iBAAnE,CAAT,CAAA;;AACA,MAAIoL,CAAC,CAACzB,YAAF,CAAe9F,OAAf,CAAuBwH,CAAC,CAAC1B,YAAzB,CAAJ,EAA4C;AAC1C,QAAIyB,CAAC,CAAC7B,WAAF,CAAc1F,OAAd,CAAsBwH,CAAC,CAAC9B,WAAxB,CAAJ,EAA0C;AACxC,aAAO,CAAP;AACD,KAHyC;;;AAK1C,QAAI6B,CAAC,CAAC7B,WAAF,CAAcrI,QAAd,CAAuBmK,CAAC,CAAC9B,WAAzB,CAAJ,EAA2C;AACzC,aAAO,CAAC,CAAR;AACD,KAFD,MAEO;AACL,aAAO,CAAP;AACD;AACF,GAVD,MAUO;AACL;AACA,QAAI6B,CAAC,CAACzB,YAAF,CAAezI,QAAf,CAAwBmK,CAAC,CAAC1B,YAA1B,CAAJ,EAA6C;AAC3C,aAAO,CAAP;AACD,KAFD,MAEO;AACL,aAAO,CAAC,CAAR;AACD;AACF;AACF;;AAGD,SAAgB2B,gBAAgBF,GAAUC;AACxC,MAAME,MAAM,GAAGJ,qBAAqB,CAACC,CAAD,EAAIC,CAAJ,CAApC;;AACA,MAAIE,MAAM,KAAK,CAAf,EAAkB;AAChB,WAAOA,MAAP;AACD;;;AAGD,MAAIH,CAAC,CAACI,WAAF,CAActK,QAAd,CAAuBmK,CAAC,CAACG,WAAzB,CAAJ,EAA2C;AACzC,WAAO,CAAC,CAAR;AACD,GAFD,MAEO,IAAIJ,CAAC,CAACI,WAAF,CAAczK,WAAd,CAA0BsK,CAAC,CAACG,WAA5B,CAAJ,EAA8C;AACnD,WAAO,CAAP;AACD;;;AAGD,SAAOJ,CAAC,CAACzE,KAAF,CAAQM,IAAR,CAAazF,MAAb,GAAsB6J,CAAC,CAAC1E,KAAF,CAAQM,IAAR,CAAazF,MAA1C;AACD;AASD;;;;;AAIA,IAAaiK,KAAb;AAgDE,iBAAmB9E,KAAnB,EAAiCb,MAAjC,EAAsD4F,SAAtD;AACE,QAAMC,OAAO,GAAkB,IAAIC,KAAJ,CAAUjF,KAAK,CAACM,IAAN,CAAWzF,MAArB,CAA/B;AACA,QAAMqK,SAAS,GAAW,IAAID,KAAJ,CAAUjF,KAAK,CAACE,KAAN,CAAYrF,MAAtB,CAA1B;;AACA,QAAIkK,SAAS,KAAKzN,iBAAS,CAAC6N,WAA5B,EAAyC;AACvC,OAAUvG,cAAc,CAACO,MAAM,CAACD,QAAR,EAAkBc,KAAK,CAACgE,KAAxB,CAAxB,IAAA3K,SAAS,QAA+C,OAA/C,CAAT,CAAA;AACA2L,MAAAA,OAAO,CAAC,CAAD,CAAP,GAAa7F,MAAb;;AACA,WAAK,IAAIiB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAAK,CAACM,IAAN,CAAWzF,MAAX,GAAoB,CAAxC,EAA2CuF,CAAC,EAA5C,EAAgD;AAC9C,YAAMC,IAAI,GAAGL,KAAK,CAACE,KAAN,CAAYE,CAAZ,CAAb;;AAD8C,oCAEbC,IAAI,CAACsC,eAAL,CAAqBqC,OAAO,CAAC5E,CAAD,CAA5B,CAFa;AAAA,YAEvC4C,YAFuC;AAAA,YAEzBoC,QAFyB;;AAG9CJ,QAAAA,OAAO,CAAC5E,CAAC,GAAG,CAAL,CAAP,GAAiB4C,YAAjB;AACAkC,QAAAA,SAAS,CAAC9E,CAAD,CAAT,GAAegF,QAAf;AACD;AACF,KATD,MASO;AACL,OAAUxG,cAAc,CAACO,MAAM,CAACD,QAAR,EAAkBc,KAAK,CAACiE,MAAxB,CAAxB,IAAA5K,SAAS,QAAgD,QAAhD,CAAT,CAAA;AACA2L,MAAAA,OAAO,CAACA,OAAO,CAACnK,MAAR,GAAiB,CAAlB,CAAP,GAA8BsE,MAA9B;;AACA,WAAK,IAAIiB,EAAC,GAAGJ,KAAK,CAACM,IAAN,CAAWzF,MAAX,GAAoB,CAAjC,EAAoCuF,EAAC,GAAG,CAAxC,EAA2CA,EAAC,EAA5C,EAAgD;AAC9C,YAAMC,KAAI,GAAGL,KAAK,CAACE,KAAN,CAAYE,EAAC,GAAG,CAAhB,CAAb;;AAD8C,mCAEdC,KAAI,CAAC4C,cAAL,CAAoB+B,OAAO,CAAC5E,EAAD,CAA3B,CAFc;AAAA,YAEvCwC,WAFuC;AAAA,YAE1BwC,SAF0B;;AAG9CJ,QAAAA,OAAO,CAAC5E,EAAC,GAAG,CAAL,CAAP,GAAiBwC,WAAjB;AACAsC,QAAAA,SAAS,CAAC9E,EAAC,GAAG,CAAL,CAAT,GAAmBgF,SAAnB;AACD;AACF;;AAED,SAAKpF,KAAL,GAAaA,KAAb;AACA,SAAK+E,SAAL,GAAiBA,SAAjB;AACA,SAAKnC,WAAL,GAAmBmC,SAAS,KAAKzN,iBAAS,CAAC6N,WAAxB,GAAsChG,MAAtC,GAA+C6F,OAAO,CAAC,CAAD,CAAzE;AACA,SAAKhC,YAAL,GAAoB+B,SAAS,KAAKzN,iBAAS,CAAC+N,YAAxB,GAAuClG,MAAvC,GAAgD6F,OAAO,CAACA,OAAO,CAACnK,MAAR,GAAiB,CAAlB,CAA3E;AACA,SAAKyK,cAAL,GAAsB,IAAI3F,KAAJ,CACpB,KAAKiD,WAAL,CAAiB1D,QADG,EAEpB,KAAK8D,YAAL,CAAkB9D,QAFE,EAGpB,KAAK0D,WAAL,CAAiBnD,GAHG,EAIpB,KAAKuD,YAAL,CAAkBvD,GAJE,CAAtB;AAMA,SAAK8F,YAAL,GAAoB5F,KAAK,CAACI,SAAN,CAAgB,IAAIgE,KAAJ,CAAUmB,SAAV,EAAqBlF,KAAK,CAACgE,KAA3B,CAAhB,CAApB;AACA,SAAKa,WAAL,GAAmBR,kBAAkB,CAACrE,KAAK,CAACoE,QAAP,EAAiB,KAAKxB,WAAtB,EAAmC,KAAKI,YAAxC,CAArC;AACD;AArDD;;;;;;;AA9BF,QAmCgBwC,OAnChB,GAmCS,iBAAexF,KAAf,EAA6ByF,QAA7B;AACL,WAAO,IAAIX,KAAJ,CAAU9E,KAAV,EAAiByF,QAAjB,EAA2BnO,iBAAS,CAAC6N,WAArC,CAAP;AACD;AAED;;;;;AAvCF;;AAAA,QA4CgBO,QA5ChB,GA4CS,kBAAgB1F,KAAhB,EAA8B2F,SAA9B;AACL,WAAO,IAAIb,KAAJ,CAAU9E,KAAV,EAAiB2F,SAAjB,EAA4BrO,iBAAS,CAAC+N,YAAtC,CAAP;AACD;AAuCD;;;;AArFF;;AAAA;;AAAA,SAyFSO,gBAzFT,GAyFS,0BAAiBC,iBAAjB;AACL,KAAU,CAACA,iBAAiB,CAACtL,QAAlB,CAA2B1C,IAA3B,CAAX,IAAAwB,SAAS,QAAoC,oBAApC,CAAT,CAAA;;AACA,QAAI,KAAK0L,SAAL,KAAmBzN,iBAAS,CAAC+N,YAAjC,EAA+C;AAC7C,aAAO,KAAKrC,YAAZ;AACD,KAFD,MAEO;AACL,UAAM8C,yBAAyB,GAAG,IAAIrJ,QAAJ,CAAa3E,GAAb,EAC/BuC,GAD+B,CAC3BwL,iBAD2B,EAE/BjJ,MAF+B,GAG/BI,QAH+B,CAGtB,KAAKgG,YAAL,CAAkBvD,GAHI,EAGC7B,QAHnC;AAIA,aAAO,IAAI2B,WAAJ,CAAgB,KAAKyD,YAAL,CAAkBxD,KAAlC,EAAyCsG,yBAAzC,CAAP;AACD;AACF;AAED;;;;AAtGF;;AAAA,SA0GSC,eA1GT,GA0GS,yBAAgBF,iBAAhB;AACL,KAAU,CAACA,iBAAiB,CAACtL,QAAlB,CAA2B1C,IAA3B,CAAX,IAAAwB,SAAS,QAAoC,oBAApC,CAAT,CAAA;;AACA,QAAI,KAAK0L,SAAL,KAAmBzN,iBAAS,CAAC6N,WAAjC,EAA8C;AAC5C,aAAO,KAAKvC,WAAZ;AACD,KAFD,MAEO;AACL,UAAMoD,wBAAwB,GAAG,IAAIvJ,QAAJ,CAAa3E,GAAb,EAAkBuC,GAAlB,CAAsBwL,iBAAtB,EAAyC7I,QAAzC,CAAkD,KAAK4F,WAAL,CAAiBnD,GAAnE,EAAwE7B,QAAzG;AACA,aAAO,IAAI2B,WAAJ,CAAgB,KAAKqD,WAAL,CAAiBpD,KAAjC,EAAwCwG,wBAAxC,CAAP;AACD;AACF;AAED;;;;;;;;;;;;;;AApHF;;AAAA,QAkIgBC,gBAlIhB,GAkIS,0BACL/F,KADK,EAELgG,gBAFK,EAGLC,WAHK;AAMLC,EAAAA,YANK,EAOLC,gBAPK,EAQLC,UARK;kCAIkD;kCAArDC;QAAAA,gDAAgB;4BAAGC;QAAAA,oCAAU;;QAE/BJ;AAAAA,MAAAA,eAAuB;;;QACvBC;AAAAA,MAAAA,mBAAgCH;;;QAChCI;AAAAA,MAAAA,aAAsB;;;AAEtB,MAAUpG,KAAK,CAACrF,MAAN,GAAe,CAAzB,KAAAxB,SAAS,QAAmB,OAAnB,CAAT,CAAA;AACA,MAAUmN,OAAO,GAAG,CAApB,KAAAnN,SAAS,QAAc,UAAd,CAAT,CAAA;AACA,MAAUgN,gBAAgB,KAAKH,gBAArB,IAAyCE,YAAY,CAACvL,MAAb,GAAsB,CAAzE,KAAAxB,SAAS,QAAmE,mBAAnE,CAAT,CAAA;AACA,QAAMiC,OAAO,GACX4K,gBAAgB,YAAY3G,WAA5B,GACI2G,gBAAgB,CAAC1G,KAAjB,CAAuBlE,OAD3B,GAEI6K,WAAW,YAAY7H,KAAvB,GACA6H,WAAW,CAAC7K,OADZ,GAEA2G,SALN;AAMA,MAAU3G,OAAO,KAAK2G,SAAtB,KAAA5I,SAAS,QAAwB,UAAxB,CAAT,CAAA;AAEA,QAAMoM,QAAQ,GAAGS,gBAAjB;AACA,QAAMO,QAAQ,GAAGN,WAAjB;;AACA,SAAK,IAAI/F,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACrF,MAA1B,EAAkCuF,CAAC,EAAnC,EAAuC;AACrC,UAAMC,IAAI,GAAGH,KAAK,CAACE,CAAD,CAAlB,CADqC;;AAGrC,UAAI,CAACC,IAAI,CAACE,MAAL,CAAY9B,MAAZ,CAAmBgH,QAAQ,CAACjG,KAA5B,CAAD,IAAuC,CAACa,IAAI,CAACiC,MAAL,CAAY7D,MAAZ,CAAmBgH,QAAQ,CAACjG,KAA5B,CAA5C,EAAgF;AAChF,UAAIa,IAAI,CAACG,QAAL,CAActD,OAAd,CAAsBrF,IAAtB,KAA+BwI,IAAI,CAACI,QAAL,CAAcvD,OAAd,CAAsBrF,IAAtB,CAAnC,EAAgE;AAEhE,UAAI8N,SAAsB,SAA1B;;AACA,UAAI;AACF;;AADE,qCACatF,IAAI,CAACsC,eAAL,CAAqB8C,QAArB,CADb;;AACAE,QAAAA,SADA;AAEH,OAFD,CAEE,OAAO/L,KAAP,EAAc;AACd;AACA,YAAIA,KAAK,CAAC8M,8BAAV,EAA0C;AACxC;AACD;;AACD,cAAM9M,KAAN;AACD,OAfoC;;;AAiBrC,UAAI+L,SAAS,CAACnG,KAAV,CAAgBf,MAAhB,CAAuBgI,QAAvB,CAAJ,EAAsC;AACpChM,QAAAA,YAAY,CACV6L,UADU,EAEV,IAAIxB,KAAJ,CACE,IAAIf,KAAJ,WAAcqC,YAAd,GAA4B/F,IAA5B,IAAmCgG,gBAAgB,CAACnH,QAApD,EAA8DiH,WAA9D,CADF,EAEEE,gBAFF,EAGE/O,iBAAS,CAAC6N,WAHZ,CAFU,EAOVoB,aAPU,EAQV5B,eARU,CAAZ;AAUD,OAXD,MAWO,IAAI6B,OAAO,GAAG,CAAV,IAAetG,KAAK,CAACrF,MAAN,GAAe,CAAlC,EAAqC;AAC1C,YAAM8L,sBAAsB,GAAGzG,KAAK,CAACQ,KAAN,CAAY,CAAZ,EAAeN,CAAf,EAAkBwG,MAAlB,CAAyB1G,KAAK,CAACQ,KAAN,CAAYN,CAAC,GAAG,CAAhB,EAAmBF,KAAK,CAACrF,MAAzB,CAAzB,CAA/B,CAD0C;;AAI1CiK,QAAAA,KAAK,CAACmB,gBAAN,CACEU,sBADF,EAEEhB,SAFF,EAGEQ,WAHF,EAIE;AACEI,UAAAA,aAAa,EAAbA,aADF;AAEEC,UAAAA,OAAO,EAAEA,OAAO,GAAG;AAFrB,SAJF,YAQMJ,YARN,GAQoB/F,IARpB,IASEgG,gBATF,EAUEC,UAVF;AAYD;AACF;;AAED,WAAOA,UAAP;AACD;AAED;;;;;;;;;;;;;;;AA3MF;;AAAA,QA0NgBO,iBA1NhB,GA0NS,2BACL3G,KADK,EAEL4G,UAFK,EAGLC,iBAHK;AAMLX,EAAAA,YANK,EAOLY,iBAPK,EAQLV,UARK;oCAIkD;oCAArDC;QAAAA,iDAAgB;8BAAGC;QAAAA,qCAAU;;QAE/BJ;AAAAA,MAAAA,eAAuB;;;QACvBY;AAAAA,MAAAA,oBAAiCD;;;QACjCT;AAAAA,MAAAA,aAAsB;;;AAEtB,MAAUpG,KAAK,CAACrF,MAAN,GAAe,CAAzB,KAAAxB,SAAS,QAAmB,OAAnB,CAAT,CAAA;AACA,MAAUmN,OAAO,GAAG,CAApB,KAAAnN,SAAS,QAAc,UAAd,CAAT,CAAA;AACA,MAAU2N,iBAAiB,KAAKD,iBAAtB,IAA2CX,YAAY,CAACvL,MAAb,GAAsB,CAA3E,KAAAxB,SAAS,QAAqE,mBAArE,CAAT,CAAA;AACA,QAAMiC,OAAO,GACXyL,iBAAiB,YAAYxH,WAA7B,GACIwH,iBAAiB,CAACvH,KAAlB,CAAwBlE,OAD5B,GAEIwL,UAAU,YAAYxI,KAAtB,GACAwI,UAAU,CAACxL,OADX,GAEA2G,SALN;AAMA,MAAU3G,OAAO,KAAK2G,SAAtB,KAAA5I,SAAS,QAAwB,UAAxB,CAAT,CAAA;AAEA,QAAMsM,SAAS,GAAGoB,iBAAlB;AACA,QAAME,OAAO,GAAGH,UAAhB;;AACA,SAAK,IAAI1G,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACrF,MAA1B,EAAkCuF,CAAC,EAAnC,EAAuC;AACrC,UAAMC,IAAI,GAAGH,KAAK,CAACE,CAAD,CAAlB,CADqC;;AAGrC,UAAI,CAACC,IAAI,CAACE,MAAL,CAAY9B,MAAZ,CAAmBkH,SAAS,CAACnG,KAA7B,CAAD,IAAwC,CAACa,IAAI,CAACiC,MAAL,CAAY7D,MAAZ,CAAmBkH,SAAS,CAACnG,KAA7B,CAA7C,EAAkF;AAClF,UAAIa,IAAI,CAACG,QAAL,CAActD,OAAd,CAAsBrF,IAAtB,KAA+BwI,IAAI,CAACI,QAAL,CAAcvD,OAAd,CAAsBrF,IAAtB,CAAnC,EAAgE;AAEhE,UAAI4N,QAAqB,SAAzB;;AACA,UAAI;AACF;;AADE,oCACYpF,IAAI,CAAC4C,cAAL,CAAoB0C,SAApB,CADZ;;AACAF,QAAAA,QADA;AAEH,OAFD,CAEE,OAAO7L,KAAP,EAAc;AACd;AACA,YAAIA,KAAK,CAACsN,2BAAV,EAAuC;AACrC;AACD;;AACD,cAAMtN,KAAN;AACD,OAfoC;;;AAiBrC,UAAI6L,QAAQ,CAACjG,KAAT,CAAef,MAAf,CAAsBwI,OAAtB,CAAJ,EAAoC;AAClCxM,QAAAA,YAAY,CACV6L,UADU,EAEV,IAAIxB,KAAJ,CACE,IAAIf,KAAJ,EAAW1D,IAAX,SAAoB+F,YAApB,GAAmCU,UAAnC,EAA+CE,iBAAiB,CAAC9H,QAAjE,CADF,EAEE8H,iBAFF,EAGE1P,iBAAS,CAAC+N,YAHZ,CAFU,EAOVkB,aAPU,EAQV5B,eARU,CAAZ;AAUD,OAXD,MAWO,IAAI6B,OAAO,GAAG,CAAV,IAAetG,KAAK,CAACrF,MAAN,GAAe,CAAlC,EAAqC;AAC1C,YAAM8L,sBAAsB,GAAGzG,KAAK,CAACQ,KAAN,CAAY,CAAZ,EAAeN,CAAf,EAAkBwG,MAAlB,CAAyB1G,KAAK,CAACQ,KAAN,CAAYN,CAAC,GAAG,CAAhB,EAAmBF,KAAK,CAACrF,MAAzB,CAAzB,CAA/B,CAD0C;;AAI1CiK,QAAAA,KAAK,CAAC+B,iBAAN,CACEF,sBADF,EAEEG,UAFF,EAGErB,QAHF,EAIE;AACEc,UAAAA,aAAa,EAAbA,aADF;AAEEC,UAAAA,OAAO,EAAEA,OAAO,GAAG;AAFrB,SAJF,GAQGnG,IARH,SAQY+F,YARZ,GASEY,iBATF,EAUEV,UAVF;AAYD;AACF;;AAED,WAAOA,UAAP;AACD,GAjSH;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1EA,IAAIa,oBAAoB,sDACrB9P,eAAO,CAAC2B,OADa,IACH;AACjB,gDAA8C,CAD7B;;AAAA,CADG,wBAAxB;AAMA;;;;AAGA,IAAsBoO,OAAtB;AACE;;;AAGA;AAEA;;;;;;;;;;AANF,UAcsBC,cAdtB,2BAeI/L,OAfJ,EAgBI9B,OAhBJ,EAiBI8N,QAjBJ,EAkBI9I,MAlBJ,EAmBI5F,IAnBJ;AAAA;;;mCAqBU2O;AAaN,eAAO,IAAIjJ,KAAJ,CAAUhD,OAAV,EAAmB9B,OAAnB,EAA4B+N,cAA5B,EAA4C/I,MAA5C,EAAoD5F,IAApD,CAAP;;;UAjBA0O,wBAAAA,WAAWE,4BAAkB,CAACC,mBAAU,CAACnM,OAAD,CAAX;;mBAK3B,kCAAO6L,oBAAP,qFAAO,uBAAuB7L,OAAvB,CAAP,2DAAO,uBAAkC9B,OAAlC,CAAP,MAAsD;;6CAClD2N,oBAAoB,CAAC7L,OAAD,CAApB,CAA8B9B,OAA9B,qBACM,IAAIkO,kBAAJ,CAAalO,OAAb,EAAsBmO,KAAtB,EAA6BL,QAA7B,EAAuC/I,QAAvC,GAAkDqJ,IAAlD,CAAuD,UAACrJ,QAAD;;;AAC3D4I,QAAAA,oBAAoB,gBACfA,oBADe,6BAEjB7L,OAFiB,2CAGb6L,oBAHa,2DAGb,uBAAuB7L,OAAvB,CAHa,6BAIf9B,OAJe,IAIL+E,QAJK,0BAApB;AAOA,eAAOA,QAAP;AACD,OATK;AAWb,KAnCH;AAAA;AAAA;AAAA;AAqCE;;;;;;AArCF;;AAAA,UA2CsBsJ,aA3CtB,0BA4CI/F,MA5CJ,EA6CIC,MA7CJ,EA8CIuF,QA9CJ;AAAA;UA8CIA,wBAAAA,WAAWE,4BAAkB,CAACC,mBAAU,CAAC3F,MAAM,CAACxG,OAAR,CAAX;AAE7B,QAAUwG,MAAM,CAACxG,OAAP,KAAmByG,MAAM,CAACzG,OAApC,qCAAAjC,SAAS,QAAoC,UAApC,CAAT,GAAAA,SAAS,OAAT;AACA,UAAMG,OAAO,GAAGiI,IAAI,CAAC/H,UAAL,CAAgBoI,MAAhB,EAAwBC,MAAxB,CAAhB;6BACqC,IAAI2F,kBAAJ,CAAalO,OAAb,EAAsBsO,cAAc,CAACC,GAArC,EAA0CT,QAA1C,EAAoDU,WAApD;YAA9BC;YAAWC;AAClB,YAAMC,QAAQ,GAAGrG,MAAM,CAACpD,WAAP,CAAmBqD,MAAnB,IAA6B,CAACkG,SAAD,EAAYC,SAAZ,CAA7B,GAAsD,CAACA,SAAD,EAAYD,SAAZ,CAAvE;AACA,eAAO,IAAIxG,IAAJ,CAAS,IAAIlC,WAAJ,CAAgBuC,MAAhB,EAAwBqG,QAAQ,CAAC,CAAD,CAAhC,CAAT,EAA+C,IAAI5I,WAAJ,CAAgBwC,MAAhB,EAAwBoG,QAAQ,CAAC,CAAD,CAAhC,CAA/C,CAAP;;AACD,KArDH;AAAA;AAAA;AAAA;;AAAA;AAAA;;ACoCA,SAASC,KAAT,CAAepH,cAAf;AACE,gBAAYA,cAAc,CAACvB,GAAf,CAAmB1F,QAAnB,CAA4B,EAA5B,CAAZ;AACD;;AAED,IAAMsO,QAAQ,GAAG,KAAjB;AAEA;;;;AAGA,IAAsBC,MAAtB;AACE;;;AAGA;AACA;;;;;;;AALF,SAUgBC,kBAVhB,GAUS,4BAA0BC,KAA1B,EAAwCC,OAAxC;AACL;AACA,MAAU,EAAE,SAASA,OAAX,KAAuBA,OAAO,CAACC,GAAR,GAAc,CAA/C,KAAArP,SAAS,QAAyC,KAAzC,CAAT,CAAA;AAEA,QAAMsP,EAAE,GAAWpP,uBAAuB,CAACkP,OAAO,CAACG,SAAT,CAA1C;AACA,QAAMnD,QAAQ,GAAW2C,KAAK,CAACI,KAAK,CAACzC,eAAN,CAAsB0C,OAAO,CAACI,eAA9B,CAAD,CAA9B;AACA,QAAMlD,SAAS,GAAWyC,KAAK,CAACI,KAAK,CAAC5C,gBAAN,CAAuB6C,OAAO,CAACI,eAA/B,CAAD,CAA/B;AACA,QAAMvI,IAAI,GAAakI,KAAK,CAACxI,KAAN,CAAYM,IAAZ,CAAiBwI,GAAjB,CAAqB,UAAAtJ,KAAK;AAAA,aAAIA,KAAK,CAAChG,OAAV;AAAA,KAA1B,CAAvB;AACA,QAAMuP,QAAQ,GACZ,SAASN,OAAT,UACS,CAACO,IAAI,CAACC,KAAL,CAAW,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAAlC,IAA0CV,OAAO,CAACC,GAAnD,EAAwD3O,QAAxD,CAAiE,EAAjE,CADT,UAES0O,OAAO,CAACM,QAAR,CAAiBhP,QAAjB,CAA0B,EAA1B,CAHX;AAKA,QAAMqP,gBAAgB,GAAGC,OAAO,CAACZ,OAAO,CAACa,aAAT,CAAhC;AAEA,QAAIC,UAAJ;AACA,QAAIC,IAAJ;AACA,QAAItQ,KAAJ;;AACA,YAAQsP,KAAK,CAACzD,SAAd;AACE,WAAKzN,iBAAS,CAAC6N,WAAf;AACEoE,QAAAA,UAAU,GAAGH,gBAAgB,GACzB,uDADyB,GAEzB,0BAFJ,CADF;;AAKEI,QAAAA,IAAI,GAAG,CAAC/D,QAAD,EAAWE,SAAX,EAAsBrF,IAAtB,EAA4BqI,EAA5B,EAAgCI,QAAhC,CAAP;AACA7P,QAAAA,KAAK,GAAGmP,QAAR;AACA;;AACF,WAAK/Q,iBAAS,CAAC+N,YAAf;AACE,SAAU,CAAC+D,gBAAX,IAAA/P,SAAS,QAAoB,eAApB,CAAT,CAAA;AACAkQ,QAAAA,UAAU,GAAG,0BAAb,CAFF;;AAIEC,QAAAA,IAAI,GAAG,CAAC7D,SAAD,EAAYF,QAAZ,EAAsBnF,IAAtB,EAA4BqI,EAA5B,EAAgCI,QAAhC,CAAP;AACA7P,QAAAA,KAAK,GAAGmP,QAAR;AACA;AAfJ;;AAiBA,WAAO;AACLkB,MAAAA,UAAU,EAAVA,UADK;AAELC,MAAAA,IAAI,EAAJA,IAFK;AAGLtQ,MAAAA,KAAK,EAALA;AAHK,KAAP;AAKD,GAlDH;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;"}